
BMS_2020_07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092cc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009464  08009464  00019464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a4  080094a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080094a4  080094a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094a4  080094a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a4  080094a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080094ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  20000010  080094b8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  080094b8  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010226  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023d2  00000000  00000000  00030262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d78  00000000  00000000  00032638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  000333b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000239dc  00000000  00000000  00033ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c829  00000000  00000000  000579cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbf57  00000000  00000000  000641f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014014c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  001401c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800944c 	.word	0x0800944c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800944c 	.word	0x0800944c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000676:	4b47      	ldr	r3, [pc, #284]	; (8000794 <MX_ADC1_Init+0x134>)
 8000678:	4a47      	ldr	r2, [pc, #284]	; (8000798 <MX_ADC1_Init+0x138>)
 800067a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800067c:	4b45      	ldr	r3, [pc, #276]	; (8000794 <MX_ADC1_Init+0x134>)
 800067e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000682:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000684:	4b43      	ldr	r3, [pc, #268]	; (8000794 <MX_ADC1_Init+0x134>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b42      	ldr	r3, [pc, #264]	; (8000794 <MX_ADC1_Init+0x134>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000690:	4b40      	ldr	r3, [pc, #256]	; (8000794 <MX_ADC1_Init+0x134>)
 8000692:	2201      	movs	r2, #1
 8000694:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000696:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <MX_ADC1_Init+0x134>)
 8000698:	2204      	movs	r2, #4
 800069a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800069c:	4b3d      	ldr	r3, [pc, #244]	; (8000794 <MX_ADC1_Init+0x134>)
 800069e:	2200      	movs	r2, #0
 80006a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a2:	4b3c      	ldr	r3, [pc, #240]	; (8000794 <MX_ADC1_Init+0x134>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80006a8:	4b3a      	ldr	r3, [pc, #232]	; (8000794 <MX_ADC1_Init+0x134>)
 80006aa:	2205      	movs	r2, #5
 80006ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80006ae:	4b39      	ldr	r3, [pc, #228]	; (8000794 <MX_ADC1_Init+0x134>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 5;
 80006b6:	4b37      	ldr	r3, [pc, #220]	; (8000794 <MX_ADC1_Init+0x134>)
 80006b8:	2205      	movs	r2, #5
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006bc:	4b35      	ldr	r3, [pc, #212]	; (8000794 <MX_ADC1_Init+0x134>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <MX_ADC1_Init+0x134>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006c8:	4b32      	ldr	r3, [pc, #200]	; (8000794 <MX_ADC1_Init+0x134>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_ADC1_Init+0x134>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_ADC1_Init+0x134>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006de:	482d      	ldr	r0, [pc, #180]	; (8000794 <MX_ADC1_Init+0x134>)
 80006e0:	f005 f8b4 	bl	800584c <HAL_ADC_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ea:	f004 fcf9 	bl	80050e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_ADC1_Init+0x13c>)
 80006f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f2:	2306      	movs	r3, #6
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80006f6:	2305      	movs	r3, #5
 80006f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fa:	237f      	movs	r3, #127	; 0x7f
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fe:	2304      	movs	r3, #4
 8000700:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4822      	ldr	r0, [pc, #136]	; (8000794 <MX_ADC1_Init+0x134>)
 800070c:	f005 fa8a 	bl	8005c24 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000716:	f004 fce3 	bl	80050e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ADC1_Init+0x140>)
 800071c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800071e:	230c      	movs	r3, #12
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	481b      	ldr	r0, [pc, #108]	; (8000794 <MX_ADC1_Init+0x134>)
 8000728:	f005 fa7c 	bl	8005c24 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000732:	f004 fcd5 	bl	80050e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_ADC1_Init+0x144>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800073a:	2312      	movs	r3, #18
 800073c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <MX_ADC1_Init+0x134>)
 8000744:	f005 fa6e 	bl	8005c24 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800074e:	f004 fcc7 	bl	80050e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_ADC1_Init+0x148>)
 8000754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000756:	2318      	movs	r3, #24
 8000758:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_ADC1_Init+0x134>)
 8000760:	f005 fa60 	bl	8005c24 <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 800076a:	f004 fcb9 	bl	80050e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_ADC1_Init+0x14c>)
 8000770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC1_Init+0x134>)
 800077e:	f005 fa51 	bl	8005c24 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000788:	f004 fcaa 	bl	80050e0 <Error_Handler>
  }

}
 800078c:	bf00      	nop
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000048 	.word	0x20000048
 8000798:	50040000 	.word	0x50040000
 800079c:	0c900008 	.word	0x0c900008
 80007a0:	10c00010 	.word	0x10c00010
 80007a4:	14f00020 	.word	0x14f00020
 80007a8:	36902000 	.word	0x36902000
 80007ac:	3ac04000 	.word	0x3ac04000

080007b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a37      	ldr	r2, [pc, #220]	; (80008ac <HAL_ADC_MspInit+0xfc>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d167      	bne.n	80008a2 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80007d2:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <HAL_ADC_MspInit+0x100>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a36      	ldr	r2, [pc, #216]	; (80008b0 <HAL_ADC_MspInit+0x100>)
 80007d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <HAL_ADC_MspInit+0x100>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <HAL_ADC_MspInit+0x100>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a30      	ldr	r2, [pc, #192]	; (80008b0 <HAL_ADC_MspInit+0x100>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <HAL_ADC_MspInit+0x100>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <HAL_ADC_MspInit+0x100>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <HAL_ADC_MspInit+0x100>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <HAL_ADC_MspInit+0x100>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = TEMP2_Pin|TEMP3_Pin|TEMP4_Pin|TEMP5_Pin;
 800081a:	233c      	movs	r3, #60	; 0x3c
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800081e:	230b      	movs	r3, #11
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4821      	ldr	r0, [pc, #132]	; (80008b4 <HAL_ADC_MspInit+0x104>)
 800082e:	f006 fdcb 	bl	80073c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMP1_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000836:	230b      	movs	r3, #11
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMP1_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f006 fdbe 	bl	80073c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 800084e:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <HAL_ADC_MspInit+0x10c>)
 8000850:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 8000874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000878:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 800087c:	2220      	movs	r2, #32
 800087e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000886:	480c      	ldr	r0, [pc, #48]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 8000888:	f006 fb66 	bl	8006f58 <HAL_DMA_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000892:	f004 fc25 	bl	80050e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 800089a:	651a      	str	r2, [r3, #80]	; 0x50
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_ADC_MspInit+0x108>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	50040000 	.word	0x50040000
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48000800 	.word	0x48000800
 80008b8:	200000b0 	.word	0x200000b0
 80008bc:	40020008 	.word	0x40020008

080008c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_CAN1_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_CAN1_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_CAN1_Init+0x64>)
 80008cc:	2214      	movs	r2, #20
 80008ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_CAN1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_CAN1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_CAN1_Init+0x64>)
 80008de:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80008e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_CAN1_Init+0x64>)
 80008e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_CAN1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_CAN1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_CAN1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_CAN1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_CAN1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_CAN1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_CAN1_Init+0x64>)
 8000912:	f005 fde3 	bl	80064dc <HAL_CAN_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800091c:	f004 fbe0 	bl	80050e0 <Error_Handler>
  }

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000f8 	.word	0x200000f8
 8000928:	40006400 	.word	0x40006400

0800092c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_CAN_MspInit+0x7c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d128      	bne.n	80009a0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_CAN_MspInit+0x80>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_CAN_MspInit+0x80>)
 8000954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_CAN_MspInit+0x80>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_CAN_MspInit+0x80>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_CAN_MspInit+0x80>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_CAN_MspInit+0x80>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800097e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000990:	230a      	movs	r3, #10
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <HAL_CAN_MspInit+0x84>)
 800099c:	f006 fd14 	bl	80073c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40006400 	.word	0x40006400
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000400 	.word	0x48000400

080009b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_DMA_Init+0x38>)
 80009bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <MX_DMA_Init+0x38>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6493      	str	r3, [r2, #72]	; 0x48
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_DMA_Init+0x38>)
 80009c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	200b      	movs	r0, #11
 80009d8:	f006 fa87 	bl	8006eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009dc:	200b      	movs	r0, #11
 80009de:	f006 faa0 	bl	8006f22 <HAL_NVIC_EnableIRQ>

}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a3e      	ldr	r2, [pc, #248]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a38      	ldr	r2, [pc, #224]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a32      	ldr	r2, [pc, #200]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a2c      	ldr	r2, [pc, #176]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <MX_GPIO_Init+0x114>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS1_Pin|SPI1_NSS2_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2130      	movs	r1, #48	; 0x30
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f006 fe25 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHG_Pin|DSG_Pin|LED_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2107      	movs	r1, #7
 8000a76:	4824      	ldr	r0, [pc, #144]	; (8000b08 <MX_GPIO_Init+0x118>)
 8000a78:	f006 fe20 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|A1_Pin|A2_Pin|A3_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000a82:	4822      	ldr	r0, [pc, #136]	; (8000b0c <MX_GPIO_Init+0x11c>)
 8000a84:	f006 fe1a 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_NSS1_Pin|SPI1_NSS2_Pin;
 8000a88:	2330      	movs	r3, #48	; 0x30
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f006 fc91 	bl	80073c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CHG_Pin|DSG_Pin;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4812      	ldr	r0, [pc, #72]	; (8000b08 <MX_GPIO_Init+0x118>)
 8000abe:	f006 fc83 	bl	80073c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <MX_GPIO_Init+0x118>)
 8000ada:	f006 fc75 	bl	80073c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin;
 8000ade:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aec:	2302      	movs	r3, #2
 8000aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_GPIO_Init+0x11c>)
 8000af8:	f006 fc66 	bl	80073c8 <HAL_GPIO_Init>

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48000400 	.word	0x48000400
 8000b0c:	48000800 	.word	0x48000800

08000b10 <Delay_>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Delay_(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
	volatile unsigned long Delay = 4444;
 8000b16:	f241 135c 	movw	r3, #4444	; 0x115c
 8000b1a:	607b      	str	r3, [r7, #4]
	while(Delay--);
 8000b1c:	bf00      	nop
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	1e5a      	subs	r2, r3, #1
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1fa      	bne.n	8000b1e <Delay_+0xe>
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SLAVEBMS_InitCRCTable>:

void SLAVEBMS_InitCRCTable(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
	unsigned short Indicator = 0U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	80fb      	strh	r3, [r7, #6]
	unsigned short Bit;
	unsigned short PEC;

	for(Indicator = 0U; Indicator < 256; Indicator++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	80fb      	strh	r3, [r7, #6]
 8000b42:	e025      	b.n	8000b90 <SLAVEBMS_InitCRCTable+0x5c>
	{
		PEC = Indicator << 7U;
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	01db      	lsls	r3, r3, #7
 8000b48:	807b      	strh	r3, [r7, #2]
		for(Bit = 8U; Bit > 0; --Bit)
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	e014      	b.n	8000b7a <SLAVEBMS_InitCRCTable+0x46>
		{
			if(PEC & 0x4000)
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d009      	beq.n	8000b6e <SLAVEBMS_InitCRCTable+0x3a>
			{
				PEC = (PEC << 1U);
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	807b      	strh	r3, [r7, #2]
				PEC = (PEC ^ (unsigned short)(0x4599));
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 8000b66:	f083 0319 	eor.w	r3, r3, #25
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	e002      	b.n	8000b74 <SLAVEBMS_InitCRCTable+0x40>
			}
			else
			{
				PEC = (PEC << 1U);
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	807b      	strh	r3, [r7, #2]
		for(Bit = 8U; Bit > 0; --Bit)
 8000b74:	88bb      	ldrh	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	80bb      	strh	r3, [r7, #4]
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1e7      	bne.n	8000b50 <SLAVEBMS_InitCRCTable+0x1c>
			}
		}
		SLAVEBMS_CRC_Table[Indicator] = PEC & 0xFFFF;
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <SLAVEBMS_InitCRCTable+0x70>)
 8000b84:	887a      	ldrh	r2, [r7, #2]
 8000b86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(Indicator = 0U; Indicator < 256; Indicator++)
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	80fb      	strh	r3, [r7, #6]
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	2bff      	cmp	r3, #255	; 0xff
 8000b94:	d9d6      	bls.n	8000b44 <SLAVEBMS_InitCRCTable+0x10>
	}
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200006c8 	.word	0x200006c8

08000ba8 <SLAVEBMS_CRC_calc>:

unsigned short SLAVEBMS_CRC_calc(unsigned char len, unsigned char *data)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
	unsigned short Indicator;
	unsigned short PEC;
	unsigned short address;

	PEC = 16;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	81bb      	strh	r3, [r7, #12]
	for(Indicator = 0; Indicator < len; Indicator++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	81fb      	strh	r3, [r7, #14]
 8000bbc:	e019      	b.n	8000bf2 <SLAVEBMS_CRC_calc+0x4a>
	{
		address = ((PEC >> 7) ^ data[Indicator]) & 0xff;
 8000bbe:	89bb      	ldrh	r3, [r7, #12]
 8000bc0:	09db      	lsrs	r3, r3, #7
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	89fb      	ldrh	r3, [r7, #14]
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	440b      	add	r3, r1
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4053      	eors	r3, r2
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	817b      	strh	r3, [r7, #10]
		PEC = (PEC << 8) ^ SLAVEBMS_CRC_Table[address];
 8000bd6:	89bb      	ldrh	r3, [r7, #12]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	897b      	ldrh	r3, [r7, #10]
 8000bde:	490c      	ldr	r1, [pc, #48]	; (8000c10 <SLAVEBMS_CRC_calc+0x68>)
 8000be0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4053      	eors	r3, r2
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	81bb      	strh	r3, [r7, #12]
	for(Indicator = 0; Indicator < len; Indicator++)
 8000bec:	89fb      	ldrh	r3, [r7, #14]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	81fb      	strh	r3, [r7, #14]
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	89fa      	ldrh	r2, [r7, #14]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d3e0      	bcc.n	8000bbe <SLAVEBMS_CRC_calc+0x16>
	}

	return (PEC*2);
 8000bfc:	89bb      	ldrh	r3, [r7, #12]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	b29b      	uxth	r3, r3
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	200006c8 	.word	0x200006c8

08000c14 <SLAVEBMS_Access>:


unsigned char SLAVEBMS_Access(unsigned char Value)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi1, &Value, &Value, 1, 10);
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	1df9      	adds	r1, r7, #7
 8000c22:	230a      	movs	r3, #10
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <SLAVEBMS_Access+0x24>)
 8000c2a:	f007 ff93 	bl	8008b54 <HAL_SPI_TransmitReceive>
	return (unsigned char)(Value);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000934 	.word	0x20000934

08000c3c <SLAVEBMS_Wakeup>:


void SLAVEBMS_Wakeup(unsigned char direction)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	if(direction == SLAVEBMSACCESS_FWD)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d112      	bne.n	8000c72 <SLAVEBMS_Wakeup+0x36>
	{
		SLAVEBMSFORWARD_CS_L();
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2110      	movs	r1, #16
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f006 fd32 	bl	80076bc <HAL_GPIO_WritePin>
		SLAVEBMS_Access(0x00);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff ffdb 	bl	8000c14 <SLAVEBMS_Access>
		SLAVEBMS_Access(0x00);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff ffd8 	bl	8000c14 <SLAVEBMS_Access>
		SLAVEBMSFORWARD_CS_H();
 8000c64:	2201      	movs	r2, #1
 8000c66:	2110      	movs	r1, #16
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f006 fd26 	bl	80076bc <HAL_GPIO_WritePin>
		SLAVEBMSREVERSE_CS_L();
		SLAVEBMS_Access(0x00);
		SLAVEBMS_Access(0x00);
		SLAVEBMSREVERSE_CS_H();
	}
}
 8000c70:	e014      	b.n	8000c9c <SLAVEBMS_Wakeup+0x60>
	else if(direction == SLAVEBMSACCESS_REV)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d111      	bne.n	8000c9c <SLAVEBMS_Wakeup+0x60>
		SLAVEBMSREVERSE_CS_L();
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f006 fd1c 	bl	80076bc <HAL_GPIO_WritePin>
		SLAVEBMS_Access(0x00);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff ffc5 	bl	8000c14 <SLAVEBMS_Access>
		SLAVEBMS_Access(0x00);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff ffc2 	bl	8000c14 <SLAVEBMS_Access>
		SLAVEBMSREVERSE_CS_H();
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f006 fd10 	bl	80076bc <HAL_GPIO_WritePin>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SLAVEBMS_ReadDataGroup>:

unsigned char SLAVEBMS_ReadDataGroup(unsigned char direction, unsigned short Order, unsigned char Counting, unsigned char *BF)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	80bb      	strh	r3, [r7, #4]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
	unsigned char TX_BF[4U];
	unsigned short CRC_calc;
	unsigned short CRC_extracted;
	unsigned char Indicator;
	unsigned char ReadCount = Counting * 8U;
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	75bb      	strb	r3, [r7, #22]

	for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	75fb      	strb	r3, [r7, #23]
 8000cc2:	e007      	b.n	8000cd4 <SLAVEBMS_ReadDataGroup+0x30>
	{
		*(BF + Indicator) = 0x00;
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
	for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	75fb      	strb	r3, [r7, #23]
 8000cd4:	7dfa      	ldrb	r2, [r7, #23]
 8000cd6:	7dbb      	ldrb	r3, [r7, #22]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3f3      	bcc.n	8000cc4 <SLAVEBMS_ReadDataGroup+0x20>
	}

	TX_BF[0U] = (unsigned char)((Order >> 8U) & 0x00FFU);
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	733b      	strb	r3, [r7, #12]
	TX_BF[1U] = (unsigned char)((Order >> 0U) & 0x00FFU);
 8000ce6:	88bb      	ldrh	r3, [r7, #4]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	737b      	strb	r3, [r7, #13]
	CRC_calc = SLAVEBMS_CRC_calc(2U, TX_BF);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f7ff ff58 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	82bb      	strh	r3, [r7, #20]
	TX_BF[2U] = (unsigned char)((CRC_calc >> 8U) & 0x00FFU);
 8000cfc:	8abb      	ldrh	r3, [r7, #20]
 8000cfe:	0a1b      	lsrs	r3, r3, #8
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	73bb      	strb	r3, [r7, #14]
	TX_BF[3U] = (unsigned char)((CRC_calc >> 0U) & 0x00FFU);
 8000d06:	8abb      	ldrh	r3, [r7, #20]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	73fb      	strb	r3, [r7, #15]

	if(direction == SLAVEBMSACCESS_FWD)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d132      	bne.n	8000d78 <SLAVEBMS_ReadDataGroup+0xd4>
	{
		SLAVEBMSFORWARD_CS_L();
 8000d12:	2200      	movs	r2, #0
 8000d14:	2110      	movs	r1, #16
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f006 fccf 	bl	80076bc <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]
 8000d22:	e00b      	b.n	8000d3c <SLAVEBMS_ReadDataGroup+0x98>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 8000d24:	7dfb      	ldrb	r3, [r7, #23]
 8000d26:	f107 0218 	add.w	r2, r7, #24
 8000d2a:	4413      	add	r3, r2
 8000d2c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff6f 	bl	8000c14 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	75fb      	strb	r3, [r7, #23]
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d9f0      	bls.n	8000d24 <SLAVEBMS_ReadDataGroup+0x80>
		}
		Delay_();
 8000d42:	f7ff fee5 	bl	8000b10 <Delay_>
		for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	75fb      	strb	r3, [r7, #23]
 8000d4a:	e00a      	b.n	8000d62 <SLAVEBMS_ReadDataGroup+0xbe>
		{
			*(BF + Indicator) = SLAVEBMS_Access((unsigned char)(0x00));
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	18d4      	adds	r4, r2, r3
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ff5e 	bl	8000c14 <SLAVEBMS_Access>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	7023      	strb	r3, [r4, #0]
		for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	75fb      	strb	r3, [r7, #23]
 8000d62:	7dfa      	ldrb	r2, [r7, #23]
 8000d64:	7dbb      	ldrb	r3, [r7, #22]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3f0      	bcc.n	8000d4c <SLAVEBMS_ReadDataGroup+0xa8>
		}
		SLAVEBMSFORWARD_CS_H();
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f006 fca3 	bl	80076bc <HAL_GPIO_WritePin>
 8000d76:	e034      	b.n	8000de2 <SLAVEBMS_ReadDataGroup+0x13e>
	}
	else if(direction == SLAVEBMSACCESS_REV)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d131      	bne.n	8000de2 <SLAVEBMS_ReadDataGroup+0x13e>
	{
		SLAVEBMSREVERSE_CS_L();
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2110      	movs	r1, #16
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f006 fc99 	bl	80076bc <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	75fb      	strb	r3, [r7, #23]
 8000d8e:	e00b      	b.n	8000da8 <SLAVEBMS_ReadDataGroup+0x104>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	f107 0218 	add.w	r2, r7, #24
 8000d96:	4413      	add	r3, r2
 8000d98:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff39 	bl	8000c14 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	3301      	adds	r3, #1
 8000da6:	75fb      	strb	r3, [r7, #23]
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d9f0      	bls.n	8000d90 <SLAVEBMS_ReadDataGroup+0xec>
		}
		Delay_();
 8000dae:	f7ff feaf 	bl	8000b10 <Delay_>
		for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]
 8000db6:	e00a      	b.n	8000dce <SLAVEBMS_ReadDataGroup+0x12a>
		{
			*(BF + Indicator) = SLAVEBMS_Access((unsigned char)(0x00));
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	18d4      	adds	r4, r2, r3
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ff28 	bl	8000c14 <SLAVEBMS_Access>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
		for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 8000dc8:	7dfb      	ldrb	r3, [r7, #23]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	75fb      	strb	r3, [r7, #23]
 8000dce:	7dfa      	ldrb	r2, [r7, #23]
 8000dd0:	7dbb      	ldrb	r3, [r7, #22]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3f0      	bcc.n	8000db8 <SLAVEBMS_ReadDataGroup+0x114>
		}
		SLAVEBMSREVERSE_CS_H();
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2110      	movs	r1, #16
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f006 fc6d 	bl	80076bc <HAL_GPIO_WritePin>
	}

	for(Indicator = 0U; Indicator < Counting; Indicator++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]
 8000de6:	e025      	b.n	8000e34 <SLAVEBMS_ReadDataGroup+0x190>
	{
		CRC_calc = SLAVEBMS_CRC_calc(6U, (BF + (Indicator * 8U)));
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	2006      	movs	r0, #6
 8000df4:	f7ff fed8 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	82bb      	strh	r3, [r7, #20]
		CRC_extracted = ((unsigned short)(*(BF + (Indicator * 8U) + 6)) << 8);
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	3306      	adds	r3, #6
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	827b      	strh	r3, [r7, #18]
		CRC_extracted |= *(BF + (Indicator * 8U) + 7);
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	3307      	adds	r3, #7
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	8a7b      	ldrh	r3, [r7, #18]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	827b      	strh	r3, [r7, #18]

		if(CRC_calc != CRC_extracted)
 8000e22:	8aba      	ldrh	r2, [r7, #20]
 8000e24:	8a7b      	ldrh	r3, [r7, #18]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d001      	beq.n	8000e2e <SLAVEBMS_ReadDataGroup+0x18a>
		{
			return SLAVEBMSACCESS_CRC_MISMATCH;
 8000e2a:	23ff      	movs	r3, #255	; 0xff
 8000e2c:	e007      	b.n	8000e3e <SLAVEBMS_ReadDataGroup+0x19a>
	for(Indicator = 0U; Indicator < Counting; Indicator++)
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	3301      	adds	r3, #1
 8000e32:	75fb      	strb	r3, [r7, #23]
 8000e34:	7dfa      	ldrb	r2, [r7, #23]
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d3d5      	bcc.n	8000de8 <SLAVEBMS_ReadDataGroup+0x144>
		}
	}

	return SLAVEBMSACCESS_CRC_MATCH;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	371c      	adds	r7, #28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd90      	pop	{r4, r7, pc}

08000e46 <SLAVEBMS_WriteSingleCmd>:

void SLAVEBMS_WriteSingleCmd(unsigned char direction, unsigned short RequestCMD)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	460a      	mov	r2, r1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	4613      	mov	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
	unsigned short CRC_calc;
	unsigned char TX_BF[4U];
	unsigned char Indicator;

	TX_BF[0U] = (unsigned char)((RequestCMD >> 8U) & 0x00FFU);
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	723b      	strb	r3, [r7, #8]
	TX_BF[1U] = (unsigned char)((RequestCMD >> 0U) & 0x00FFU);
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	727b      	strb	r3, [r7, #9]
	CRC_calc = SLAVEBMS_CRC_calc(2U, TX_BF);
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff fe9b 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8000e72:	4603      	mov	r3, r0
 8000e74:	81bb      	strh	r3, [r7, #12]
	TX_BF[2U] = (unsigned char)((CRC_calc >> 8U) & 0x00FFU);
 8000e76:	89bb      	ldrh	r3, [r7, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	72bb      	strb	r3, [r7, #10]
	TX_BF[3U] = (unsigned char)((CRC_calc >> 0U) & 0x00FFU);
 8000e80:	89bb      	ldrh	r3, [r7, #12]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	72fb      	strb	r3, [r7, #11]

	if(direction == SLAVEBMSACCESS_FWD)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d11e      	bne.n	8000eca <SLAVEBMS_WriteSingleCmd+0x84>
	{
		SLAVEBMSFORWARD_CS_L();
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2110      	movs	r1, #16
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f006 fc12 	bl	80076bc <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	e00b      	b.n	8000eb6 <SLAVEBMS_WriteSingleCmd+0x70>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	f107 0210 	add.w	r2, r7, #16
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff feb2 	bl	8000c14 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d9f0      	bls.n	8000e9e <SLAVEBMS_WriteSingleCmd+0x58>
		}
		SLAVEBMSFORWARD_CS_H();
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f006 fbfa 	bl	80076bc <HAL_GPIO_WritePin>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
		}
		SLAVEBMSREVERSE_CS_H();
	}
}
 8000ec8:	e020      	b.n	8000f0c <SLAVEBMS_WriteSingleCmd+0xc6>
	else if(direction == SLAVEBMSACCESS_REV)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d11d      	bne.n	8000f0c <SLAVEBMS_WriteSingleCmd+0xc6>
		SLAVEBMSREVERSE_CS_L();
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f006 fbf0 	bl	80076bc <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e00b      	b.n	8000efa <SLAVEBMS_WriteSingleCmd+0xb4>
			SLAVEBMS_Access(TX_BF[Indicator]);
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	f107 0210 	add.w	r2, r7, #16
 8000ee8:	4413      	add	r3, r2
 8000eea:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fe90 	bl	8000c14 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d9f0      	bls.n	8000ee2 <SLAVEBMS_WriteSingleCmd+0x9c>
		SLAVEBMSREVERSE_CS_H();
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f006 fbd8 	bl	80076bc <HAL_GPIO_WritePin>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <SLAVEBMS_PollADCDone>:

void SLAVEBMS_PollADCDone(unsigned char direction, unsigned char *Result)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
	unsigned short CRC_calc;
	unsigned char TX_BF[4U];
	unsigned char Indicator;

	TX_BF[0U] = (unsigned char)((SLAVEBMS_CMD_PLADC >> 8U) & 0x00FFU);
 8000f20:	2307      	movs	r3, #7
 8000f22:	723b      	strb	r3, [r7, #8]
	TX_BF[1U] = (unsigned char)((SLAVEBMS_CMD_PLADC >> 0U) & 0x00FFU);
 8000f24:	2314      	movs	r3, #20
 8000f26:	727b      	strb	r3, [r7, #9]
	CRC_calc = SLAVEBMS_CRC_calc(2U, TX_BF);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f7ff fe3a 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8000f34:	4603      	mov	r3, r0
 8000f36:	81bb      	strh	r3, [r7, #12]
	TX_BF[2U] = (unsigned char)((CRC_calc >> 8U) & 0x00FFU);
 8000f38:	89bb      	ldrh	r3, [r7, #12]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	72bb      	strb	r3, [r7, #10]
	TX_BF[3U] = (unsigned char)((CRC_calc >> 0U) & 0x00FFU);
 8000f42:	89bb      	ldrh	r3, [r7, #12]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]

	if(direction == SLAVEBMSACCESS_FWD)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d13c      	bne.n	8000fc8 <SLAVEBMS_PollADCDone+0xb4>
	{
		SLAVEBMSFORWARD_CS_L();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f006 fbb1 	bl	80076bc <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e00b      	b.n	8000f78 <SLAVEBMS_PollADCDone+0x64>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f107 0210 	add.w	r2, r7, #16
 8000f66:	4413      	add	r3, r2
 8000f68:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fe51 	bl	8000c14 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3301      	adds	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d9f0      	bls.n	8000f60 <SLAVEBMS_PollADCDone+0x4c>
		}
		Indicator = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
		while(1)
		{
			HAL_Delay(1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f004 fa72 	bl	800546c <HAL_Delay>
			if(SLAVEBMS_Access((unsigned char)(0xFF)) == (unsigned char)(0xFF))
 8000f88:	20ff      	movs	r0, #255	; 0xff
 8000f8a:	f7ff fe43 	bl	8000c14 <SLAVEBMS_Access>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2bff      	cmp	r3, #255	; 0xff
 8000f92:	d109      	bne.n	8000fa8 <SLAVEBMS_PollADCDone+0x94>
			{
				SLAVEBMSFORWARD_CS_H();
 8000f94:	2201      	movs	r2, #1
 8000f96:	2110      	movs	r1, #16
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f006 fb8e 	bl	80076bc <HAL_GPIO_WritePin>
				*Result = SLAVEBMSACCESS_CRC_MATCH;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
				break;
 8000fa6:	e04e      	b.n	8001046 <SLAVEBMS_PollADCDone+0x132>
			}
			Indicator++;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3301      	adds	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
			if(Indicator > 16)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b10      	cmp	r3, #16
 8000fb2:	d9e6      	bls.n	8000f82 <SLAVEBMS_PollADCDone+0x6e>
			{
				SLAVEBMSFORWARD_CS_H();
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f006 fb7e 	bl	80076bc <HAL_GPIO_WritePin>
				*Result = SLAVEBMSACCESS_CRC_MISMATCH;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	22ff      	movs	r2, #255	; 0xff
 8000fc4:	701a      	strb	r2, [r3, #0]
				break;
 8000fc6:	e03e      	b.n	8001046 <SLAVEBMS_PollADCDone+0x132>
			}
		}
	}
	else if(direction == SLAVEBMSACCESS_REV)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d13b      	bne.n	8001046 <SLAVEBMS_PollADCDone+0x132>
	{
		SLAVEBMSREVERSE_CS_L();
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f006 fb71 	bl	80076bc <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e00b      	b.n	8000ff8 <SLAVEBMS_PollADCDone+0xe4>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f107 0210 	add.w	r2, r7, #16
 8000fe6:	4413      	add	r3, r2
 8000fe8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fe11 	bl	8000c14 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d9f0      	bls.n	8000fe0 <SLAVEBMS_PollADCDone+0xcc>
		}
		Indicator = 0U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
		while(1)
		{
			HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f004 fa32 	bl	800546c <HAL_Delay>
			if(SLAVEBMS_Access((unsigned char)(0xFF)) == (unsigned char)(0xFF))
 8001008:	20ff      	movs	r0, #255	; 0xff
 800100a:	f7ff fe03 	bl	8000c14 <SLAVEBMS_Access>
 800100e:	4603      	mov	r3, r0
 8001010:	2bff      	cmp	r3, #255	; 0xff
 8001012:	d109      	bne.n	8001028 <SLAVEBMS_PollADCDone+0x114>
			{
				SLAVEBMSREVERSE_CS_H();
 8001014:	2201      	movs	r2, #1
 8001016:	2110      	movs	r1, #16
 8001018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101c:	f006 fb4e 	bl	80076bc <HAL_GPIO_WritePin>
				*Result = SLAVEBMSACCESS_CRC_MATCH;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
				break;
 8001026:	e00e      	b.n	8001046 <SLAVEBMS_PollADCDone+0x132>
			}
			Indicator++;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3301      	adds	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
			if(Indicator > 16)
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	2b10      	cmp	r3, #16
 8001032:	d9e6      	bls.n	8001002 <SLAVEBMS_PollADCDone+0xee>
			{
				SLAVEBMSREVERSE_CS_H();
 8001034:	2201      	movs	r2, #1
 8001036:	2110      	movs	r1, #16
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f006 fb3e 	bl	80076bc <HAL_GPIO_WritePin>
				*Result = SLAVEBMSACCESS_CRC_MISMATCH;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	22ff      	movs	r2, #255	; 0xff
 8001044:	701a      	strb	r2, [r3, #0]
				break;
			}
		}
	}
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <Reading_Voltage>:

void Reading_Voltage(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0
	unsigned char Data_Array[44U]; //Order array 4 + (Configuration array 6 + CRC 2)*5
	unsigned short CRC_calc;
	unsigned char ConversionResult;

	SLAVEBMS_Wakeup(SLAVEBMSACCESS_FWD);
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff fdf0 	bl	8000c3c <SLAVEBMS_Wakeup>
	HAL_Delay(10);
 800105c:	200a      	movs	r0, #10
 800105e:	f004 fa05 	bl	800546c <HAL_Delay>

	Data_Array[0] = (unsigned char)((SLAVEBMS_CMD_WRCFGA >> 8U) & 0x00FFU);
 8001062:	2300      	movs	r3, #0
 8001064:	723b      	strb	r3, [r7, #8]
	Data_Array[1] = (unsigned char)((SLAVEBMS_CMD_WRCFGA >> 0U) & 0x00FFU);
 8001066:	2301      	movs	r3, #1
 8001068:	727b      	strb	r3, [r7, #9]
	CRC_calc = SLAVEBMS_CRC_calc(2U, &Data_Array[0U]);
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4619      	mov	r1, r3
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff fd99 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8001076:	4603      	mov	r3, r0
 8001078:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[2] = (unsigned char)(CRC_calc >> 8);
 800107a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b29b      	uxth	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	72bb      	strb	r3, [r7, #10]
	Data_Array[3] = (unsigned char)(CRC_calc >> 0);
 8001084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001086:	b2db      	uxtb	r3, r3
 8001088:	72fb      	strb	r3, [r7, #11]

	Data_Array[4] = (unsigned char)(0xFE);
 800108a:	23fe      	movs	r3, #254	; 0xfe
 800108c:	733b      	strb	r3, [r7, #12]
	Data_Array[5] = (unsigned char)(0x0E);
 800108e:	230e      	movs	r3, #14
 8001090:	737b      	strb	r3, [r7, #13]
	Data_Array[6] = (unsigned char)(0x18);
 8001092:	2318      	movs	r3, #24
 8001094:	73bb      	strb	r3, [r7, #14]
	Data_Array[7] = (unsigned char)(0xA4);
 8001096:	23a4      	movs	r3, #164	; 0xa4
 8001098:	73fb      	strb	r3, [r7, #15]
	Data_Array[8] = (unsigned char)(0x00);
 800109a:	2300      	movs	r3, #0
 800109c:	743b      	strb	r3, [r7, #16]
	Data_Array[9] = (unsigned char)(0x00);
 800109e:	2300      	movs	r3, #0
 80010a0:	747b      	strb	r3, [r7, #17]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[4]);
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	3304      	adds	r3, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	2006      	movs	r0, #6
 80010ac:	f7ff fd7c 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 80010b0:	4603      	mov	r3, r0
 80010b2:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[10] = (unsigned char)(CRC_calc >> 8);
 80010b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010b6:	0a1b      	lsrs	r3, r3, #8
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	74bb      	strb	r3, [r7, #18]
	Data_Array[11] = (unsigned char)(CRC_calc >> 0);
 80010be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	74fb      	strb	r3, [r7, #19]

	Data_Array[12] = (unsigned char)(0xFE);
 80010c4:	23fe      	movs	r3, #254	; 0xfe
 80010c6:	753b      	strb	r3, [r7, #20]
	Data_Array[13] = (unsigned char)(0x0E);
 80010c8:	230e      	movs	r3, #14
 80010ca:	757b      	strb	r3, [r7, #21]
	Data_Array[14] = (unsigned char)(0x18);
 80010cc:	2318      	movs	r3, #24
 80010ce:	75bb      	strb	r3, [r7, #22]
	Data_Array[15] = (unsigned char)(0xA4);
 80010d0:	23a4      	movs	r3, #164	; 0xa4
 80010d2:	75fb      	strb	r3, [r7, #23]
	Data_Array[16] = (unsigned char)(0x00);
 80010d4:	2300      	movs	r3, #0
 80010d6:	763b      	strb	r3, [r7, #24]
	Data_Array[17] = (unsigned char)(0x00);
 80010d8:	2300      	movs	r3, #0
 80010da:	767b      	strb	r3, [r7, #25]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[12]);
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	330c      	adds	r3, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	2006      	movs	r0, #6
 80010e6:	f7ff fd5f 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 80010ea:	4603      	mov	r3, r0
 80010ec:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[18] = (unsigned char)(CRC_calc >> 8);
 80010ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	76bb      	strb	r3, [r7, #26]
	Data_Array[19] = (unsigned char)(CRC_calc >> 0);
 80010f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	76fb      	strb	r3, [r7, #27]

	Data_Array[20] = (unsigned char)(0xFE);
 80010fe:	23fe      	movs	r3, #254	; 0xfe
 8001100:	773b      	strb	r3, [r7, #28]
	Data_Array[21] = (unsigned char)(0x0E);
 8001102:	230e      	movs	r3, #14
 8001104:	777b      	strb	r3, [r7, #29]
	Data_Array[22] = (unsigned char)(0x18);
 8001106:	2318      	movs	r3, #24
 8001108:	77bb      	strb	r3, [r7, #30]
	Data_Array[23] = (unsigned char)(0xA4);
 800110a:	23a4      	movs	r3, #164	; 0xa4
 800110c:	77fb      	strb	r3, [r7, #31]
	Data_Array[24] = (unsigned char)(0x00);
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3020 	strb.w	r3, [r7, #32]
	Data_Array[25] = (unsigned char)(0x00);
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[20]);
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	3314      	adds	r3, #20
 8001120:	4619      	mov	r1, r3
 8001122:	2006      	movs	r0, #6
 8001124:	f7ff fd40 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8001128:	4603      	mov	r3, r0
 800112a:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[26] = (unsigned char)(CRC_calc >> 8);
 800112c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	b29b      	uxth	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	Data_Array[27] = (unsigned char)(CRC_calc >> 0);
 8001138:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	Data_Array[28] = (unsigned char)(0xFE);
 8001140:	23fe      	movs	r3, #254	; 0xfe
 8001142:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Data_Array[29] = (unsigned char)(0x0E);
 8001146:	230e      	movs	r3, #14
 8001148:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Data_Array[30] = (unsigned char)(0x18);
 800114c:	2318      	movs	r3, #24
 800114e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	Data_Array[31] = (unsigned char)(0xA4);
 8001152:	23a4      	movs	r3, #164	; 0xa4
 8001154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Data_Array[32] = (unsigned char)(0x00);
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	Data_Array[33] = (unsigned char)(0x00);
 800115e:	2300      	movs	r3, #0
 8001160:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[28]);
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	331c      	adds	r3, #28
 800116a:	4619      	mov	r1, r3
 800116c:	2006      	movs	r0, #6
 800116e:	f7ff fd1b 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8001172:	4603      	mov	r3, r0
 8001174:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[34] = (unsigned char)(CRC_calc >> 8);
 8001176:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Data_Array[35] = (unsigned char)(CRC_calc >> 0);
 8001182:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	Data_Array[36] = (unsigned char)(0xFE);
 800118a:	23fe      	movs	r3, #254	; 0xfe
 800118c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	Data_Array[37] = (unsigned char)(0x0E);
 8001190:	230e      	movs	r3, #14
 8001192:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	Data_Array[38] = (unsigned char)(0x18);
 8001196:	2318      	movs	r3, #24
 8001198:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	Data_Array[39] = (unsigned char)(0xA4);
 800119c:	23a4      	movs	r3, #164	; 0xa4
 800119e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Data_Array[40] = (unsigned char)(0x00);
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	Data_Array[41] = (unsigned char)(0x00);
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[36]);
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	3324      	adds	r3, #36	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	2006      	movs	r0, #6
 80011b8:	f7ff fcf6 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 80011bc:	4603      	mov	r3, r0
 80011be:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[42] = (unsigned char)(CRC_calc >> 8);
 80011c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	Data_Array[43] = (unsigned char)(CRC_calc >> 0);
 80011cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33


	SLAVEBMSFORWARD_CS_L();
 80011d4:	2200      	movs	r2, #0
 80011d6:	2110      	movs	r1, #16
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f006 fa6e 	bl	80076bc <HAL_GPIO_WritePin>
	for(CRC_calc = 0U; CRC_calc < 44; CRC_calc++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80011e4:	e00b      	b.n	80011fe <Reading_Voltage+0x1ae>
	{
		SLAVEBMS_Access(Data_Array[CRC_calc]);
 80011e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80011ec:	4413      	add	r3, r2
 80011ee:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fd0e 	bl	8000c14 <SLAVEBMS_Access>
	for(CRC_calc = 0U; CRC_calc < 44; CRC_calc++)
 80011f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011fa:	3301      	adds	r3, #1
 80011fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80011fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001200:	2b2b      	cmp	r3, #43	; 0x2b
 8001202:	d9f0      	bls.n	80011e6 <Reading_Voltage+0x196>
	}
	SLAVEBMSFORWARD_CS_H();
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f006 fa56 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f004 f92b 	bl	800546c <HAL_Delay>

	Data_Array[0] = (unsigned char)((SLAVEBMS_CMD_WRCFGB >> 8U) & 0x00FFU);
 8001216:	2300      	movs	r3, #0
 8001218:	723b      	strb	r3, [r7, #8]
	Data_Array[1] = (unsigned char)((SLAVEBMS_CMD_WRCFGB >> 0U) & 0x00FFU);
 800121a:	2324      	movs	r3, #36	; 0x24
 800121c:	727b      	strb	r3, [r7, #9]
	CRC_calc = SLAVEBMS_CRC_calc(2U, &Data_Array[0U]);
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	4619      	mov	r1, r3
 8001224:	2002      	movs	r0, #2
 8001226:	f7ff fcbf 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 800122a:	4603      	mov	r3, r0
 800122c:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[2] = (unsigned char)(CRC_calc >> 8);
 800122e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b29b      	uxth	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	72bb      	strb	r3, [r7, #10]
	Data_Array[3] = (unsigned char)(CRC_calc >> 0);
 8001238:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800123a:	b2db      	uxtb	r3, r3
 800123c:	72fb      	strb	r3, [r7, #11]

	Data_Array[4] = (unsigned char)(0x0F);
 800123e:	230f      	movs	r3, #15
 8001240:	733b      	strb	r3, [r7, #12]
	Data_Array[5] = (unsigned char)(0x80);
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	737b      	strb	r3, [r7, #13]
	Data_Array[6] = (unsigned char)(0x00);
 8001246:	2300      	movs	r3, #0
 8001248:	73bb      	strb	r3, [r7, #14]
	Data_Array[7] = (unsigned char)(0x00);
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
	Data_Array[8] = (unsigned char)(0x00);
 800124e:	2300      	movs	r3, #0
 8001250:	743b      	strb	r3, [r7, #16]
	Data_Array[9] = (unsigned char)(0x00);
 8001252:	2300      	movs	r3, #0
 8001254:	747b      	strb	r3, [r7, #17]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[4]);
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	3304      	adds	r3, #4
 800125c:	4619      	mov	r1, r3
 800125e:	2006      	movs	r0, #6
 8001260:	f7ff fca2 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8001264:	4603      	mov	r3, r0
 8001266:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[10] = (unsigned char)(CRC_calc >> 8);
 8001268:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b29b      	uxth	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	74bb      	strb	r3, [r7, #18]
	Data_Array[11] = (unsigned char)(CRC_calc >> 0);
 8001272:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001274:	b2db      	uxtb	r3, r3
 8001276:	74fb      	strb	r3, [r7, #19]

	Data_Array[12] = (unsigned char)(0x0F);
 8001278:	230f      	movs	r3, #15
 800127a:	753b      	strb	r3, [r7, #20]
	Data_Array[13] = (unsigned char)(0x80);
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	757b      	strb	r3, [r7, #21]
	Data_Array[14] = (unsigned char)(0x00);
 8001280:	2300      	movs	r3, #0
 8001282:	75bb      	strb	r3, [r7, #22]
	Data_Array[15] = (unsigned char)(0x00);
 8001284:	2300      	movs	r3, #0
 8001286:	75fb      	strb	r3, [r7, #23]
	Data_Array[16] = (unsigned char)(0x00);
 8001288:	2300      	movs	r3, #0
 800128a:	763b      	strb	r3, [r7, #24]
	Data_Array[17] = (unsigned char)(0x00);
 800128c:	2300      	movs	r3, #0
 800128e:	767b      	strb	r3, [r7, #25]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[12]);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	330c      	adds	r3, #12
 8001296:	4619      	mov	r1, r3
 8001298:	2006      	movs	r0, #6
 800129a:	f7ff fc85 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 800129e:	4603      	mov	r3, r0
 80012a0:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[18] = (unsigned char)(CRC_calc >> 8);
 80012a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	76bb      	strb	r3, [r7, #26]
	Data_Array[19] = (unsigned char)(CRC_calc >> 0);
 80012ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	76fb      	strb	r3, [r7, #27]

	Data_Array[20] = (unsigned char)(0x0F);
 80012b2:	230f      	movs	r3, #15
 80012b4:	773b      	strb	r3, [r7, #28]
	Data_Array[21] = (unsigned char)(0x80);
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	777b      	strb	r3, [r7, #29]
	Data_Array[22] = (unsigned char)(0x00);
 80012ba:	2300      	movs	r3, #0
 80012bc:	77bb      	strb	r3, [r7, #30]
	Data_Array[23] = (unsigned char)(0x00);
 80012be:	2300      	movs	r3, #0
 80012c0:	77fb      	strb	r3, [r7, #31]
	Data_Array[24] = (unsigned char)(0x00);
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3020 	strb.w	r3, [r7, #32]
	Data_Array[25] = (unsigned char)(0x00);
 80012c8:	2300      	movs	r3, #0
 80012ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[20]);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	3314      	adds	r3, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	2006      	movs	r0, #6
 80012d8:	f7ff fc66 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 80012dc:	4603      	mov	r3, r0
 80012de:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[26] = (unsigned char)(CRC_calc >> 8);
 80012e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	Data_Array[27] = (unsigned char)(CRC_calc >> 0);
 80012ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	Data_Array[28] = (unsigned char)(0x0F);
 80012f4:	230f      	movs	r3, #15
 80012f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Data_Array[29] = (unsigned char)(0x80);
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Data_Array[30] = (unsigned char)(0x00);
 8001300:	2300      	movs	r3, #0
 8001302:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	Data_Array[31] = (unsigned char)(0x00);
 8001306:	2300      	movs	r3, #0
 8001308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Data_Array[32] = (unsigned char)(0x00);
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	Data_Array[33] = (unsigned char)(0x00);
 8001312:	2300      	movs	r3, #0
 8001314:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[28]);
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	331c      	adds	r3, #28
 800131e:	4619      	mov	r1, r3
 8001320:	2006      	movs	r0, #6
 8001322:	f7ff fc41 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8001326:	4603      	mov	r3, r0
 8001328:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[34] = (unsigned char)(CRC_calc >> 8);
 800132a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	b29b      	uxth	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Data_Array[35] = (unsigned char)(CRC_calc >> 0);
 8001336:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	Data_Array[36] = (unsigned char)(0x0F);
 800133e:	230f      	movs	r3, #15
 8001340:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	Data_Array[37] = (unsigned char)(0x80);
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	Data_Array[38] = (unsigned char)(0x00);
 800134a:	2300      	movs	r3, #0
 800134c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	Data_Array[39] = (unsigned char)(0x00);
 8001350:	2300      	movs	r3, #0
 8001352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Data_Array[40] = (unsigned char)(0x00);
 8001356:	2300      	movs	r3, #0
 8001358:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	Data_Array[41] = (unsigned char)(0x00);
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[36]);
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	3324      	adds	r3, #36	; 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	2006      	movs	r0, #6
 800136c:	f7ff fc1c 	bl	8000ba8 <SLAVEBMS_CRC_calc>
 8001370:	4603      	mov	r3, r0
 8001372:	86fb      	strh	r3, [r7, #54]	; 0x36
	Data_Array[42] = (unsigned char)(CRC_calc >> 8);
 8001374:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29b      	uxth	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	Data_Array[43] = (unsigned char)(CRC_calc >> 0);
 8001380:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	SLAVEBMSFORWARD_CS_L();
 8001388:	2200      	movs	r2, #0
 800138a:	2110      	movs	r1, #16
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f006 f994 	bl	80076bc <HAL_GPIO_WritePin>
	for(CRC_calc = 0U; CRC_calc < 44; CRC_calc++)
 8001394:	2300      	movs	r3, #0
 8001396:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001398:	e00b      	b.n	80013b2 <Reading_Voltage+0x362>
	{
		SLAVEBMS_Access(Data_Array[CRC_calc]);
 800139a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800139c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80013a0:	4413      	add	r3, r2
 80013a2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fc34 	bl	8000c14 <SLAVEBMS_Access>
	for(CRC_calc = 0U; CRC_calc < 44; CRC_calc++)
 80013ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013ae:	3301      	adds	r3, #1
 80013b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80013b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013b4:	2b2b      	cmp	r3, #43	; 0x2b
 80013b6:	d9f0      	bls.n	800139a <Reading_Voltage+0x34a>
	}
	SLAVEBMSFORWARD_CS_H();
 80013b8:	2201      	movs	r2, #1
 80013ba:	2110      	movs	r1, #16
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f006 f97c 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013c4:	2001      	movs	r0, #1
 80013c6:	f004 f851 	bl	800546c <HAL_Delay>


	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_CLRCELL);
 80013ca:	f240 7111 	movw	r1, #1809	; 0x711
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff fd39 	bl	8000e46 <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(2);
 80013d4:	2002      	movs	r0, #2
 80013d6:	f004 f849 	bl	800546c <HAL_Delay>
	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_ADCV | SLAVEBMS_CBD_MD_7K);
 80013da:	f44f 7158 	mov.w	r1, #864	; 0x360
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fd31 	bl	8000e46 <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(1);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f004 f841 	bl	800546c <HAL_Delay>
	SLAVEBMS_PollADCDone(SLAVEBMSACCESS_FWD, &ConversionResult);
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	4619      	mov	r1, r3
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fd90 	bl	8000f14 <SLAVEBMS_PollADCDone>
	if(ConversionResult == SLAVEBMSACCESS_CRC_MATCH)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 85e3 	bne.w	8001fc2 <Reading_Voltage+0xf72>
	{
			SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVA, 5, Data_Array);	//기존 코딩?��?�� ?��?�� ( 기존?�� CRC Mismatch ?��?��?��?�� CV?�� ???��?? ?���???????????????�??????????????? ?���??????????????? ?��?��)
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2205      	movs	r2, #5
 8001402:	2104      	movs	r1, #4
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fc4d 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>


			SLAVEBMSA.CV[0] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 800140a:	7a7b      	ldrb	r3, [r7, #9]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	7a3a      	ldrb	r2, [r7, #8]
 8001410:	4313      	orrs	r3, r2
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	ed9f 7adf 	vldr	s14, [pc, #892]	; 8001798 <Reading_Voltage+0x748>
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	4bde      	ldr	r3, [pc, #888]	; (800179c <Reading_Voltage+0x74c>)
 8001424:	edc3 7a00 	vstr	s15, [r3]
			SLAVEBMSA.CV[1] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8001428:	7afb      	ldrb	r3, [r7, #11]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	7aba      	ldrb	r2, [r7, #10]
 800142e:	4313      	orrs	r3, r2
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 8001798 <Reading_Voltage+0x748>
 800143c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001440:	4bd6      	ldr	r3, [pc, #856]	; (800179c <Reading_Voltage+0x74c>)
 8001442:	edc3 7a01 	vstr	s15, [r3, #4]
			SLAVEBMSA.CV[2] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8001446:	7b7b      	ldrb	r3, [r7, #13]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	7b3a      	ldrb	r2, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8001798 <Reading_Voltage+0x748>
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	4bcf      	ldr	r3, [pc, #828]	; (800179c <Reading_Voltage+0x74c>)
 8001460:	edc3 7a02 	vstr	s15, [r3, #8]

			SLAVEBMSB.CV[0] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8001464:	7c7b      	ldrb	r3, [r7, #17]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	7c3a      	ldrb	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001474:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8001798 <Reading_Voltage+0x748>
 8001478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147c:	4bc8      	ldr	r3, [pc, #800]	; (80017a0 <Reading_Voltage+0x750>)
 800147e:	edc3 7a00 	vstr	s15, [r3]
			SLAVEBMSB.CV[1] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8001482:	7cfb      	ldrb	r3, [r7, #19]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	7cba      	ldrb	r2, [r7, #18]
 8001488:	4313      	orrs	r3, r2
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8001798 <Reading_Voltage+0x748>
 8001496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149a:	4bc1      	ldr	r3, [pc, #772]	; (80017a0 <Reading_Voltage+0x750>)
 800149c:	edc3 7a01 	vstr	s15, [r3, #4]
			SLAVEBMSB.CV[2] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 80014a0:	7d7b      	ldrb	r3, [r7, #21]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	7d3a      	ldrb	r2, [r7, #20]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b0:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8001798 <Reading_Voltage+0x748>
 80014b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b8:	4bb9      	ldr	r3, [pc, #740]	; (80017a0 <Reading_Voltage+0x750>)
 80014ba:	edc3 7a02 	vstr	s15, [r3, #8]

			SLAVEBMSC.CV[0] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 80014be:	7e7b      	ldrb	r3, [r7, #25]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	7e3a      	ldrb	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001798 <Reading_Voltage+0x748>
 80014d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d6:	4bb3      	ldr	r3, [pc, #716]	; (80017a4 <Reading_Voltage+0x754>)
 80014d8:	edc3 7a00 	vstr	s15, [r3]
			SLAVEBMSC.CV[1] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 80014dc:	7efb      	ldrb	r3, [r7, #27]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	7eba      	ldrb	r2, [r7, #26]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ec:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001798 <Reading_Voltage+0x748>
 80014f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f4:	4bab      	ldr	r3, [pc, #684]	; (80017a4 <Reading_Voltage+0x754>)
 80014f6:	edc3 7a01 	vstr	s15, [r3, #4]
			SLAVEBMSC.CV[2] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80014fa:	7f7b      	ldrb	r3, [r7, #29]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	7f3a      	ldrb	r2, [r7, #28]
 8001500:	4313      	orrs	r3, r2
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001798 <Reading_Voltage+0x748>
 800150e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001512:	4ba4      	ldr	r3, [pc, #656]	; (80017a4 <Reading_Voltage+0x754>)
 8001514:	edc3 7a02 	vstr	s15, [r3, #8]

			SLAVEBMSD.CV[0] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8001518:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001522:	4313      	orrs	r3, r2
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001798 <Reading_Voltage+0x748>
 8001530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001534:	4b9c      	ldr	r3, [pc, #624]	; (80017a8 <Reading_Voltage+0x758>)
 8001536:	edc3 7a00 	vstr	s15, [r3]
			SLAVEBMSD.CV[1] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 800153a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001544:	4313      	orrs	r3, r2
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154e:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001798 <Reading_Voltage+0x748>
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	4b94      	ldr	r3, [pc, #592]	; (80017a8 <Reading_Voltage+0x758>)
 8001558:	edc3 7a01 	vstr	s15, [r3, #4]
			SLAVEBMSD.CV[2] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 800155c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001566:	4313      	orrs	r3, r2
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001798 <Reading_Voltage+0x748>
 8001574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001578:	4b8b      	ldr	r3, [pc, #556]	; (80017a8 <Reading_Voltage+0x758>)
 800157a:	edc3 7a02 	vstr	s15, [r3, #8]

			SLAVEBMSE.CV[0] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 800157e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001588:	4313      	orrs	r3, r2
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001592:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001798 <Reading_Voltage+0x748>
 8001596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159a:	4b84      	ldr	r3, [pc, #528]	; (80017ac <Reading_Voltage+0x75c>)
 800159c:	edc3 7a00 	vstr	s15, [r3]
			SLAVEBMSE.CV[1] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 80015a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80015aa:	4313      	orrs	r3, r2
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001798 <Reading_Voltage+0x748>
 80015b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015bc:	4b7b      	ldr	r3, [pc, #492]	; (80017ac <Reading_Voltage+0x75c>)
 80015be:	edc3 7a01 	vstr	s15, [r3, #4]
			SLAVEBMSE.CV[2] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 80015c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80015cc:	4313      	orrs	r3, r2
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001798 <Reading_Voltage+0x748>
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	4b73      	ldr	r3, [pc, #460]	; (80017ac <Reading_Voltage+0x75c>)
 80015e0:	edc3 7a02 	vstr	s15, [r3, #8]


			SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVB, 5, Data_Array);
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	2205      	movs	r2, #5
 80015ea:	2106      	movs	r1, #6
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff fb59 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>

			SLAVEBMSA.CV[3] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80015f2:	7a7b      	ldrb	r3, [r7, #9]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	7a3a      	ldrb	r2, [r7, #8]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001602:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001798 <Reading_Voltage+0x748>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	4b64      	ldr	r3, [pc, #400]	; (800179c <Reading_Voltage+0x74c>)
 800160c:	edc3 7a03 	vstr	s15, [r3, #12]
			SLAVEBMSA.CV[4] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8001610:	7afb      	ldrb	r3, [r7, #11]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	7aba      	ldrb	r2, [r7, #10]
 8001616:	4313      	orrs	r3, r2
 8001618:	ee07 3a90 	vmov	s15, r3
 800161c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001620:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001798 <Reading_Voltage+0x748>
 8001624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <Reading_Voltage+0x74c>)
 800162a:	edc3 7a04 	vstr	s15, [r3, #16]
			SLAVEBMSA.CV[5] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	7b3a      	ldrb	r2, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001798 <Reading_Voltage+0x748>
 8001642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001646:	4b55      	ldr	r3, [pc, #340]	; (800179c <Reading_Voltage+0x74c>)
 8001648:	edc3 7a05 	vstr	s15, [r3, #20]

			SLAVEBMSB.CV[3] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 800164c:	7c7b      	ldrb	r3, [r7, #17]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	7c3a      	ldrb	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001798 <Reading_Voltage+0x748>
 8001660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001664:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <Reading_Voltage+0x750>)
 8001666:	edc3 7a03 	vstr	s15, [r3, #12]
			SLAVEBMSB.CV[4] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 800166a:	7cfb      	ldrb	r3, [r7, #19]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	7cba      	ldrb	r2, [r7, #18]
 8001670:	4313      	orrs	r3, r2
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001798 <Reading_Voltage+0x748>
 800167e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001682:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <Reading_Voltage+0x750>)
 8001684:	edc3 7a04 	vstr	s15, [r3, #16]
			SLAVEBMSB.CV[5] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8001688:	7d7b      	ldrb	r3, [r7, #21]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	7d3a      	ldrb	r2, [r7, #20]
 800168e:	4313      	orrs	r3, r2
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001698:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001798 <Reading_Voltage+0x748>
 800169c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <Reading_Voltage+0x750>)
 80016a2:	edc3 7a05 	vstr	s15, [r3, #20]

			SLAVEBMSC.CV[3] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 80016a6:	7e7b      	ldrb	r3, [r7, #25]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	7e3a      	ldrb	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001798 <Reading_Voltage+0x748>
 80016ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016be:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <Reading_Voltage+0x754>)
 80016c0:	edc3 7a03 	vstr	s15, [r3, #12]
			SLAVEBMSC.CV[4] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 80016c4:	7efb      	ldrb	r3, [r7, #27]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	7eba      	ldrb	r2, [r7, #26]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001798 <Reading_Voltage+0x748>
 80016d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <Reading_Voltage+0x754>)
 80016de:	edc3 7a04 	vstr	s15, [r3, #16]
			SLAVEBMSC.CV[5] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80016e2:	7f7b      	ldrb	r3, [r7, #29]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	7f3a      	ldrb	r2, [r7, #28]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001798 <Reading_Voltage+0x748>
 80016f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <Reading_Voltage+0x754>)
 80016fc:	edc3 7a05 	vstr	s15, [r3, #20]

			SLAVEBMSD.CV[3] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8001700:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	f897 2020 	ldrb.w	r2, [r7, #32]
 800170a:	4313      	orrs	r3, r2
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001714:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001798 <Reading_Voltage+0x748>
 8001718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <Reading_Voltage+0x758>)
 800171e:	edc3 7a03 	vstr	s15, [r3, #12]
			SLAVEBMSD.CV[4] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 8001722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800172c:	4313      	orrs	r3, r2
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001736:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001798 <Reading_Voltage+0x748>
 800173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <Reading_Voltage+0x758>)
 8001740:	edc3 7a04 	vstr	s15, [r3, #16]
			SLAVEBMSD.CV[5] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8001744:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800174e:	4313      	orrs	r3, r2
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001758:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001798 <Reading_Voltage+0x748>
 800175c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <Reading_Voltage+0x758>)
 8001762:	edc3 7a05 	vstr	s15, [r3, #20]

			SLAVEBMSE.CV[3] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8001766:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001770:	4313      	orrs	r3, r2
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001798 <Reading_Voltage+0x748>
 800177e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <Reading_Voltage+0x75c>)
 8001784:	edc3 7a03 	vstr	s15, [r3, #12]
			SLAVEBMSE.CV[4] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8001788:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001792:	4313      	orrs	r3, r2
 8001794:	e00e      	b.n	80017b4 <Reading_Voltage+0x764>
 8001796:	bf00      	nop
 8001798:	38d1b717 	.word	0x38d1b717
 800179c:	20000a04 	.word	0x20000a04
 80017a0:	200004ec 	.word	0x200004ec
 80017a4:	200005e0 	.word	0x200005e0
 80017a8:	20000414 	.word	0x20000414
 80017ac:	20000180 	.word	0x20000180
 80017b0:	38d1b717 	.word	0x38d1b717
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017bc:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80017b0 <Reading_Voltage+0x760>
 80017c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c4:	4bdd      	ldr	r3, [pc, #884]	; (8001b3c <Reading_Voltage+0xaec>)
 80017c6:	edc3 7a04 	vstr	s15, [r3, #16]
			SLAVEBMSE.CV[5] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 80017ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80017d4:	4313      	orrs	r3, r2
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8001b50 <Reading_Voltage+0xb00>
 80017e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e6:	4bd5      	ldr	r3, [pc, #852]	; (8001b3c <Reading_Voltage+0xaec>)
 80017e8:	edc3 7a05 	vstr	s15, [r3, #20]


			SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVC, 5, Data_Array);
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	2205      	movs	r2, #5
 80017f2:	2108      	movs	r1, #8
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff fa55 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>

			SLAVEBMSA.CV[6] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80017fa:	7a7b      	ldrb	r3, [r7, #9]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	7a3a      	ldrb	r2, [r7, #8]
 8001800:	4313      	orrs	r3, r2
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180a:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8001b50 <Reading_Voltage+0xb00>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	4bcb      	ldr	r3, [pc, #812]	; (8001b40 <Reading_Voltage+0xaf0>)
 8001814:	edc3 7a06 	vstr	s15, [r3, #24]
			SLAVEBMSA.CV[7] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8001818:	7afb      	ldrb	r3, [r7, #11]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	7aba      	ldrb	r2, [r7, #10]
 800181e:	4313      	orrs	r3, r2
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001828:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8001b50 <Reading_Voltage+0xb00>
 800182c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001830:	4bc3      	ldr	r3, [pc, #780]	; (8001b40 <Reading_Voltage+0xaf0>)
 8001832:	edc3 7a07 	vstr	s15, [r3, #28]
			SLAVEBMSA.CV[8] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	7b3a      	ldrb	r2, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001846:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8001b50 <Reading_Voltage+0xb00>
 800184a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184e:	4bbc      	ldr	r3, [pc, #752]	; (8001b40 <Reading_Voltage+0xaf0>)
 8001850:	edc3 7a08 	vstr	s15, [r3, #32]

			SLAVEBMSB.CV[6] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8001854:	7c7b      	ldrb	r3, [r7, #17]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	7c3a      	ldrb	r2, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001864:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001b50 <Reading_Voltage+0xb00>
 8001868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186c:	4bb5      	ldr	r3, [pc, #724]	; (8001b44 <Reading_Voltage+0xaf4>)
 800186e:	edc3 7a06 	vstr	s15, [r3, #24]
			SLAVEBMSB.CV[7] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8001872:	7cfb      	ldrb	r3, [r7, #19]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	7cba      	ldrb	r2, [r7, #18]
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001b50 <Reading_Voltage+0xb00>
 8001886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188a:	4bae      	ldr	r3, [pc, #696]	; (8001b44 <Reading_Voltage+0xaf4>)
 800188c:	edc3 7a07 	vstr	s15, [r3, #28]
			SLAVEBMSB.CV[8] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8001890:	7d7b      	ldrb	r3, [r7, #21]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	7d3a      	ldrb	r2, [r7, #20]
 8001896:	4313      	orrs	r3, r2
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a0:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001b50 <Reading_Voltage+0xb00>
 80018a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a8:	4ba6      	ldr	r3, [pc, #664]	; (8001b44 <Reading_Voltage+0xaf4>)
 80018aa:	edc3 7a08 	vstr	s15, [r3, #32]

			SLAVEBMSC.CV[6] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 80018ae:	7e7b      	ldrb	r3, [r7, #25]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	7e3a      	ldrb	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018be:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001b50 <Reading_Voltage+0xb00>
 80018c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c6:	4ba0      	ldr	r3, [pc, #640]	; (8001b48 <Reading_Voltage+0xaf8>)
 80018c8:	edc3 7a06 	vstr	s15, [r3, #24]
			SLAVEBMSC.CV[7] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 80018cc:	7efb      	ldrb	r3, [r7, #27]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	7eba      	ldrb	r2, [r7, #26]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018dc:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001b50 <Reading_Voltage+0xb00>
 80018e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e4:	4b98      	ldr	r3, [pc, #608]	; (8001b48 <Reading_Voltage+0xaf8>)
 80018e6:	edc3 7a07 	vstr	s15, [r3, #28]
			SLAVEBMSC.CV[8] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80018ea:	7f7b      	ldrb	r3, [r7, #29]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	7f3a      	ldrb	r2, [r7, #28]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001b50 <Reading_Voltage+0xb00>
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	4b91      	ldr	r3, [pc, #580]	; (8001b48 <Reading_Voltage+0xaf8>)
 8001904:	edc3 7a08 	vstr	s15, [r3, #32]

			SLAVEBMSD.CV[6] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8001908:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001912:	4313      	orrs	r3, r2
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001b50 <Reading_Voltage+0xb00>
 8001920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001924:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <Reading_Voltage+0xafc>)
 8001926:	edc3 7a06 	vstr	s15, [r3, #24]
			SLAVEBMSD.CV[7] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 800192a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001934:	4313      	orrs	r3, r2
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001b50 <Reading_Voltage+0xb00>
 8001942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001946:	4b81      	ldr	r3, [pc, #516]	; (8001b4c <Reading_Voltage+0xafc>)
 8001948:	edc3 7a07 	vstr	s15, [r3, #28]
			SLAVEBMSD.CV[8] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 800194c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001956:	4313      	orrs	r3, r2
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001960:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001b50 <Reading_Voltage+0xb00>
 8001964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001968:	4b78      	ldr	r3, [pc, #480]	; (8001b4c <Reading_Voltage+0xafc>)
 800196a:	edc3 7a08 	vstr	s15, [r3, #32]

			SLAVEBMSE.CV[6] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 800196e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001978:	4313      	orrs	r3, r2
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001982:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001b50 <Reading_Voltage+0xb00>
 8001986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198a:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <Reading_Voltage+0xaec>)
 800198c:	edc3 7a06 	vstr	s15, [r3, #24]
			SLAVEBMSE.CV[7] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8001990:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800199a:	4313      	orrs	r3, r2
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001b50 <Reading_Voltage+0xb00>
 80019a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <Reading_Voltage+0xaec>)
 80019ae:	edc3 7a07 	vstr	s15, [r3, #28]
			SLAVEBMSE.CV[8] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 80019b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80019bc:	4313      	orrs	r3, r2
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001b50 <Reading_Voltage+0xb00>
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	4b5b      	ldr	r3, [pc, #364]	; (8001b3c <Reading_Voltage+0xaec>)
 80019d0:	edc3 7a08 	vstr	s15, [r3, #32]


			SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVD, 5, Data_Array);
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	2205      	movs	r2, #5
 80019da:	210a      	movs	r1, #10
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff f961 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>

			SLAVEBMSA.CV[9] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80019e2:	7a7b      	ldrb	r3, [r7, #9]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	7a3a      	ldrb	r2, [r7, #8]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001b50 <Reading_Voltage+0xb00>
 80019f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fa:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <Reading_Voltage+0xaf0>)
 80019fc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			SLAVEBMSA.CV[10] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8001a00:	7afb      	ldrb	r3, [r7, #11]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	7aba      	ldrb	r2, [r7, #10]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001b50 <Reading_Voltage+0xb00>
 8001a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a18:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <Reading_Voltage+0xaf0>)
 8001a1a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			SLAVEBMSA.CV[11] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8001a1e:	7b7b      	ldrb	r3, [r7, #13]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	7b3a      	ldrb	r2, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001b50 <Reading_Voltage+0xb00>
 8001a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a36:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <Reading_Voltage+0xaf0>)
 8001a38:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			SLAVEBMSB.CV[9] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8001a3c:	7c7b      	ldrb	r3, [r7, #17]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	7c3a      	ldrb	r2, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001b50 <Reading_Voltage+0xb00>
 8001a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <Reading_Voltage+0xaf4>)
 8001a56:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			SLAVEBMSB.CV[10] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8001a5a:	7cfb      	ldrb	r3, [r7, #19]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	7cba      	ldrb	r2, [r7, #18]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001b50 <Reading_Voltage+0xb00>
 8001a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <Reading_Voltage+0xaf4>)
 8001a74:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			SLAVEBMSB.CV[11] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8001a78:	7d7b      	ldrb	r3, [r7, #21]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	7d3a      	ldrb	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a88:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001b50 <Reading_Voltage+0xb00>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <Reading_Voltage+0xaf4>)
 8001a92:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			SLAVEBMSC.CV[9] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8001a96:	7e7b      	ldrb	r3, [r7, #25]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	7e3a      	ldrb	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b50 <Reading_Voltage+0xb00>
 8001aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aae:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <Reading_Voltage+0xaf8>)
 8001ab0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			SLAVEBMSC.CV[10] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 8001ab4:	7efb      	ldrb	r3, [r7, #27]
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	7eba      	ldrb	r2, [r7, #26]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001b50 <Reading_Voltage+0xb00>
 8001ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <Reading_Voltage+0xaf8>)
 8001ace:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			SLAVEBMSC.CV[11] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 8001ad2:	7f7b      	ldrb	r3, [r7, #29]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	7f3a      	ldrb	r2, [r7, #28]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	ee07 3a90 	vmov	s15, r3
 8001ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001b50 <Reading_Voltage+0xb00>
 8001ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <Reading_Voltage+0xaf8>)
 8001aec:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			SLAVEBMSD.CV[9] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8001af0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001b50 <Reading_Voltage+0xb00>
 8001b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <Reading_Voltage+0xafc>)
 8001b0e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			SLAVEBMSD.CV[10] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 8001b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b26:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001b50 <Reading_Voltage+0xb00>
 8001b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <Reading_Voltage+0xafc>)
 8001b30:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			SLAVEBMSD.CV[11] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8001b34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	e00b      	b.n	8001b54 <Reading_Voltage+0xb04>
 8001b3c:	20000180 	.word	0x20000180
 8001b40:	20000a04 	.word	0x20000a04
 8001b44:	200004ec 	.word	0x200004ec
 8001b48:	200005e0 	.word	0x200005e0
 8001b4c:	20000414 	.word	0x20000414
 8001b50:	38d1b717 	.word	0x38d1b717
 8001b54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b62:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8001b50 <Reading_Voltage+0xb00>
 8001b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6a:	4bde      	ldr	r3, [pc, #888]	; (8001ee4 <Reading_Voltage+0xe94>)
 8001b6c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			SLAVEBMSE.CV[9] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8001b70:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b84:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8001ef8 <Reading_Voltage+0xea8>
 8001b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8c:	4bd6      	ldr	r3, [pc, #856]	; (8001ee8 <Reading_Voltage+0xe98>)
 8001b8e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			SLAVEBMSE.CV[10] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8001b92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 8001ef8 <Reading_Voltage+0xea8>
 8001baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bae:	4bce      	ldr	r3, [pc, #824]	; (8001ee8 <Reading_Voltage+0xe98>)
 8001bb0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			SLAVEBMSE.CV[11] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8001bb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc8:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8001ef8 <Reading_Voltage+0xea8>
 8001bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd0:	4bc5      	ldr	r3, [pc, #788]	; (8001ee8 <Reading_Voltage+0xe98>)
 8001bd2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


			SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVE, 5, Data_Array);
 8001bd6:	f107 0308 	add.w	r3, r7, #8
 8001bda:	2205      	movs	r2, #5
 8001bdc:	2109      	movs	r1, #9
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff f860 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>

			SLAVEBMSA.CV[12] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8001be4:	7a7b      	ldrb	r3, [r7, #9]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	7a3a      	ldrb	r2, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf4:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8001ef8 <Reading_Voltage+0xea8>
 8001bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfc:	4bbb      	ldr	r3, [pc, #748]	; (8001eec <Reading_Voltage+0xe9c>)
 8001bfe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			SLAVEBMSA.CV[13] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	7aba      	ldrb	r2, [r7, #10]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8001ef8 <Reading_Voltage+0xea8>
 8001c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1a:	4bb4      	ldr	r3, [pc, #720]	; (8001eec <Reading_Voltage+0xe9c>)
 8001c1c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			SLAVEBMSA.CV[14] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	7b3a      	ldrb	r2, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c30:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001ef8 <Reading_Voltage+0xea8>
 8001c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c38:	4bac      	ldr	r3, [pc, #688]	; (8001eec <Reading_Voltage+0xe9c>)
 8001c3a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			SLAVEBMSB.CV[12] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8001c3e:	7c7b      	ldrb	r3, [r7, #17]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	7c3a      	ldrb	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001ef8 <Reading_Voltage+0xea8>
 8001c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c56:	4ba6      	ldr	r3, [pc, #664]	; (8001ef0 <Reading_Voltage+0xea0>)
 8001c58:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			SLAVEBMSB.CV[13] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8001c5c:	7cfb      	ldrb	r3, [r7, #19]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	7cba      	ldrb	r2, [r7, #18]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001ef8 <Reading_Voltage+0xea8>
 8001c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c74:	4b9e      	ldr	r3, [pc, #632]	; (8001ef0 <Reading_Voltage+0xea0>)
 8001c76:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			SLAVEBMSB.CV[14] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8001c7a:	7d7b      	ldrb	r3, [r7, #21]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	7d3a      	ldrb	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8a:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001ef8 <Reading_Voltage+0xea8>
 8001c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c92:	4b97      	ldr	r3, [pc, #604]	; (8001ef0 <Reading_Voltage+0xea0>)
 8001c94:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			SLAVEBMSC.CV[12] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8001c98:	7e7b      	ldrb	r3, [r7, #25]
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	7e3a      	ldrb	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca8:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001ef8 <Reading_Voltage+0xea8>
 8001cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb0:	4b90      	ldr	r3, [pc, #576]	; (8001ef4 <Reading_Voltage+0xea4>)
 8001cb2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			SLAVEBMSC.CV[13] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 8001cb6:	7efb      	ldrb	r3, [r7, #27]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	7eba      	ldrb	r2, [r7, #26]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001ef8 <Reading_Voltage+0xea8>
 8001cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cce:	4b89      	ldr	r3, [pc, #548]	; (8001ef4 <Reading_Voltage+0xea4>)
 8001cd0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			SLAVEBMSC.CV[14] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 8001cd4:	7f7b      	ldrb	r3, [r7, #29]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	7f3a      	ldrb	r2, [r7, #28]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001ef8 <Reading_Voltage+0xea8>
 8001ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cec:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <Reading_Voltage+0xea4>)
 8001cee:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			SLAVEBMSD.CV[12] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8001cf2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d06:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001ef8 <Reading_Voltage+0xea8>
 8001d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0e:	4b75      	ldr	r3, [pc, #468]	; (8001ee4 <Reading_Voltage+0xe94>)
 8001d10:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			SLAVEBMSD.CV[13] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 8001d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d28:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001ef8 <Reading_Voltage+0xea8>
 8001d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d30:	4b6c      	ldr	r3, [pc, #432]	; (8001ee4 <Reading_Voltage+0xe94>)
 8001d32:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			SLAVEBMSD.CV[14] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8001d36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d40:	4313      	orrs	r3, r2
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001ef8 <Reading_Voltage+0xea8>
 8001d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d52:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <Reading_Voltage+0xe94>)
 8001d54:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			SLAVEBMSE.CV[12] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8001d58:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d62:	4313      	orrs	r3, r2
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001ef8 <Reading_Voltage+0xea8>
 8001d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d74:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <Reading_Voltage+0xe98>)
 8001d76:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			SLAVEBMSE.CV[13] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8001d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001d84:	4313      	orrs	r3, r2
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001ef8 <Reading_Voltage+0xea8>
 8001d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d96:	4b54      	ldr	r3, [pc, #336]	; (8001ee8 <Reading_Voltage+0xe98>)
 8001d98:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			SLAVEBMSE.CV[14] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8001d9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001da6:	4313      	orrs	r3, r2
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001ef8 <Reading_Voltage+0xea8>
 8001db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db8:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <Reading_Voltage+0xe98>)
 8001dba:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVF, 5, Data_Array);
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	210b      	movs	r1, #11
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7fe ff6c 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>

			SLAVEBMSA.CV[15] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8001dcc:	7a7b      	ldrb	r3, [r7, #9]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	7a3a      	ldrb	r2, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ddc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001ef8 <Reading_Voltage+0xea8>
 8001de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de4:	4b41      	ldr	r3, [pc, #260]	; (8001eec <Reading_Voltage+0xe9c>)
 8001de6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			SLAVEBMSA.CV[16] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	7aba      	ldrb	r2, [r7, #10]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001ef8 <Reading_Voltage+0xea8>
 8001dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <Reading_Voltage+0xe9c>)
 8001e04:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			SLAVEBMSA.CV[17] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8001e08:	7b7b      	ldrb	r3, [r7, #13]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	7b3a      	ldrb	r2, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e18:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001ef8 <Reading_Voltage+0xea8>
 8001e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <Reading_Voltage+0xe9c>)
 8001e22:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			SLAVEBMSB.CV[15] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8001e26:	7c7b      	ldrb	r3, [r7, #17]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	7c3a      	ldrb	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e36:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001ef8 <Reading_Voltage+0xea8>
 8001e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <Reading_Voltage+0xea0>)
 8001e40:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			SLAVEBMSB.CV[16] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	7cba      	ldrb	r2, [r7, #18]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e54:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001ef8 <Reading_Voltage+0xea8>
 8001e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <Reading_Voltage+0xea0>)
 8001e5e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			SLAVEBMSB.CV[17] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8001e62:	7d7b      	ldrb	r3, [r7, #21]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	7d3a      	ldrb	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ef8 <Reading_Voltage+0xea8>
 8001e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <Reading_Voltage+0xea0>)
 8001e7c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			SLAVEBMSC.CV[15] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8001e80:	7e7b      	ldrb	r3, [r7, #25]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	7e3a      	ldrb	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e90:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ef8 <Reading_Voltage+0xea8>
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <Reading_Voltage+0xea4>)
 8001e9a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			SLAVEBMSC.CV[16] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 8001e9e:	7efb      	ldrb	r3, [r7, #27]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	7eba      	ldrb	r2, [r7, #26]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eae:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001ef8 <Reading_Voltage+0xea8>
 8001eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <Reading_Voltage+0xea4>)
 8001eb8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			SLAVEBMSC.CV[17] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 8001ebc:	7f7b      	ldrb	r3, [r7, #29]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	7f3a      	ldrb	r2, [r7, #28]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	ee07 3a90 	vmov	s15, r3
 8001ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ecc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001ef8 <Reading_Voltage+0xea8>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <Reading_Voltage+0xea4>)
 8001ed6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			SLAVEBMSD.CV[15] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8001eda:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	e00c      	b.n	8001efc <Reading_Voltage+0xeac>
 8001ee2:	bf00      	nop
 8001ee4:	20000414 	.word	0x20000414
 8001ee8:	20000180 	.word	0x20000180
 8001eec:	20000a04 	.word	0x20000a04
 8001ef0:	200004ec 	.word	0x200004ec
 8001ef4:	200005e0 	.word	0x200005e0
 8001ef8:	38d1b717 	.word	0x38d1b717
 8001efc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0a:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8001ef8 <Reading_Voltage+0xea8>
 8001f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f12:	4be1      	ldr	r3, [pc, #900]	; (8002298 <Reading_Voltage+0x1248>)
 8001f14:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			SLAVEBMSD.CV[16] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 8001f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001f22:	4313      	orrs	r3, r2
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2c:	ed9f 7adb 	vldr	s14, [pc, #876]	; 800229c <Reading_Voltage+0x124c>
 8001f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f34:	4bd8      	ldr	r3, [pc, #864]	; (8002298 <Reading_Voltage+0x1248>)
 8001f36:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			SLAVEBMSD.CV[17] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8001f3a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f44:	4313      	orrs	r3, r2
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4e:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 800229c <Reading_Voltage+0x124c>
 8001f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f56:	4bd0      	ldr	r3, [pc, #832]	; (8002298 <Reading_Voltage+0x1248>)
 8001f58:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			SLAVEBMSE.CV[15] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8001f5c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001f66:	4313      	orrs	r3, r2
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f70:	ed9f 7aca 	vldr	s14, [pc, #808]	; 800229c <Reading_Voltage+0x124c>
 8001f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f78:	4bc9      	ldr	r3, [pc, #804]	; (80022a0 <Reading_Voltage+0x1250>)
 8001f7a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			SLAVEBMSE.CV[16] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8001f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f92:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800229c <Reading_Voltage+0x124c>
 8001f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9a:	4bc1      	ldr	r3, [pc, #772]	; (80022a0 <Reading_Voltage+0x1250>)
 8001f9c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			SLAVEBMSE.CV[17] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8001fa0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001faa:	4313      	orrs	r3, r2
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb4:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800229c <Reading_Voltage+0x124c>
 8001fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbc:	4bb8      	ldr	r3, [pc, #736]	; (80022a0 <Reading_Voltage+0x1250>)
 8001fbe:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	}


	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_CLRAUX);
 8001fc2:	f240 7112 	movw	r1, #1810	; 0x712
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f7fe ff3d 	bl	8000e46 <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(2);
 8001fcc:	2002      	movs	r0, #2
 8001fce:	f003 fa4d 	bl	800546c <HAL_Delay>
	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_ADAX | SLAVEBMS_CBD_MD_7K);
 8001fd2:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7fe ff35 	bl	8000e46 <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(1);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f003 fa45 	bl	800546c <HAL_Delay>
	SLAVEBMS_PollADCDone(SLAVEBMSACCESS_FWD, &ConversionResult);
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7fe ff94 	bl	8000f14 <SLAVEBMS_PollADCDone>

	if(ConversionResult == SLAVEBMSACCESS_CRC_MATCH)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <Reading_Voltage+0xfb0>
		{
			SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDAUXA, 5, Data_Array);
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	2205      	movs	r2, #5
 8001ff8:	210c      	movs	r1, #12
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7fe fe52 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>
		}
		else
		{
		}
	SLAVEBMSA.GV[0] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8002000:	7a7b      	ldrb	r3, [r7, #9]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	7a3a      	ldrb	r2, [r7, #8]
 8002006:	4313      	orrs	r3, r2
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002010:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800229c <Reading_Voltage+0x124c>
 8002014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002018:	4ba2      	ldr	r3, [pc, #648]	; (80022a4 <Reading_Voltage+0x1254>)
 800201a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	SLAVEBMSA.GV[1] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	7aba      	ldrb	r2, [r7, #10]
 8002024:	4313      	orrs	r3, r2
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202e:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800229c <Reading_Voltage+0x124c>
 8002032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002036:	4b9b      	ldr	r3, [pc, #620]	; (80022a4 <Reading_Voltage+0x1254>)
 8002038:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	SLAVEBMSA.GV[2] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 800203c:	7b7b      	ldrb	r3, [r7, #13]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	7b3a      	ldrb	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800229c <Reading_Voltage+0x124c>
 8002050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002054:	4b93      	ldr	r3, [pc, #588]	; (80022a4 <Reading_Voltage+0x1254>)
 8002056:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	SLAVEBMSB.GV[0] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 800205a:	7c7b      	ldrb	r3, [r7, #17]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	7c3a      	ldrb	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800229c <Reading_Voltage+0x124c>
 800206e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002072:	4b8d      	ldr	r3, [pc, #564]	; (80022a8 <Reading_Voltage+0x1258>)
 8002074:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	SLAVEBMSB.GV[1] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	7cba      	ldrb	r2, [r7, #18]
 800207e:	4313      	orrs	r3, r2
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002088:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800229c <Reading_Voltage+0x124c>
 800208c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002090:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <Reading_Voltage+0x1258>)
 8002092:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	SLAVEBMSB.GV[2] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8002096:	7d7b      	ldrb	r3, [r7, #21]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	7d3a      	ldrb	r2, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800229c <Reading_Voltage+0x124c>
 80020aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ae:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <Reading_Voltage+0x1258>)
 80020b0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	SLAVEBMSC.GV[0] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 80020b4:	7e7b      	ldrb	r3, [r7, #25]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	7e3a      	ldrb	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800229c <Reading_Voltage+0x124c>
 80020c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020cc:	4b77      	ldr	r3, [pc, #476]	; (80022ac <Reading_Voltage+0x125c>)
 80020ce:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	SLAVEBMSC.GV[1] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 80020d2:	7efb      	ldrb	r3, [r7, #27]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	7eba      	ldrb	r2, [r7, #26]
 80020d8:	4313      	orrs	r3, r2
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800229c <Reading_Voltage+0x124c>
 80020e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <Reading_Voltage+0x125c>)
 80020ec:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	SLAVEBMSC.GV[2] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80020f0:	7f7b      	ldrb	r3, [r7, #29]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	7f3a      	ldrb	r2, [r7, #28]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002100:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800229c <Reading_Voltage+0x124c>
 8002104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002108:	4b68      	ldr	r3, [pc, #416]	; (80022ac <Reading_Voltage+0x125c>)
 800210a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	SLAVEBMSD.GV[0] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 800210e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002118:	4313      	orrs	r3, r2
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002122:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800229c <Reading_Voltage+0x124c>
 8002126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212a:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <Reading_Voltage+0x1248>)
 800212c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	SLAVEBMSD.GV[1] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 8002130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800213a:	4313      	orrs	r3, r2
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002144:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800229c <Reading_Voltage+0x124c>
 8002148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214c:	4b52      	ldr	r3, [pc, #328]	; (8002298 <Reading_Voltage+0x1248>)
 800214e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	SLAVEBMSD.GV[2] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8002152:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800215c:	4313      	orrs	r3, r2
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002166:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800229c <Reading_Voltage+0x124c>
 800216a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216e:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <Reading_Voltage+0x1248>)
 8002170:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	SLAVEBMSE.GV[0] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002174:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800217e:	4313      	orrs	r3, r2
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002188:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800229c <Reading_Voltage+0x124c>
 800218c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002190:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <Reading_Voltage+0x1250>)
 8002192:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	SLAVEBMSE.GV[1] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8002196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80021a0:	4313      	orrs	r3, r2
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021aa:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800229c <Reading_Voltage+0x124c>
 80021ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <Reading_Voltage+0x1250>)
 80021b4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	SLAVEBMSE.GV[2] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 80021b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80021c2:	4313      	orrs	r3, r2
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021cc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800229c <Reading_Voltage+0x124c>
 80021d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <Reading_Voltage+0x1250>)
 80021d6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50


	SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDAUXB, 5, Data_Array);
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2205      	movs	r2, #5
 80021e0:	210e      	movs	r1, #14
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe fd5e 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>

	SLAVEBMSA.GV[3] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80021e8:	7a7b      	ldrb	r3, [r7, #9]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	7a3a      	ldrb	r2, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800229c <Reading_Voltage+0x124c>
 80021fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <Reading_Voltage+0x1254>)
 8002202:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	SLAVEBMSA.GV[4] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8002206:	7afb      	ldrb	r3, [r7, #11]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	7aba      	ldrb	r2, [r7, #10]
 800220c:	4313      	orrs	r3, r2
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002216:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800229c <Reading_Voltage+0x124c>
 800221a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800221e:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <Reading_Voltage+0x1254>)
 8002220:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	SLAVEBMSA.REF = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8002224:	7b7b      	ldrb	r3, [r7, #13]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	7b3a      	ldrb	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002234:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800229c <Reading_Voltage+0x124c>
 8002238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <Reading_Voltage+0x1254>)
 800223e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	SLAVEBMSB.GV[3] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8002242:	7c7b      	ldrb	r3, [r7, #17]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	7c3a      	ldrb	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002252:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800229c <Reading_Voltage+0x124c>
 8002256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <Reading_Voltage+0x1258>)
 800225c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	SLAVEBMSB.GV[4] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	7cba      	ldrb	r2, [r7, #18]
 8002266:	4313      	orrs	r3, r2
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002270:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800229c <Reading_Voltage+0x124c>
 8002274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <Reading_Voltage+0x1258>)
 800227a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	SLAVEBMSB.REF = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 800227e:	7d7b      	ldrb	r3, [r7, #21]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	7d3a      	ldrb	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228e:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800229c <Reading_Voltage+0x124c>
 8002292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002296:	e00b      	b.n	80022b0 <Reading_Voltage+0x1260>
 8002298:	20000414 	.word	0x20000414
 800229c:	38d1b717 	.word	0x38d1b717
 80022a0:	20000180 	.word	0x20000180
 80022a4:	20000a04 	.word	0x20000a04
 80022a8:	200004ec 	.word	0x200004ec
 80022ac:	200005e0 	.word	0x200005e0
 80022b0:	4be0      	ldr	r3, [pc, #896]	; (8002634 <Reading_Voltage+0x15e4>)
 80022b2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	SLAVEBMSC.GV[3] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 80022b6:	7e7b      	ldrb	r3, [r7, #25]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	7e3a      	ldrb	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c6:	ed9f 7ae0 	vldr	s14, [pc, #896]	; 8002648 <Reading_Voltage+0x15f8>
 80022ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ce:	4bda      	ldr	r3, [pc, #872]	; (8002638 <Reading_Voltage+0x15e8>)
 80022d0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	SLAVEBMSC.GV[4] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 80022d4:	7efb      	ldrb	r3, [r7, #27]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	7eba      	ldrb	r2, [r7, #26]
 80022da:	4313      	orrs	r3, r2
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e4:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 8002648 <Reading_Voltage+0x15f8>
 80022e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ec:	4bd2      	ldr	r3, [pc, #840]	; (8002638 <Reading_Voltage+0x15e8>)
 80022ee:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	SLAVEBMSC.REF = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80022f2:	7f7b      	ldrb	r3, [r7, #29]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	7f3a      	ldrb	r2, [r7, #28]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002302:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8002648 <Reading_Voltage+0x15f8>
 8002306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230a:	4bcb      	ldr	r3, [pc, #812]	; (8002638 <Reading_Voltage+0x15e8>)
 800230c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	SLAVEBMSD.GV[3] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8002310:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	f897 2020 	ldrb.w	r2, [r7, #32]
 800231a:	4313      	orrs	r3, r2
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002324:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8002648 <Reading_Voltage+0x15f8>
 8002328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232c:	4bc3      	ldr	r3, [pc, #780]	; (800263c <Reading_Voltage+0x15ec>)
 800232e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	SLAVEBMSD.GV[4] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 8002332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800233c:	4313      	orrs	r3, r2
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002346:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8002648 <Reading_Voltage+0x15f8>
 800234a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234e:	4bbb      	ldr	r3, [pc, #748]	; (800263c <Reading_Voltage+0x15ec>)
 8002350:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	SLAVEBMSD.REF = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8002354:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800235e:	4313      	orrs	r3, r2
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002368:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002648 <Reading_Voltage+0x15f8>
 800236c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002370:	4bb2      	ldr	r3, [pc, #712]	; (800263c <Reading_Voltage+0x15ec>)
 8002372:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	SLAVEBMSE.GV[3] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002376:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002380:	4313      	orrs	r3, r2
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238a:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8002648 <Reading_Voltage+0x15f8>
 800238e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002392:	4bab      	ldr	r3, [pc, #684]	; (8002640 <Reading_Voltage+0x15f0>)
 8002394:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	SLAVEBMSE.GV[4] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8002398:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80023a2:	4313      	orrs	r3, r2
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ac:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002648 <Reading_Voltage+0x15f8>
 80023b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b4:	4ba2      	ldr	r3, [pc, #648]	; (8002640 <Reading_Voltage+0x15f0>)
 80023b6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	SLAVEBMSE.REF = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 80023ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80023c4:	4313      	orrs	r3, r2
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ce:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8002648 <Reading_Voltage+0x15f8>
 80023d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d6:	4b9a      	ldr	r3, [pc, #616]	; (8002640 <Reading_Voltage+0x15f0>)
 80023d8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c


	SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDAUXC, 5, Data_Array);
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	2205      	movs	r2, #5
 80023e2:	210d      	movs	r1, #13
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7fe fc5d 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>


	SLAVEBMSA.GV[5] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80023ea:	7a7b      	ldrb	r3, [r7, #9]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	7a3a      	ldrb	r2, [r7, #8]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fa:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002648 <Reading_Voltage+0x15f8>
 80023fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002402:	4b90      	ldr	r3, [pc, #576]	; (8002644 <Reading_Voltage+0x15f4>)
 8002404:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	SLAVEBMSA.GV[6] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8002408:	7afb      	ldrb	r3, [r7, #11]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	7aba      	ldrb	r2, [r7, #10]
 800240e:	4313      	orrs	r3, r2
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002418:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002648 <Reading_Voltage+0x15f8>
 800241c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002420:	4b88      	ldr	r3, [pc, #544]	; (8002644 <Reading_Voltage+0x15f4>)
 8002422:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	SLAVEBMSA.GV[7] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8002426:	7b7b      	ldrb	r3, [r7, #13]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	7b3a      	ldrb	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002436:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002648 <Reading_Voltage+0x15f8>
 800243a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243e:	4b81      	ldr	r3, [pc, #516]	; (8002644 <Reading_Voltage+0x15f4>)
 8002440:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	SLAVEBMSB.GV[5] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8002444:	7c7b      	ldrb	r3, [r7, #17]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	7c3a      	ldrb	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002454:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002648 <Reading_Voltage+0x15f8>
 8002458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800245c:	4b75      	ldr	r3, [pc, #468]	; (8002634 <Reading_Voltage+0x15e4>)
 800245e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	SLAVEBMSB.GV[6] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	7cba      	ldrb	r2, [r7, #18]
 8002468:	4313      	orrs	r3, r2
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002472:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002648 <Reading_Voltage+0x15f8>
 8002476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247a:	4b6e      	ldr	r3, [pc, #440]	; (8002634 <Reading_Voltage+0x15e4>)
 800247c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	SLAVEBMSB.GV[7] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8002480:	7d7b      	ldrb	r3, [r7, #21]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	7d3a      	ldrb	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002490:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002648 <Reading_Voltage+0x15f8>
 8002494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002498:	4b66      	ldr	r3, [pc, #408]	; (8002634 <Reading_Voltage+0x15e4>)
 800249a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	SLAVEBMSC.GV[5] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 800249e:	7e7b      	ldrb	r3, [r7, #25]
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	7e3a      	ldrb	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ae:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002648 <Reading_Voltage+0x15f8>
 80024b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b6:	4b60      	ldr	r3, [pc, #384]	; (8002638 <Reading_Voltage+0x15e8>)
 80024b8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	SLAVEBMSC.GV[6] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 80024bc:	7efb      	ldrb	r3, [r7, #27]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	7eba      	ldrb	r2, [r7, #26]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024cc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002648 <Reading_Voltage+0x15f8>
 80024d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d4:	4b58      	ldr	r3, [pc, #352]	; (8002638 <Reading_Voltage+0x15e8>)
 80024d6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	SLAVEBMSC.GV[7] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80024da:	7f7b      	ldrb	r3, [r7, #29]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	7f3a      	ldrb	r2, [r7, #28]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ea:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002648 <Reading_Voltage+0x15f8>
 80024ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f2:	4b51      	ldr	r3, [pc, #324]	; (8002638 <Reading_Voltage+0x15e8>)
 80024f4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	SLAVEBMSD.GV[5] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 80024f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002502:	4313      	orrs	r3, r2
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002648 <Reading_Voltage+0x15f8>
 8002510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002514:	4b49      	ldr	r3, [pc, #292]	; (800263c <Reading_Voltage+0x15ec>)
 8002516:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	SLAVEBMSD.GV[6] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 800251a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002524:	4313      	orrs	r3, r2
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002648 <Reading_Voltage+0x15f8>
 8002532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <Reading_Voltage+0x15ec>)
 8002538:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	SLAVEBMSD.GV[7] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 800253c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002546:	4313      	orrs	r3, r2
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002550:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002648 <Reading_Voltage+0x15f8>
 8002554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <Reading_Voltage+0x15ec>)
 800255a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	SLAVEBMSE.GV[5] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 800255e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002568:	4313      	orrs	r3, r2
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002572:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002648 <Reading_Voltage+0x15f8>
 8002576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <Reading_Voltage+0x15f0>)
 800257c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	SLAVEBMSE.GV[6] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8002580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800258a:	4313      	orrs	r3, r2
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002594:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002648 <Reading_Voltage+0x15f8>
 8002598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <Reading_Voltage+0x15f0>)
 800259e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	SLAVEBMSE.GV[7] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 80025a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80025ac:	4313      	orrs	r3, r2
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002648 <Reading_Voltage+0x15f8>
 80025ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <Reading_Voltage+0x15f0>)
 80025c0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64


	SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDAUXD, 5, Data_Array);
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	2205      	movs	r2, #5
 80025ca:	210f      	movs	r1, #15
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7fe fb69 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>


	SLAVEBMSA.GV[8] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80025d2:	7a7b      	ldrb	r3, [r7, #9]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	7a3a      	ldrb	r2, [r7, #8]
 80025d8:	4313      	orrs	r3, r2
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002648 <Reading_Voltage+0x15f8>
 80025e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <Reading_Voltage+0x15f4>)
 80025ec:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	SLAVEBMSB.GV[8] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 80025f0:	7c7b      	ldrb	r3, [r7, #17]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	7c3a      	ldrb	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002600:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002648 <Reading_Voltage+0x15f8>
 8002604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <Reading_Voltage+0x15e4>)
 800260a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	SLAVEBMSC.GV[8] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 800260e:	7e7b      	ldrb	r3, [r7, #25]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	7e3a      	ldrb	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800261e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002648 <Reading_Voltage+0x15f8>
 8002622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <Reading_Voltage+0x15e8>)
 8002628:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	SLAVEBMSD.GV[8] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 800262c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	e00b      	b.n	800264c <Reading_Voltage+0x15fc>
 8002634:	200004ec 	.word	0x200004ec
 8002638:	200005e0 	.word	0x200005e0
 800263c:	20000414 	.word	0x20000414
 8002640:	20000180 	.word	0x20000180
 8002644:	20000a04 	.word	0x20000a04
 8002648:	38d1b717 	.word	0x38d1b717
 800264c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002650:	4313      	orrs	r3, r2
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265a:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002648 <Reading_Voltage+0x15f8>
 800265e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002662:	4bd1      	ldr	r3, [pc, #836]	; (80029a8 <Reading_Voltage+0x1958>)
 8002664:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	SLAVEBMSE.GV[8] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002668:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002672:	4313      	orrs	r3, r2
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267c:	ed9f 7acb 	vldr	s14, [pc, #812]	; 80029ac <Reading_Voltage+0x195c>
 8002680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002684:	4bca      	ldr	r3, [pc, #808]	; (80029b0 <Reading_Voltage+0x1960>)
 8002686:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68



	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_CLRSTAT);
 800268a:	f240 7113 	movw	r1, #1811	; 0x713
 800268e:	2001      	movs	r0, #1
 8002690:	f7fe fbd9 	bl	8000e46 <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(2);
 8002694:	2002      	movs	r0, #2
 8002696:	f002 fee9 	bl	800546c <HAL_Delay>
	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_ADSTAT | SLAVEBMS_CBD_MD_7K);
 800269a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800269e:	2001      	movs	r0, #1
 80026a0:	f7fe fbd1 	bl	8000e46 <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(1);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f002 fee1 	bl	800546c <HAL_Delay>
	SLAVEBMS_PollADCDone(SLAVEBMSACCESS_FWD, &ConversionResult);
 80026aa:	1dfb      	adds	r3, r7, #7
 80026ac:	4619      	mov	r1, r3
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7fe fc30 	bl	8000f14 <SLAVEBMS_PollADCDone>
		if(ConversionResult == SLAVEBMSACCESS_CRC_MATCH)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <Reading_Voltage+0x1678>
		{
			SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDSTATA, 5, Data_Array);
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	2205      	movs	r2, #5
 80026c0:	2110      	movs	r1, #16
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7fe faee 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>
		}
		else
		{
		}

	SLAVEBMSA.SC = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.003);
 80026c8:	7a7b      	ldrb	r3, [r7, #9]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	7a3a      	ldrb	r2, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d8:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80029b4 <Reading_Voltage+0x1964>
 80026dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e0:	4bb5      	ldr	r3, [pc, #724]	; (80029b8 <Reading_Voltage+0x1968>)
 80026e2:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	SLAVEBMSA.ITMP = ((float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 80026e6:	7afb      	ldrb	r3, [r7, #11]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	7aba      	ldrb	r2, [r7, #10]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f6:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80029ac <Reading_Voltage+0x195c>
 80026fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026fe:	eddf 6aaf 	vldr	s13, [pc, #700]	; 80029bc <Reading_Voltage+0x196c>
 8002702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002706:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80029c0 <Reading_Voltage+0x1970>
 800270a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800270e:	4baa      	ldr	r3, [pc, #680]	; (80029b8 <Reading_Voltage+0x1968>)
 8002710:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	SLAVEBMSA.VA = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8002714:	7b7b      	ldrb	r3, [r7, #13]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	7b3a      	ldrb	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002724:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80029ac <Reading_Voltage+0x195c>
 8002728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272c:	4ba2      	ldr	r3, [pc, #648]	; (80029b8 <Reading_Voltage+0x1968>)
 800272e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	SLAVEBMSB.SC = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.003);
 8002732:	7c7b      	ldrb	r3, [r7, #17]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	7c3a      	ldrb	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002742:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80029b4 <Reading_Voltage+0x1964>
 8002746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274a:	4b9e      	ldr	r3, [pc, #632]	; (80029c4 <Reading_Voltage+0x1974>)
 800274c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	SLAVEBMSB.ITMP = ((float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	7cba      	ldrb	r2, [r7, #18]
 8002756:	4313      	orrs	r3, r2
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002760:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80029ac <Reading_Voltage+0x195c>
 8002764:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002768:	eddf 6a94 	vldr	s13, [pc, #592]	; 80029bc <Reading_Voltage+0x196c>
 800276c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002770:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80029c0 <Reading_Voltage+0x1970>
 8002774:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002778:	4b92      	ldr	r3, [pc, #584]	; (80029c4 <Reading_Voltage+0x1974>)
 800277a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	SLAVEBMSB.VA = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 800277e:	7d7b      	ldrb	r3, [r7, #21]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	7d3a      	ldrb	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278e:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80029ac <Reading_Voltage+0x195c>
 8002792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002796:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <Reading_Voltage+0x1974>)
 8002798:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	SLAVEBMSC.SC = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.003);
 800279c:	7e7b      	ldrb	r3, [r7, #25]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	7e3a      	ldrb	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ac:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80029b4 <Reading_Voltage+0x1964>
 80027b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b4:	4b84      	ldr	r3, [pc, #528]	; (80029c8 <Reading_Voltage+0x1978>)
 80027b6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	SLAVEBMSC.ITMP = ((float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 80027ba:	7efb      	ldrb	r3, [r7, #27]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	7eba      	ldrb	r2, [r7, #26]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ca:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80029ac <Reading_Voltage+0x195c>
 80027ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027d2:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80029bc <Reading_Voltage+0x196c>
 80027d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027da:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80029c0 <Reading_Voltage+0x1970>
 80027de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027e2:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <Reading_Voltage+0x1978>)
 80027e4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	SLAVEBMSC.VA = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80027e8:	7f7b      	ldrb	r3, [r7, #29]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	7f3a      	ldrb	r2, [r7, #28]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80029ac <Reading_Voltage+0x195c>
 80027fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002800:	4b71      	ldr	r3, [pc, #452]	; (80029c8 <Reading_Voltage+0x1978>)
 8002802:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	SLAVEBMSD.SC = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.003);
 8002806:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002810:	4313      	orrs	r3, r2
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80029b4 <Reading_Voltage+0x1964>
 800281e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002822:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <Reading_Voltage+0x1958>)
 8002824:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	SLAVEBMSD.ITMP = ((float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 8002828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002832:	4313      	orrs	r3, r2
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80029ac <Reading_Voltage+0x195c>
 8002840:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002844:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80029bc <Reading_Voltage+0x196c>
 8002848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800284c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80029c0 <Reading_Voltage+0x1970>
 8002850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002854:	4b54      	ldr	r3, [pc, #336]	; (80029a8 <Reading_Voltage+0x1958>)
 8002856:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	SLAVEBMSD.VA = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 800285a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002864:	4313      	orrs	r3, r2
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80029ac <Reading_Voltage+0x195c>
 8002872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002876:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <Reading_Voltage+0x1958>)
 8002878:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	SLAVEBMSE.SC = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.003);
 800287c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002886:	4313      	orrs	r3, r2
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002890:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80029b4 <Reading_Voltage+0x1964>
 8002894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002898:	4b45      	ldr	r3, [pc, #276]	; (80029b0 <Reading_Voltage+0x1960>)
 800289a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	SLAVEBMSE.ITMP = ((float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 800289e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80028a8:	4313      	orrs	r3, r2
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80029ac <Reading_Voltage+0x195c>
 80028b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028ba:	eddf 6a40 	vldr	s13, [pc, #256]	; 80029bc <Reading_Voltage+0x196c>
 80028be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80029c0 <Reading_Voltage+0x1970>
 80028c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <Reading_Voltage+0x1960>)
 80028cc:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	SLAVEBMSE.VA = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 80028d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80028da:	4313      	orrs	r3, r2
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80029ac <Reading_Voltage+0x195c>
 80028e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ec:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <Reading_Voltage+0x1960>)
 80028ee:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78


	SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDSTATB, 5, Data_Array);
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	2205      	movs	r2, #5
 80028f8:	2112      	movs	r1, #18
 80028fa:	2001      	movs	r0, #1
 80028fc:	f7fe f9d2 	bl	8000ca4 <SLAVEBMS_ReadDataGroup>

	SLAVEBMSA.VD = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8002900:	7a7b      	ldrb	r3, [r7, #9]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	7a3a      	ldrb	r2, [r7, #8]
 8002906:	4313      	orrs	r3, r2
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002910:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80029ac <Reading_Voltage+0x195c>
 8002914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <Reading_Voltage+0x1968>)
 800291a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	SLAVEBMSB.VD = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 800291e:	7c7b      	ldrb	r3, [r7, #17]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	7c3a      	ldrb	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80029ac <Reading_Voltage+0x195c>
 8002932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002936:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <Reading_Voltage+0x1974>)
 8002938:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	SLAVEBMSC.VD = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 800293c:	7e7b      	ldrb	r3, [r7, #25]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	7e3a      	ldrb	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80029ac <Reading_Voltage+0x195c>
 8002950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002954:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <Reading_Voltage+0x1978>)
 8002956:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	SLAVEBMSD.VD = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 800295a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002964:	4313      	orrs	r3, r2
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80029ac <Reading_Voltage+0x195c>
 8002972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <Reading_Voltage+0x1958>)
 8002978:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	SLAVEBMSE.VD = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 800297c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002986:	4313      	orrs	r3, r2
 8002988:	ee07 3a90 	vmov	s15, r3
 800298c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002990:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80029ac <Reading_Voltage+0x195c>
 8002994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <Reading_Voltage+0x1960>)
 800299a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c


}
 800299e:	bf00      	nop
 80029a0:	3738      	adds	r7, #56	; 0x38
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000414 	.word	0x20000414
 80029ac:	38d1b717 	.word	0x38d1b717
 80029b0:	20000180 	.word	0x20000180
 80029b4:	3b449ba6 	.word	0x3b449ba6
 80029b8:	20000a04 	.word	0x20000a04
 80029bc:	3bf9096c 	.word	0x3bf9096c
 80029c0:	438a0000 	.word	0x438a0000
 80029c4:	200004ec 	.word	0x200004ec
 80029c8:	200005e0 	.word	0x200005e0

080029cc <Save_voltage>:


void Save_voltage()
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
	  C101 = SLAVEBMSA.CV[0];
 80029d0:	4b7f      	ldr	r3, [pc, #508]	; (8002bd0 <Save_voltage+0x204>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a7f      	ldr	r2, [pc, #508]	; (8002bd4 <Save_voltage+0x208>)
 80029d6:	6013      	str	r3, [r2, #0]
	  C102 = SLAVEBMSA.CV[1];
 80029d8:	4b7d      	ldr	r3, [pc, #500]	; (8002bd0 <Save_voltage+0x204>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a7e      	ldr	r2, [pc, #504]	; (8002bd8 <Save_voltage+0x20c>)
 80029de:	6013      	str	r3, [r2, #0]
	  C103 = SLAVEBMSA.CV[2];
 80029e0:	4b7b      	ldr	r3, [pc, #492]	; (8002bd0 <Save_voltage+0x204>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a7d      	ldr	r2, [pc, #500]	; (8002bdc <Save_voltage+0x210>)
 80029e6:	6013      	str	r3, [r2, #0]
	  C104 = SLAVEBMSA.CV[3];
 80029e8:	4b79      	ldr	r3, [pc, #484]	; (8002bd0 <Save_voltage+0x204>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a7c      	ldr	r2, [pc, #496]	; (8002be0 <Save_voltage+0x214>)
 80029ee:	6013      	str	r3, [r2, #0]
	  C105 = SLAVEBMSA.CV[4];
 80029f0:	4b77      	ldr	r3, [pc, #476]	; (8002bd0 <Save_voltage+0x204>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	4a7b      	ldr	r2, [pc, #492]	; (8002be4 <Save_voltage+0x218>)
 80029f6:	6013      	str	r3, [r2, #0]
	  C106 = SLAVEBMSA.CV[5];
 80029f8:	4b75      	ldr	r3, [pc, #468]	; (8002bd0 <Save_voltage+0x204>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4a7a      	ldr	r2, [pc, #488]	; (8002be8 <Save_voltage+0x21c>)
 80029fe:	6013      	str	r3, [r2, #0]
	  C107 = SLAVEBMSA.CV[6];
 8002a00:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <Save_voltage+0x204>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a79      	ldr	r2, [pc, #484]	; (8002bec <Save_voltage+0x220>)
 8002a06:	6013      	str	r3, [r2, #0]
	  C108 = SLAVEBMSA.CV[7];
 8002a08:	4b71      	ldr	r3, [pc, #452]	; (8002bd0 <Save_voltage+0x204>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	4a78      	ldr	r2, [pc, #480]	; (8002bf0 <Save_voltage+0x224>)
 8002a0e:	6013      	str	r3, [r2, #0]
	  C109 = SLAVEBMSA.CV[8];
 8002a10:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <Save_voltage+0x204>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a77      	ldr	r2, [pc, #476]	; (8002bf4 <Save_voltage+0x228>)
 8002a16:	6013      	str	r3, [r2, #0]
	  C110 = SLAVEBMSA.CV[9];
 8002a18:	4b6d      	ldr	r3, [pc, #436]	; (8002bd0 <Save_voltage+0x204>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	4a76      	ldr	r2, [pc, #472]	; (8002bf8 <Save_voltage+0x22c>)
 8002a1e:	6013      	str	r3, [r2, #0]
	  C111 = SLAVEBMSA.CV[10];
 8002a20:	4b6b      	ldr	r3, [pc, #428]	; (8002bd0 <Save_voltage+0x204>)
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	4a75      	ldr	r2, [pc, #468]	; (8002bfc <Save_voltage+0x230>)
 8002a26:	6013      	str	r3, [r2, #0]
	  C112 = SLAVEBMSA.CV[11];
 8002a28:	4b69      	ldr	r3, [pc, #420]	; (8002bd0 <Save_voltage+0x204>)
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4a74      	ldr	r2, [pc, #464]	; (8002c00 <Save_voltage+0x234>)
 8002a2e:	6013      	str	r3, [r2, #0]
	  C113 = SLAVEBMSA.CV[12];
 8002a30:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <Save_voltage+0x204>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	4a73      	ldr	r2, [pc, #460]	; (8002c04 <Save_voltage+0x238>)
 8002a36:	6013      	str	r3, [r2, #0]
	  C114 = SLAVEBMSA.CV[13];
 8002a38:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <Save_voltage+0x204>)
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3c:	4a72      	ldr	r2, [pc, #456]	; (8002c08 <Save_voltage+0x23c>)
 8002a3e:	6013      	str	r3, [r2, #0]
	  C201 = SLAVEBMSB.CV[0];
 8002a40:	4b72      	ldr	r3, [pc, #456]	; (8002c0c <Save_voltage+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a72      	ldr	r2, [pc, #456]	; (8002c10 <Save_voltage+0x244>)
 8002a46:	6013      	str	r3, [r2, #0]
	  C202 = SLAVEBMSB.CV[1];
 8002a48:	4b70      	ldr	r3, [pc, #448]	; (8002c0c <Save_voltage+0x240>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a71      	ldr	r2, [pc, #452]	; (8002c14 <Save_voltage+0x248>)
 8002a4e:	6013      	str	r3, [r2, #0]
	  C203 = SLAVEBMSB.CV[2];
 8002a50:	4b6e      	ldr	r3, [pc, #440]	; (8002c0c <Save_voltage+0x240>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a70      	ldr	r2, [pc, #448]	; (8002c18 <Save_voltage+0x24c>)
 8002a56:	6013      	str	r3, [r2, #0]
	  C204 = SLAVEBMSB.CV[3];
 8002a58:	4b6c      	ldr	r3, [pc, #432]	; (8002c0c <Save_voltage+0x240>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a6f      	ldr	r2, [pc, #444]	; (8002c1c <Save_voltage+0x250>)
 8002a5e:	6013      	str	r3, [r2, #0]
	  C205 = SLAVEBMSB.CV[4];
 8002a60:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <Save_voltage+0x240>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	4a6e      	ldr	r2, [pc, #440]	; (8002c20 <Save_voltage+0x254>)
 8002a66:	6013      	str	r3, [r2, #0]
	  C206 = SLAVEBMSB.CV[5];
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <Save_voltage+0x240>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4a6d      	ldr	r2, [pc, #436]	; (8002c24 <Save_voltage+0x258>)
 8002a6e:	6013      	str	r3, [r2, #0]
	  C207 = SLAVEBMSB.CV[6];
 8002a70:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <Save_voltage+0x240>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a6c      	ldr	r2, [pc, #432]	; (8002c28 <Save_voltage+0x25c>)
 8002a76:	6013      	str	r3, [r2, #0]
	  C208 = SLAVEBMSB.CV[7];
 8002a78:	4b64      	ldr	r3, [pc, #400]	; (8002c0c <Save_voltage+0x240>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a6b      	ldr	r2, [pc, #428]	; (8002c2c <Save_voltage+0x260>)
 8002a7e:	6013      	str	r3, [r2, #0]
	  C209 = SLAVEBMSB.CV[8];
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <Save_voltage+0x240>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4a6a      	ldr	r2, [pc, #424]	; (8002c30 <Save_voltage+0x264>)
 8002a86:	6013      	str	r3, [r2, #0]
	  C210 = SLAVEBMSB.CV[9];
 8002a88:	4b60      	ldr	r3, [pc, #384]	; (8002c0c <Save_voltage+0x240>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	4a69      	ldr	r2, [pc, #420]	; (8002c34 <Save_voltage+0x268>)
 8002a8e:	6013      	str	r3, [r2, #0]
	  C211 = SLAVEBMSB.CV[10];
 8002a90:	4b5e      	ldr	r3, [pc, #376]	; (8002c0c <Save_voltage+0x240>)
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	4a68      	ldr	r2, [pc, #416]	; (8002c38 <Save_voltage+0x26c>)
 8002a96:	6013      	str	r3, [r2, #0]
	  C212 = SLAVEBMSB.CV[11];
 8002a98:	4b5c      	ldr	r3, [pc, #368]	; (8002c0c <Save_voltage+0x240>)
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	4a67      	ldr	r2, [pc, #412]	; (8002c3c <Save_voltage+0x270>)
 8002a9e:	6013      	str	r3, [r2, #0]
	  C213 = SLAVEBMSB.CV[12];
 8002aa0:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <Save_voltage+0x240>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	4a66      	ldr	r2, [pc, #408]	; (8002c40 <Save_voltage+0x274>)
 8002aa6:	6013      	str	r3, [r2, #0]
	  C214 = SLAVEBMSB.CV[13];
 8002aa8:	4b58      	ldr	r3, [pc, #352]	; (8002c0c <Save_voltage+0x240>)
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <Save_voltage+0x278>)
 8002aae:	6013      	str	r3, [r2, #0]
	  C301 = SLAVEBMSC.CV[0];
 8002ab0:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <Save_voltage+0x27c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a65      	ldr	r2, [pc, #404]	; (8002c4c <Save_voltage+0x280>)
 8002ab6:	6013      	str	r3, [r2, #0]
	  C302 = SLAVEBMSC.CV[1];
 8002ab8:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <Save_voltage+0x27c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a64      	ldr	r2, [pc, #400]	; (8002c50 <Save_voltage+0x284>)
 8002abe:	6013      	str	r3, [r2, #0]
	  C303 = SLAVEBMSC.CV[2];
 8002ac0:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <Save_voltage+0x27c>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a63      	ldr	r2, [pc, #396]	; (8002c54 <Save_voltage+0x288>)
 8002ac6:	6013      	str	r3, [r2, #0]
	  C304 = SLAVEBMSC.CV[3];
 8002ac8:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <Save_voltage+0x27c>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a62      	ldr	r2, [pc, #392]	; (8002c58 <Save_voltage+0x28c>)
 8002ace:	6013      	str	r3, [r2, #0]
	  C305 = SLAVEBMSC.CV[4];
 8002ad0:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <Save_voltage+0x27c>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	4a61      	ldr	r2, [pc, #388]	; (8002c5c <Save_voltage+0x290>)
 8002ad6:	6013      	str	r3, [r2, #0]
	  C306 = SLAVEBMSC.CV[5];
 8002ad8:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <Save_voltage+0x27c>)
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	4a60      	ldr	r2, [pc, #384]	; (8002c60 <Save_voltage+0x294>)
 8002ade:	6013      	str	r3, [r2, #0]
	  C307 = SLAVEBMSC.CV[6];
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <Save_voltage+0x27c>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a5f      	ldr	r2, [pc, #380]	; (8002c64 <Save_voltage+0x298>)
 8002ae6:	6013      	str	r3, [r2, #0]
	  C308 = SLAVEBMSC.CV[7];
 8002ae8:	4b57      	ldr	r3, [pc, #348]	; (8002c48 <Save_voltage+0x27c>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4a5e      	ldr	r2, [pc, #376]	; (8002c68 <Save_voltage+0x29c>)
 8002aee:	6013      	str	r3, [r2, #0]
	  C309 = SLAVEBMSC.CV[8];
 8002af0:	4b55      	ldr	r3, [pc, #340]	; (8002c48 <Save_voltage+0x27c>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a5d      	ldr	r2, [pc, #372]	; (8002c6c <Save_voltage+0x2a0>)
 8002af6:	6013      	str	r3, [r2, #0]
	  C310 = SLAVEBMSC.CV[9];
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <Save_voltage+0x27c>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	4a5c      	ldr	r2, [pc, #368]	; (8002c70 <Save_voltage+0x2a4>)
 8002afe:	6013      	str	r3, [r2, #0]
	  C311 = SLAVEBMSC.CV[10];
 8002b00:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <Save_voltage+0x27c>)
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	4a5b      	ldr	r2, [pc, #364]	; (8002c74 <Save_voltage+0x2a8>)
 8002b06:	6013      	str	r3, [r2, #0]
	  C312 = SLAVEBMSC.CV[11];
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <Save_voltage+0x27c>)
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	4a5a      	ldr	r2, [pc, #360]	; (8002c78 <Save_voltage+0x2ac>)
 8002b0e:	6013      	str	r3, [r2, #0]
	  C313 = SLAVEBMSC.CV[12];
 8002b10:	4b4d      	ldr	r3, [pc, #308]	; (8002c48 <Save_voltage+0x27c>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a59      	ldr	r2, [pc, #356]	; (8002c7c <Save_voltage+0x2b0>)
 8002b16:	6013      	str	r3, [r2, #0]
	  C314 = SLAVEBMSC.CV[13];
 8002b18:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <Save_voltage+0x27c>)
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <Save_voltage+0x2b4>)
 8002b1e:	6013      	str	r3, [r2, #0]
	  C401 = SLAVEBMSD.CV[0];
 8002b20:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <Save_voltage+0x2b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <Save_voltage+0x2bc>)
 8002b26:	6013      	str	r3, [r2, #0]
	  C402 = SLAVEBMSD.CV[1];
 8002b28:	4b56      	ldr	r3, [pc, #344]	; (8002c84 <Save_voltage+0x2b8>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a57      	ldr	r2, [pc, #348]	; (8002c8c <Save_voltage+0x2c0>)
 8002b2e:	6013      	str	r3, [r2, #0]
	  C403 = SLAVEBMSD.CV[2];
 8002b30:	4b54      	ldr	r3, [pc, #336]	; (8002c84 <Save_voltage+0x2b8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a56      	ldr	r2, [pc, #344]	; (8002c90 <Save_voltage+0x2c4>)
 8002b36:	6013      	str	r3, [r2, #0]
	  C404 = SLAVEBMSD.CV[3];
 8002b38:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <Save_voltage+0x2b8>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a55      	ldr	r2, [pc, #340]	; (8002c94 <Save_voltage+0x2c8>)
 8002b3e:	6013      	str	r3, [r2, #0]
	  C405 = SLAVEBMSD.CV[4];
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <Save_voltage+0x2b8>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	4a54      	ldr	r2, [pc, #336]	; (8002c98 <Save_voltage+0x2cc>)
 8002b46:	6013      	str	r3, [r2, #0]
	  C406 = SLAVEBMSD.CV[5];
 8002b48:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <Save_voltage+0x2b8>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	4a53      	ldr	r2, [pc, #332]	; (8002c9c <Save_voltage+0x2d0>)
 8002b4e:	6013      	str	r3, [r2, #0]
	  C407 = SLAVEBMSD.CV[6];
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <Save_voltage+0x2b8>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <Save_voltage+0x2d4>)
 8002b56:	6013      	str	r3, [r2, #0]
	  C408 = SLAVEBMSD.CV[7];
 8002b58:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <Save_voltage+0x2b8>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <Save_voltage+0x2d8>)
 8002b5e:	6013      	str	r3, [r2, #0]
	  C409 = SLAVEBMSD.CV[8];
 8002b60:	4b48      	ldr	r3, [pc, #288]	; (8002c84 <Save_voltage+0x2b8>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a50      	ldr	r2, [pc, #320]	; (8002ca8 <Save_voltage+0x2dc>)
 8002b66:	6013      	str	r3, [r2, #0]
	  C410 = SLAVEBMSD.CV[9];
 8002b68:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <Save_voltage+0x2b8>)
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	; (8002cac <Save_voltage+0x2e0>)
 8002b6e:	6013      	str	r3, [r2, #0]
	  C411 = SLAVEBMSD.CV[10];
 8002b70:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <Save_voltage+0x2b8>)
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <Save_voltage+0x2e4>)
 8002b76:	6013      	str	r3, [r2, #0]
	  C412 = SLAVEBMSD.CV[11];
 8002b78:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <Save_voltage+0x2b8>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <Save_voltage+0x2e8>)
 8002b7e:	6013      	str	r3, [r2, #0]
	  C413 = SLAVEBMSD.CV[12];
 8002b80:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <Save_voltage+0x2b8>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <Save_voltage+0x2ec>)
 8002b86:	6013      	str	r3, [r2, #0]
	  C414 = SLAVEBMSD.CV[13];
 8002b88:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <Save_voltage+0x2b8>)
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <Save_voltage+0x2f0>)
 8002b8e:	6013      	str	r3, [r2, #0]
	  C501 = SLAVEBMSE.CV[0];
 8002b90:	4b4b      	ldr	r3, [pc, #300]	; (8002cc0 <Save_voltage+0x2f4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <Save_voltage+0x2f8>)
 8002b96:	6013      	str	r3, [r2, #0]
	  C502 = SLAVEBMSE.CV[1];
 8002b98:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <Save_voltage+0x2f4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a4a      	ldr	r2, [pc, #296]	; (8002cc8 <Save_voltage+0x2fc>)
 8002b9e:	6013      	str	r3, [r2, #0]
	  C503 = SLAVEBMSE.CV[2];
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <Save_voltage+0x2f4>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a49      	ldr	r2, [pc, #292]	; (8002ccc <Save_voltage+0x300>)
 8002ba6:	6013      	str	r3, [r2, #0]
	  C504 = SLAVEBMSE.CV[3];
 8002ba8:	4b45      	ldr	r3, [pc, #276]	; (8002cc0 <Save_voltage+0x2f4>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a48      	ldr	r2, [pc, #288]	; (8002cd0 <Save_voltage+0x304>)
 8002bae:	6013      	str	r3, [r2, #0]
	  C505 = SLAVEBMSE.CV[4];
 8002bb0:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <Save_voltage+0x2f4>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <Save_voltage+0x308>)
 8002bb6:	6013      	str	r3, [r2, #0]
	  C506 = SLAVEBMSE.CV[5];
 8002bb8:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <Save_voltage+0x2f4>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	4a46      	ldr	r2, [pc, #280]	; (8002cd8 <Save_voltage+0x30c>)
 8002bbe:	6013      	str	r3, [r2, #0]
	  C507 = SLAVEBMSE.CV[6];
 8002bc0:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <Save_voltage+0x2f4>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4a45      	ldr	r2, [pc, #276]	; (8002cdc <Save_voltage+0x310>)
 8002bc6:	6013      	str	r3, [r2, #0]
	  C508 = SLAVEBMSE.CV[7];
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <Save_voltage+0x2f4>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	e088      	b.n	8002ce0 <Save_voltage+0x314>
 8002bce:	bf00      	nop
 8002bd0:	20000a04 	.word	0x20000a04
 8002bd4:	20000170 	.word	0x20000170
 8002bd8:	2000014c 	.word	0x2000014c
 8002bdc:	200003f0 	.word	0x200003f0
 8002be0:	200009a4 	.word	0x200009a4
 8002be4:	2000027c 	.word	0x2000027c
 8002be8:	200006b8 	.word	0x200006b8
 8002bec:	20000ae8 	.word	0x20000ae8
 8002bf0:	2000026c 	.word	0x2000026c
 8002bf4:	200005dc 	.word	0x200005dc
 8002bf8:	200009b0 	.word	0x200009b0
 8002bfc:	20000160 	.word	0x20000160
 8002c00:	200003fc 	.word	0x200003fc
 8002c04:	200009a0 	.word	0x200009a0
 8002c08:	20000278 	.word	0x20000278
 8002c0c:	200004ec 	.word	0x200004ec
 8002c10:	20000274 	.word	0x20000274
 8002c14:	200005d0 	.word	0x200005d0
 8002c18:	20000af8 	.word	0x20000af8
 8002c1c:	200003c4 	.word	0x200003c4
 8002c20:	20000908 	.word	0x20000908
 8002c24:	2000015c 	.word	0x2000015c
 8002c28:	200003d0 	.word	0x200003d0
 8002c2c:	200008e8 	.word	0x200008e8
 8002c30:	200008e4 	.word	0x200008e4
 8002c34:	20000404 	.word	0x20000404
 8002c38:	2000091c 	.word	0x2000091c
 8002c3c:	20000918 	.word	0x20000918
 8002c40:	20000178 	.word	0x20000178
 8002c44:	200003dc 	.word	0x200003dc
 8002c48:	200005e0 	.word	0x200005e0
 8002c4c:	200008d0 	.word	0x200008d0
 8002c50:	2000017c 	.word	0x2000017c
 8002c54:	200005cc 	.word	0x200005cc
 8002c58:	20000924 	.word	0x20000924
 8002c5c:	20000264 	.word	0x20000264
 8002c60:	200005c8 	.word	0x200005c8
 8002c64:	200009b8 	.word	0x200009b8
 8002c68:	2000090c 	.word	0x2000090c
 8002c6c:	20000174 	.word	0x20000174
 8002c70:	20000154 	.word	0x20000154
 8002c74:	200003f4 	.word	0x200003f4
 8002c78:	20000b0c 	.word	0x20000b0c
 8002c7c:	200008f4 	.word	0x200008f4
 8002c80:	20000298 	.word	0x20000298
 8002c84:	20000414 	.word	0x20000414
 8002c88:	2000029c 	.word	0x2000029c
 8002c8c:	200006c0 	.word	0x200006c0
 8002c90:	20000adc 	.word	0x20000adc
 8002c94:	200002a0 	.word	0x200002a0
 8002c98:	200008d4 	.word	0x200008d4
 8002c9c:	20000af0 	.word	0x20000af0
 8002ca0:	200009c8 	.word	0x200009c8
 8002ca4:	20000284 	.word	0x20000284
 8002ca8:	20000ae0 	.word	0x20000ae0
 8002cac:	20000afc 	.word	0x20000afc
 8002cb0:	200003cc 	.word	0x200003cc
 8002cb4:	200008f0 	.word	0x200008f0
 8002cb8:	20000b08 	.word	0x20000b08
 8002cbc:	200003d8 	.word	0x200003d8
 8002cc0:	20000180 	.word	0x20000180
 8002cc4:	2000040c 	.word	0x2000040c
 8002cc8:	200009ac 	.word	0x200009ac
 8002ccc:	20000288 	.word	0x20000288
 8002cd0:	20000900 	.word	0x20000900
 8002cd4:	200003e4 	.word	0x200003e4
 8002cd8:	20000150 	.word	0x20000150
 8002cdc:	200008fc 	.word	0x200008fc
 8002ce0:	4a86      	ldr	r2, [pc, #536]	; (8002efc <Save_voltage+0x530>)
 8002ce2:	6013      	str	r3, [r2, #0]
	  C509 = SLAVEBMSE.CV[8];
 8002ce4:	4b86      	ldr	r3, [pc, #536]	; (8002f00 <Save_voltage+0x534>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4a86      	ldr	r2, [pc, #536]	; (8002f04 <Save_voltage+0x538>)
 8002cea:	6013      	str	r3, [r2, #0]
	  C510 = SLAVEBMSE.CV[9];
 8002cec:	4b84      	ldr	r3, [pc, #528]	; (8002f00 <Save_voltage+0x534>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	4a85      	ldr	r2, [pc, #532]	; (8002f08 <Save_voltage+0x53c>)
 8002cf2:	6013      	str	r3, [r2, #0]
	  C511 = SLAVEBMSE.CV[10];
 8002cf4:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <Save_voltage+0x534>)
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	4a84      	ldr	r2, [pc, #528]	; (8002f0c <Save_voltage+0x540>)
 8002cfa:	6013      	str	r3, [r2, #0]
	  C512 = SLAVEBMSE.CV[11];
 8002cfc:	4b80      	ldr	r3, [pc, #512]	; (8002f00 <Save_voltage+0x534>)
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	4a83      	ldr	r2, [pc, #524]	; (8002f10 <Save_voltage+0x544>)
 8002d02:	6013      	str	r3, [r2, #0]
	  C513 = SLAVEBMSE.CV[12];
 8002d04:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <Save_voltage+0x534>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	4a82      	ldr	r2, [pc, #520]	; (8002f14 <Save_voltage+0x548>)
 8002d0a:	6013      	str	r3, [r2, #0]
	  C514 = SLAVEBMSE.CV[13];
 8002d0c:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <Save_voltage+0x534>)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	4a81      	ldr	r2, [pc, #516]	; (8002f18 <Save_voltage+0x54c>)
 8002d12:	6013      	str	r3, [r2, #0]
	  temp00 = Temp[0];
 8002d14:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <Save_voltage+0x550>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <Save_voltage+0x554>)
 8002d1c:	801a      	strh	r2, [r3, #0]
	  temp01 = Temp[1];
 8002d1e:	4b7f      	ldr	r3, [pc, #508]	; (8002f1c <Save_voltage+0x550>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b7f      	ldr	r3, [pc, #508]	; (8002f24 <Save_voltage+0x558>)
 8002d26:	801a      	strh	r2, [r3, #0]
	  temp02 = Temp[2];
 8002d28:	4b7c      	ldr	r3, [pc, #496]	; (8002f1c <Save_voltage+0x550>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	4b7e      	ldr	r3, [pc, #504]	; (8002f28 <Save_voltage+0x55c>)
 8002d30:	801a      	strh	r2, [r3, #0]
	  temp03 = Temp[3];
 8002d32:	4b7a      	ldr	r3, [pc, #488]	; (8002f1c <Save_voltage+0x550>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	4b7c      	ldr	r3, [pc, #496]	; (8002f2c <Save_voltage+0x560>)
 8002d3a:	801a      	strh	r2, [r3, #0]
	  temp04 = Temp[4];
 8002d3c:	4b77      	ldr	r3, [pc, #476]	; (8002f1c <Save_voltage+0x550>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b7b      	ldr	r3, [pc, #492]	; (8002f30 <Save_voltage+0x564>)
 8002d44:	801a      	strh	r2, [r3, #0]
	  temp05 = Temp[5];
 8002d46:	4b75      	ldr	r3, [pc, #468]	; (8002f1c <Save_voltage+0x550>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <Save_voltage+0x568>)
 8002d4e:	801a      	strh	r2, [r3, #0]
	  temp06 = Temp[6];
 8002d50:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <Save_voltage+0x550>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	4b78      	ldr	r3, [pc, #480]	; (8002f38 <Save_voltage+0x56c>)
 8002d58:	801a      	strh	r2, [r3, #0]
	  temp07 = Temp[7];
 8002d5a:	4b70      	ldr	r3, [pc, #448]	; (8002f1c <Save_voltage+0x550>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <Save_voltage+0x570>)
 8002d62:	801a      	strh	r2, [r3, #0]
	  temp08 = Temp[8];
 8002d64:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <Save_voltage+0x550>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b75      	ldr	r3, [pc, #468]	; (8002f40 <Save_voltage+0x574>)
 8002d6c:	801a      	strh	r2, [r3, #0]
	  temp09 = Temp[9];
 8002d6e:	4b6b      	ldr	r3, [pc, #428]	; (8002f1c <Save_voltage+0x550>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	4b73      	ldr	r3, [pc, #460]	; (8002f44 <Save_voltage+0x578>)
 8002d76:	801a      	strh	r2, [r3, #0]
	  temp10 = Temp[10];
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <Save_voltage+0x550>)
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	4b72      	ldr	r3, [pc, #456]	; (8002f48 <Save_voltage+0x57c>)
 8002d80:	801a      	strh	r2, [r3, #0]
	  temp11 = Temp[11];
 8002d82:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <Save_voltage+0x550>)
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	4b70      	ldr	r3, [pc, #448]	; (8002f4c <Save_voltage+0x580>)
 8002d8a:	801a      	strh	r2, [r3, #0]
	  temp12 = Temp[12];
 8002d8c:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <Save_voltage+0x550>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	4b6f      	ldr	r3, [pc, #444]	; (8002f50 <Save_voltage+0x584>)
 8002d94:	801a      	strh	r2, [r3, #0]
	  temp13 = Temp[13];
 8002d96:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <Save_voltage+0x550>)
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	4b6d      	ldr	r3, [pc, #436]	; (8002f54 <Save_voltage+0x588>)
 8002d9e:	801a      	strh	r2, [r3, #0]
	  temp14 = Temp[14];
 8002da0:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <Save_voltage+0x550>)
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <Save_voltage+0x58c>)
 8002da8:	801a      	strh	r2, [r3, #0]
	  temp15 = Temp[15];
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <Save_voltage+0x550>)
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <Save_voltage+0x590>)
 8002db2:	801a      	strh	r2, [r3, #0]
	  temp16 = Temp[16];
 8002db4:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <Save_voltage+0x550>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <Save_voltage+0x594>)
 8002dbc:	801a      	strh	r2, [r3, #0]
	  temp17 = Temp[17];
 8002dbe:	4b57      	ldr	r3, [pc, #348]	; (8002f1c <Save_voltage+0x550>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b67      	ldr	r3, [pc, #412]	; (8002f64 <Save_voltage+0x598>)
 8002dc6:	801a      	strh	r2, [r3, #0]
	  temp18 = Temp[18];
 8002dc8:	4b54      	ldr	r3, [pc, #336]	; (8002f1c <Save_voltage+0x550>)
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	4b66      	ldr	r3, [pc, #408]	; (8002f68 <Save_voltage+0x59c>)
 8002dd0:	801a      	strh	r2, [r3, #0]
	  temp19 = Temp[19];
 8002dd2:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <Save_voltage+0x550>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <Save_voltage+0x5a0>)
 8002dda:	801a      	strh	r2, [r3, #0]
	  temp20 = Temp[20];
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <Save_voltage+0x550>)
 8002dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <Save_voltage+0x5a4>)
 8002de4:	801a      	strh	r2, [r3, #0]
	  temp21 = Temp[21];
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <Save_voltage+0x550>)
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <Save_voltage+0x5a8>)
 8002dee:	801a      	strh	r2, [r3, #0]
	  temp22 = Temp[22];
 8002df0:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <Save_voltage+0x550>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	4b60      	ldr	r3, [pc, #384]	; (8002f78 <Save_voltage+0x5ac>)
 8002df8:	801a      	strh	r2, [r3, #0]
	  temp23 = Temp[23];
 8002dfa:	4b48      	ldr	r3, [pc, #288]	; (8002f1c <Save_voltage+0x550>)
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <Save_voltage+0x5b0>)
 8002e02:	801a      	strh	r2, [r3, #0]
	  temp24 = Temp[24];
 8002e04:	4b45      	ldr	r3, [pc, #276]	; (8002f1c <Save_voltage+0x550>)
 8002e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <Save_voltage+0x5b4>)
 8002e0c:	801a      	strh	r2, [r3, #0]
	  temp25 = Temp[25];
 8002e0e:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <Save_voltage+0x550>)
 8002e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <Save_voltage+0x5b8>)
 8002e16:	801a      	strh	r2, [r3, #0]
	  temp26 = Temp[26];
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <Save_voltage+0x550>)
 8002e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b5a      	ldr	r3, [pc, #360]	; (8002f88 <Save_voltage+0x5bc>)
 8002e20:	801a      	strh	r2, [r3, #0]
	  temp27 = Temp[27];
 8002e22:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <Save_voltage+0x550>)
 8002e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	4b58      	ldr	r3, [pc, #352]	; (8002f8c <Save_voltage+0x5c0>)
 8002e2a:	801a      	strh	r2, [r3, #0]
	  temp28 = Temp[28];
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <Save_voltage+0x550>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	4b57      	ldr	r3, [pc, #348]	; (8002f90 <Save_voltage+0x5c4>)
 8002e34:	801a      	strh	r2, [r3, #0]
	  temp29 = Temp[29];
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <Save_voltage+0x550>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b55      	ldr	r3, [pc, #340]	; (8002f94 <Save_voltage+0x5c8>)
 8002e3e:	801a      	strh	r2, [r3, #0]
	  temp30 = Temp[30];
 8002e40:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <Save_voltage+0x550>)
 8002e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	4b54      	ldr	r3, [pc, #336]	; (8002f98 <Save_voltage+0x5cc>)
 8002e48:	801a      	strh	r2, [r3, #0]
	  temp31 = Temp[31];
 8002e4a:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <Save_voltage+0x550>)
 8002e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	4b52      	ldr	r3, [pc, #328]	; (8002f9c <Save_voltage+0x5d0>)
 8002e52:	801a      	strh	r2, [r3, #0]
	  temp32 = Temp[32];
 8002e54:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <Save_voltage+0x550>)
 8002e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <Save_voltage+0x5d4>)
 8002e5e:	801a      	strh	r2, [r3, #0]
	  temp33 = Temp[33];
 8002e60:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <Save_voltage+0x550>)
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b4e      	ldr	r3, [pc, #312]	; (8002fa4 <Save_voltage+0x5d8>)
 8002e6a:	801a      	strh	r2, [r3, #0]
	  temp34 = Temp[34];
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <Save_voltage+0x550>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <Save_voltage+0x5dc>)
 8002e76:	801a      	strh	r2, [r3, #0]
	  temp35 = Temp[35];
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <Save_voltage+0x550>)
 8002e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <Save_voltage+0x5e0>)
 8002e82:	801a      	strh	r2, [r3, #0]
	  temp36 = Temp[36];
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <Save_voltage+0x550>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <Save_voltage+0x5e4>)
 8002e8e:	801a      	strh	r2, [r3, #0]
	  temp37 = Temp[37];
 8002e90:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <Save_voltage+0x550>)
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <Save_voltage+0x5e8>)
 8002e9a:	801a      	strh	r2, [r3, #0]
	  temp38 = Temp[38];
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <Save_voltage+0x550>)
 8002e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b44      	ldr	r3, [pc, #272]	; (8002fb8 <Save_voltage+0x5ec>)
 8002ea6:	801a      	strh	r2, [r3, #0]
	  temp39 = Temp[39];
 8002ea8:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <Save_voltage+0x550>)
 8002eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <Save_voltage+0x5f0>)
 8002eb2:	801a      	strh	r2, [r3, #0]
	  temp40 = Temp[40];
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <Save_voltage+0x550>)
 8002eb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <Save_voltage+0x5f4>)
 8002ebe:	801a      	strh	r2, [r3, #0]
	  temp41 = Temp[41];
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <Save_voltage+0x550>)
 8002ec2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <Save_voltage+0x5f8>)
 8002eca:	801a      	strh	r2, [r3, #0]
	  temp42 = Temp[42];
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <Save_voltage+0x550>)
 8002ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <Save_voltage+0x5fc>)
 8002ed6:	801a      	strh	r2, [r3, #0]
	  temp43 = Temp[43];
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <Save_voltage+0x550>)
 8002eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <Save_voltage+0x600>)
 8002ee2:	801a      	strh	r2, [r3, #0]
	  temp44 = Temp[44];
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <Save_voltage+0x550>)
 8002ee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <Save_voltage+0x604>)
 8002eee:	801a      	strh	r2, [r3, #0]
	  temp45 = Temp[45];
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <Save_voltage+0x550>)
 8002ef2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	e06c      	b.n	8002fd4 <Save_voltage+0x608>
 8002efa:	bf00      	nop
 8002efc:	20000168 	.word	0x20000168
 8002f00:	20000180 	.word	0x20000180
 8002f04:	20000910 	.word	0x20000910
 8002f08:	20000158 	.word	0x20000158
 8002f0c:	200003f8 	.word	0x200003f8
 8002f10:	2000099c 	.word	0x2000099c
 8002f14:	20000258 	.word	0x20000258
 8002f18:	20000930 	.word	0x20000930
 8002f1c:	200002ac 	.word	0x200002ac
 8002f20:	2000092a 	.word	0x2000092a
 8002f24:	2000040a 	.word	0x2000040a
 8002f28:	20000af6 	.word	0x20000af6
 8002f2c:	200008da 	.word	0x200008da
 8002f30:	200002a6 	.word	0x200002a6
 8002f34:	200008e0 	.word	0x200008e0
 8002f38:	200005c6 	.word	0x200005c6
 8002f3c:	2000025c 	.word	0x2000025c
 8002f40:	20000998 	.word	0x20000998
 8002f44:	20000270 	.word	0x20000270
 8002f48:	200009be 	.word	0x200009be
 8002f4c:	200005d8 	.word	0x200005d8
 8002f50:	20000290 	.word	0x20000290
 8002f54:	200009c2 	.word	0x200009c2
 8002f58:	20000294 	.word	0x20000294
 8002f5c:	200009e4 	.word	0x200009e4
 8002f60:	200005da 	.word	0x200005da
 8002f64:	2000028c 	.word	0x2000028c
 8002f68:	200006c4 	.word	0x200006c4
 8002f6c:	20000920 	.word	0x20000920
 8002f70:	20000b02 	.word	0x20000b02
 8002f74:	200003e2 	.word	0x200003e2
 8002f78:	200008ca 	.word	0x200008ca
 8002f7c:	200002aa 	.word	0x200002aa
 8002f80:	20000260 	.word	0x20000260
 8002f84:	200009aa 	.word	0x200009aa
 8002f88:	20000412 	.word	0x20000412
 8002f8c:	200009b4 	.word	0x200009b4
 8002f90:	200008ec 	.word	0x200008ec
 8002f94:	200003d4 	.word	0x200003d4
 8002f98:	2000092e 	.word	0x2000092e
 8002f9c:	20000120 	.word	0x20000120
 8002fa0:	200008f8 	.word	0x200008f8
 8002fa4:	20000914 	.word	0x20000914
 8002fa8:	200003ec 	.word	0x200003ec
 8002fac:	20000164 	.word	0x20000164
 8002fb0:	20000400 	.word	0x20000400
 8002fb4:	2000016c 	.word	0x2000016c
 8002fb8:	20000916 	.word	0x20000916
 8002fbc:	200003ea 	.word	0x200003ea
 8002fc0:	2000092c 	.word	0x2000092c
 8002fc4:	20000268 	.word	0x20000268
 8002fc8:	200005d4 	.word	0x200005d4
 8002fcc:	20000928 	.word	0x20000928
 8002fd0:	20000408 	.word	0x20000408
 8002fd4:	4b5a      	ldr	r3, [pc, #360]	; (8003140 <Save_voltage+0x774>)
 8002fd6:	801a      	strh	r2, [r3, #0]
	  temp46 = Temp[46];
 8002fd8:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <Save_voltage+0x778>)
 8002fda:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b59      	ldr	r3, [pc, #356]	; (8003148 <Save_voltage+0x77c>)
 8002fe2:	801a      	strh	r2, [r3, #0]
	  temp47 = Temp[47];
 8002fe4:	4b57      	ldr	r3, [pc, #348]	; (8003144 <Save_voltage+0x778>)
 8002fe6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	4b57      	ldr	r3, [pc, #348]	; (800314c <Save_voltage+0x780>)
 8002fee:	801a      	strh	r2, [r3, #0]
	  temp48 = Temp[48];
 8002ff0:	4b54      	ldr	r3, [pc, #336]	; (8003144 <Save_voltage+0x778>)
 8002ff2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <Save_voltage+0x784>)
 8002ffa:	801a      	strh	r2, [r3, #0]
	  temp49 = Temp[49];
 8002ffc:	4b51      	ldr	r3, [pc, #324]	; (8003144 <Save_voltage+0x778>)
 8002ffe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003002:	b29a      	uxth	r2, r3
 8003004:	4b53      	ldr	r3, [pc, #332]	; (8003154 <Save_voltage+0x788>)
 8003006:	801a      	strh	r2, [r3, #0]
	  temp50 = Temp[50];
 8003008:	4b4e      	ldr	r3, [pc, #312]	; (8003144 <Save_voltage+0x778>)
 800300a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800300e:	b29a      	uxth	r2, r3
 8003010:	4b51      	ldr	r3, [pc, #324]	; (8003158 <Save_voltage+0x78c>)
 8003012:	801a      	strh	r2, [r3, #0]
	  temp51 = Temp[51];
 8003014:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <Save_voltage+0x778>)
 8003016:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800301a:	b29a      	uxth	r2, r3
 800301c:	4b4f      	ldr	r3, [pc, #316]	; (800315c <Save_voltage+0x790>)
 800301e:	801a      	strh	r2, [r3, #0]
	  temp52 = Temp[52];
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <Save_voltage+0x778>)
 8003022:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003026:	b29a      	uxth	r2, r3
 8003028:	4b4d      	ldr	r3, [pc, #308]	; (8003160 <Save_voltage+0x794>)
 800302a:	801a      	strh	r2, [r3, #0]
	  temp53 = Temp[53];
 800302c:	4b45      	ldr	r3, [pc, #276]	; (8003144 <Save_voltage+0x778>)
 800302e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003032:	b29a      	uxth	r2, r3
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <Save_voltage+0x798>)
 8003036:	801a      	strh	r2, [r3, #0]
	  temp54 = Temp[54];
 8003038:	4b42      	ldr	r3, [pc, #264]	; (8003144 <Save_voltage+0x778>)
 800303a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b49      	ldr	r3, [pc, #292]	; (8003168 <Save_voltage+0x79c>)
 8003042:	801a      	strh	r2, [r3, #0]
	  temp55 = Temp[55];
 8003044:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <Save_voltage+0x778>)
 8003046:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800304a:	b29a      	uxth	r2, r3
 800304c:	4b47      	ldr	r3, [pc, #284]	; (800316c <Save_voltage+0x7a0>)
 800304e:	801a      	strh	r2, [r3, #0]
	  temp56 = Temp[56];
 8003050:	4b3c      	ldr	r3, [pc, #240]	; (8003144 <Save_voltage+0x778>)
 8003052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003056:	b29a      	uxth	r2, r3
 8003058:	4b45      	ldr	r3, [pc, #276]	; (8003170 <Save_voltage+0x7a4>)
 800305a:	801a      	strh	r2, [r3, #0]
	  temp57 = Temp[57];
 800305c:	4b39      	ldr	r3, [pc, #228]	; (8003144 <Save_voltage+0x778>)
 800305e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b43      	ldr	r3, [pc, #268]	; (8003174 <Save_voltage+0x7a8>)
 8003066:	801a      	strh	r2, [r3, #0]
	  temp58 = Temp[58];
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <Save_voltage+0x778>)
 800306a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800306e:	b29a      	uxth	r2, r3
 8003070:	4b41      	ldr	r3, [pc, #260]	; (8003178 <Save_voltage+0x7ac>)
 8003072:	801a      	strh	r2, [r3, #0]
	  temp59 = Temp[59];
 8003074:	4b33      	ldr	r3, [pc, #204]	; (8003144 <Save_voltage+0x778>)
 8003076:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800307a:	b29a      	uxth	r2, r3
 800307c:	4b3f      	ldr	r3, [pc, #252]	; (800317c <Save_voltage+0x7b0>)
 800307e:	801a      	strh	r2, [r3, #0]
	  temp60 = Temp[60];
 8003080:	4b30      	ldr	r3, [pc, #192]	; (8003144 <Save_voltage+0x778>)
 8003082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003086:	b29a      	uxth	r2, r3
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <Save_voltage+0x7b4>)
 800308a:	801a      	strh	r2, [r3, #0]
	  temp61 = Temp[61];
 800308c:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <Save_voltage+0x778>)
 800308e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003092:	b29a      	uxth	r2, r3
 8003094:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <Save_voltage+0x7b8>)
 8003096:	801a      	strh	r2, [r3, #0]
	  temp62 = Temp[62];
 8003098:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <Save_voltage+0x778>)
 800309a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b39      	ldr	r3, [pc, #228]	; (8003188 <Save_voltage+0x7bc>)
 80030a2:	801a      	strh	r2, [r3, #0]
	  temp63 = Temp[63];
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <Save_voltage+0x778>)
 80030a6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b37      	ldr	r3, [pc, #220]	; (800318c <Save_voltage+0x7c0>)
 80030ae:	801a      	strh	r2, [r3, #0]
	  temp64 = Temp[64];
 80030b0:	4b24      	ldr	r3, [pc, #144]	; (8003144 <Save_voltage+0x778>)
 80030b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	4b35      	ldr	r3, [pc, #212]	; (8003190 <Save_voltage+0x7c4>)
 80030ba:	801a      	strh	r2, [r3, #0]
	  temp65 = Temp[65];
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <Save_voltage+0x778>)
 80030be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	4b33      	ldr	r3, [pc, #204]	; (8003194 <Save_voltage+0x7c8>)
 80030c6:	801a      	strh	r2, [r3, #0]
	  temp66 = Temp[66];
 80030c8:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <Save_voltage+0x778>)
 80030ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b31      	ldr	r3, [pc, #196]	; (8003198 <Save_voltage+0x7cc>)
 80030d2:	801a      	strh	r2, [r3, #0]
	  temp67 = Temp[67];
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <Save_voltage+0x778>)
 80030d6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80030da:	b29a      	uxth	r2, r3
 80030dc:	4b2f      	ldr	r3, [pc, #188]	; (800319c <Save_voltage+0x7d0>)
 80030de:	801a      	strh	r2, [r3, #0]
	  temp68 = Temp[68];
 80030e0:	4b18      	ldr	r3, [pc, #96]	; (8003144 <Save_voltage+0x778>)
 80030e2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <Save_voltage+0x7d4>)
 80030ea:	801a      	strh	r2, [r3, #0]
	  temp69 = Temp[69];
 80030ec:	4b15      	ldr	r3, [pc, #84]	; (8003144 <Save_voltage+0x778>)
 80030ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <Save_voltage+0x7d8>)
 80030f6:	801a      	strh	r2, [r3, #0]



	  Sum_of_Voltage = SLAVEBMSA.SC + SLAVEBMSB.SC + SLAVEBMSC.SC + SLAVEBMSD.SC + SLAVEBMSE.SC;
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <Save_voltage+0x7dc>)
 80030fa:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80030fe:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <Save_voltage+0x7e0>)
 8003100:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <Save_voltage+0x7e4>)
 800310a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800310e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003112:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <Save_voltage+0x7e8>)
 8003114:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311c:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <Save_voltage+0x7ec>)
 800311e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800312a:	ee17 3a90 	vmov	r3, s15
 800312e:	b29a      	uxth	r2, r3
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <Save_voltage+0x7f0>)
 8003132:	801a      	strh	r2, [r3, #0]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000af4 	.word	0x20000af4
 8003144:	200002ac 	.word	0x200002ac
 8003148:	200008d8 	.word	0x200008d8
 800314c:	200002a4 	.word	0x200002a4
 8003150:	200008de 	.word	0x200008de
 8003154:	200005c4 	.word	0x200005c4
 8003158:	20000904 	.word	0x20000904
 800315c:	200003e8 	.word	0x200003e8
 8003160:	200006bc 	.word	0x200006bc
 8003164:	20000aec 	.word	0x20000aec
 8003168:	20000280 	.word	0x20000280
 800316c:	200009bc 	.word	0x200009bc
 8003170:	200005d6 	.word	0x200005d6
 8003174:	2000028e 	.word	0x2000028e
 8003178:	200009c0 	.word	0x200009c0
 800317c:	20000292 	.word	0x20000292
 8003180:	200003c8 	.word	0x200003c8
 8003184:	20000ae4 	.word	0x20000ae4
 8003188:	200008cc 	.word	0x200008cc
 800318c:	20000b00 	.word	0x20000b00
 8003190:	200003e0 	.word	0x200003e0
 8003194:	200008c8 	.word	0x200008c8
 8003198:	200002a8 	.word	0x200002a8
 800319c:	2000025e 	.word	0x2000025e
 80031a0:	200009a8 	.word	0x200009a8
 80031a4:	20000410 	.word	0x20000410
 80031a8:	20000a04 	.word	0x20000a04
 80031ac:	200004ec 	.word	0x200004ec
 80031b0:	200005e0 	.word	0x200005e0
 80031b4:	20000414 	.word	0x20000414
 80031b8:	20000180 	.word	0x20000180
 80031bc:	20000038 	.word	0x20000038

080031c0 <Voltage_Drop_Sense>:

void Voltage_Drop_Sense()
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
    	while((C101<=2.50) || (C102<=2.50) || (C103<=2.50) || (C104<=2.50) || (C105<=2.50) || (C106<=2.50) || (C107<=2.50) ||
 80031c4:	e046      	b.n	8003254 <Voltage_Drop_Sense+0x94>
    		   (C401<=2.50) || (C402<=2.50) || (C403<=2.50) || (C404<=2.50) || (C405<=2.50) || (C406<=2.50) || (C407<=2.50) ||
    		   (C408<=2.50) || (C409<=2.50) || (C410<=2.50) || (C411<=2.50) || (C412<=2.50) || (C413<=2.50) || (C414<=2.50) ||
    		   (C501<=2.50) || (C502<=2.50) || (C503<=2.50) || (C504<=2.50) || (C505<=2.50) || (C506<=2.50) || (C507<=2.50) ||
    		   (C508<=2.50) || (C509<=2.50) || (C510<=2.50) || (C511<=2.50) || (C512<=2.50) || (C513<=2.50) || (C514<=2.50))
    	{
                 stack++;
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <Voltage_Drop_Sense+0x8c>)
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <Voltage_Drop_Sense+0x8c>)
 80031d0:	801a      	strh	r2, [r3, #0]

                 Reading_Voltage();
 80031d2:	f7fd ff3d 	bl	8001050 <Reading_Voltage>

                 Save_voltage();
 80031d6:	f7ff fbf9 	bl	80029cc <Save_voltage>

                 if (stack == 10)
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <Voltage_Drop_Sense+0x8c>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	2b0a      	cmp	r3, #10
 80031e0:	d138      	bne.n	8003254 <Voltage_Drop_Sense+0x94>
                 {
                	 HAL_Delay(1000);
 80031e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031e6:	f002 f941 	bl	800546c <HAL_Delay>
                	 HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin, GPIO_PIN_RESET);//(1)
 80031ea:	2200      	movs	r2, #0
 80031ec:	2101      	movs	r1, #1
 80031ee:	4818      	ldr	r0, [pc, #96]	; (8003250 <Voltage_Drop_Sense+0x90>)
 80031f0:	f004 fa64 	bl	80076bc <HAL_GPIO_WritePin>
                	 HAL_GPIO_WritePin(DSG_GPIO_Port, DSG_Pin, GPIO_PIN_RESET);//(2)
 80031f4:	2200      	movs	r2, #0
 80031f6:	2102      	movs	r1, #2
 80031f8:	4815      	ldr	r0, [pc, #84]	; (8003250 <Voltage_Drop_Sense+0x90>)
 80031fa:	f004 fa5f 	bl	80076bc <HAL_GPIO_WritePin>

                   	 while(1)
                   	 {
                   	   Reading_Voltage(); //SLAVEBMSA + B + C + D + E
 80031fe:	f7fd ff27 	bl	8001050 <Reading_Voltage>

                   	   Save_voltage(); //cell array
 8003202:	f7ff fbe3 	bl	80029cc <Save_voltage>

                   	   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003206:	2201      	movs	r2, #1
 8003208:	2104      	movs	r1, #4
 800320a:	4811      	ldr	r0, [pc, #68]	; (8003250 <Voltage_Drop_Sense+0x90>)
 800320c:	f004 fa56 	bl	80076bc <HAL_GPIO_WritePin>
                   	   HAL_Delay(200);
 8003210:	20c8      	movs	r0, #200	; 0xc8
 8003212:	f002 f92b 	bl	800546c <HAL_Delay>
                   	   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003216:	2200      	movs	r2, #0
 8003218:	2104      	movs	r1, #4
 800321a:	480d      	ldr	r0, [pc, #52]	; (8003250 <Voltage_Drop_Sense+0x90>)
 800321c:	f004 fa4e 	bl	80076bc <HAL_GPIO_WritePin>
                   	   HAL_Delay(200);
 8003220:	20c8      	movs	r0, #200	; 0xc8
 8003222:	f002 f923 	bl	800546c <HAL_Delay>
                   	   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003226:	2201      	movs	r2, #1
 8003228:	2104      	movs	r1, #4
 800322a:	4809      	ldr	r0, [pc, #36]	; (8003250 <Voltage_Drop_Sense+0x90>)
 800322c:	f004 fa46 	bl	80076bc <HAL_GPIO_WritePin>
                   	   HAL_Delay(200);
 8003230:	20c8      	movs	r0, #200	; 0xc8
 8003232:	f002 f91b 	bl	800546c <HAL_Delay>
                   	   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003236:	2200      	movs	r2, #0
 8003238:	2104      	movs	r1, #4
 800323a:	4805      	ldr	r0, [pc, #20]	; (8003250 <Voltage_Drop_Sense+0x90>)
 800323c:	f004 fa3e 	bl	80076bc <HAL_GPIO_WritePin>
                   	   HAL_Delay(3000);
 8003240:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003244:	f002 f912 	bl	800546c <HAL_Delay>
                   	   Reading_Voltage(); //SLAVEBMSA + B + C + D + E
 8003248:	e7d9      	b.n	80031fe <Voltage_Drop_Sense+0x3e>
 800324a:	bf00      	nop
 800324c:	2000003a 	.word	0x2000003a
 8003250:	48000400 	.word	0x48000400
    	while((C101<=2.50) || (C102<=2.50) || (C103<=2.50) || (C104<=2.50) || (C105<=2.50) || (C106<=2.50) || (C107<=2.50) ||
 8003254:	4be6      	ldr	r3, [pc, #920]	; (80035f0 <Voltage_Drop_Sense+0x430>)
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800325e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003266:	d9ae      	bls.n	80031c6 <Voltage_Drop_Sense+0x6>
 8003268:	4be2      	ldr	r3, [pc, #904]	; (80035f4 <Voltage_Drop_Sense+0x434>)
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327a:	d9a4      	bls.n	80031c6 <Voltage_Drop_Sense+0x6>
 800327c:	4bde      	ldr	r3, [pc, #888]	; (80035f8 <Voltage_Drop_Sense+0x438>)
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328e:	d99a      	bls.n	80031c6 <Voltage_Drop_Sense+0x6>
 8003290:	4bda      	ldr	r3, [pc, #872]	; (80035fc <Voltage_Drop_Sense+0x43c>)
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800329a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a2:	d990      	bls.n	80031c6 <Voltage_Drop_Sense+0x6>
 80032a4:	4bd6      	ldr	r3, [pc, #856]	; (8003600 <Voltage_Drop_Sense+0x440>)
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80032ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b6:	d986      	bls.n	80031c6 <Voltage_Drop_Sense+0x6>
 80032b8:	4bd2      	ldr	r3, [pc, #840]	; (8003604 <Voltage_Drop_Sense+0x444>)
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80032c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ca:	f67f af7c 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80032ce:	4bce      	ldr	r3, [pc, #824]	; (8003608 <Voltage_Drop_Sense+0x448>)
 80032d0:	edd3 7a00 	vldr	s15, [r3]
 80032d4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80032d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e0:	f67f af71 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C108<=2.50) || (C109<=2.50) || (C110<=2.50) || (C111<=2.50) || (C112<=2.50) || (C113<=2.50) || (C114<=2.50) ||
 80032e4:	4bc9      	ldr	r3, [pc, #804]	; (800360c <Voltage_Drop_Sense+0x44c>)
 80032e6:	edd3 7a00 	vldr	s15, [r3]
    	while((C101<=2.50) || (C102<=2.50) || (C103<=2.50) || (C104<=2.50) || (C105<=2.50) || (C106<=2.50) || (C107<=2.50) ||
 80032ea:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80032ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f6:	f67f af66 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C108<=2.50) || (C109<=2.50) || (C110<=2.50) || (C111<=2.50) || (C112<=2.50) || (C113<=2.50) || (C114<=2.50) ||
 80032fa:	4bc5      	ldr	r3, [pc, #788]	; (8003610 <Voltage_Drop_Sense+0x450>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330c:	f67f af5b 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003310:	4bc0      	ldr	r3, [pc, #768]	; (8003614 <Voltage_Drop_Sense+0x454>)
 8003312:	edd3 7a00 	vldr	s15, [r3]
 8003316:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800331a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003322:	f67f af50 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003326:	4bbc      	ldr	r3, [pc, #752]	; (8003618 <Voltage_Drop_Sense+0x458>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003338:	f67f af45 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800333c:	4bb7      	ldr	r3, [pc, #732]	; (800361c <Voltage_Drop_Sense+0x45c>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	f67f af3a 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003352:	4bb3      	ldr	r3, [pc, #716]	; (8003620 <Voltage_Drop_Sense+0x460>)
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800335c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	f67f af2f 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003368:	4bae      	ldr	r3, [pc, #696]	; (8003624 <Voltage_Drop_Sense+0x464>)
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	f67f af24 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C201<=2.50) || (C202<=2.50) || (C203<=2.50) || (C204<=2.50) || (C205<=2.50) || (C206<=2.50) || (C207<=2.50) ||
 800337e:	4baa      	ldr	r3, [pc, #680]	; (8003628 <Voltage_Drop_Sense+0x468>)
 8003380:	edd3 7a00 	vldr	s15, [r3]
    		   (C108<=2.50) || (C109<=2.50) || (C110<=2.50) || (C111<=2.50) || (C112<=2.50) || (C113<=2.50) || (C114<=2.50) ||
 8003384:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	f67f af19 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C201<=2.50) || (C202<=2.50) || (C203<=2.50) || (C204<=2.50) || (C205<=2.50) || (C206<=2.50) || (C207<=2.50) ||
 8003394:	4ba5      	ldr	r3, [pc, #660]	; (800362c <Voltage_Drop_Sense+0x46c>)
 8003396:	edd3 7a00 	vldr	s15, [r3]
 800339a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800339e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	f67f af0e 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80033aa:	4ba1      	ldr	r3, [pc, #644]	; (8003630 <Voltage_Drop_Sense+0x470>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80033b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	f67f af03 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80033c0:	4b9c      	ldr	r3, [pc, #624]	; (8003634 <Voltage_Drop_Sense+0x474>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80033ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	f67f aef8 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80033d6:	4b98      	ldr	r3, [pc, #608]	; (8003638 <Voltage_Drop_Sense+0x478>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80033e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	f67f aeed 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80033ec:	4b93      	ldr	r3, [pc, #588]	; (800363c <Voltage_Drop_Sense+0x47c>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80033f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fe:	f67f aee2 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003402:	4b8f      	ldr	r3, [pc, #572]	; (8003640 <Voltage_Drop_Sense+0x480>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800340c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003414:	f67f aed7 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C208<=2.50) || (C209<=2.50) || (C210<=2.50) || (C211<=2.50) || (C212<=2.50) || (C213<=2.50) || (C214<=2.50) ||
 8003418:	4b8a      	ldr	r3, [pc, #552]	; (8003644 <Voltage_Drop_Sense+0x484>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
    		   (C201<=2.50) || (C202<=2.50) || (C203<=2.50) || (C204<=2.50) || (C205<=2.50) || (C206<=2.50) || (C207<=2.50) ||
 800341e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	f67f aecc 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C208<=2.50) || (C209<=2.50) || (C210<=2.50) || (C211<=2.50) || (C212<=2.50) || (C213<=2.50) || (C214<=2.50) ||
 800342e:	4b86      	ldr	r3, [pc, #536]	; (8003648 <Voltage_Drop_Sense+0x488>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003440:	f67f aec1 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003444:	4b81      	ldr	r3, [pc, #516]	; (800364c <Voltage_Drop_Sense+0x48c>)
 8003446:	edd3 7a00 	vldr	s15, [r3]
 800344a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800344e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	f67f aeb6 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800345a:	4b7d      	ldr	r3, [pc, #500]	; (8003650 <Voltage_Drop_Sense+0x490>)
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	f67f aeab 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003470:	4b78      	ldr	r3, [pc, #480]	; (8003654 <Voltage_Drop_Sense+0x494>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800347a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	f67f aea0 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003486:	4b74      	ldr	r3, [pc, #464]	; (8003658 <Voltage_Drop_Sense+0x498>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	f67f ae95 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800349c:	4b6f      	ldr	r3, [pc, #444]	; (800365c <Voltage_Drop_Sense+0x49c>)
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80034a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ae:	f67f ae8a 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C301<=2.50) || (C302<=2.50) || (C303<=2.50) || (C304<=2.50) || (C305<=2.50) || (C306<=2.50) || (C307<=2.50) ||
 80034b2:	4b6b      	ldr	r3, [pc, #428]	; (8003660 <Voltage_Drop_Sense+0x4a0>)
 80034b4:	edd3 7a00 	vldr	s15, [r3]
    		   (C208<=2.50) || (C209<=2.50) || (C210<=2.50) || (C211<=2.50) || (C212<=2.50) || (C213<=2.50) || (C214<=2.50) ||
 80034b8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80034bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c4:	f67f ae7f 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C301<=2.50) || (C302<=2.50) || (C303<=2.50) || (C304<=2.50) || (C305<=2.50) || (C306<=2.50) || (C307<=2.50) ||
 80034c8:	4b66      	ldr	r3, [pc, #408]	; (8003664 <Voltage_Drop_Sense+0x4a4>)
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80034d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034da:	f67f ae74 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80034de:	4b62      	ldr	r3, [pc, #392]	; (8003668 <Voltage_Drop_Sense+0x4a8>)
 80034e0:	edd3 7a00 	vldr	s15, [r3]
 80034e4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80034e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	f67f ae69 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80034f4:	4b5d      	ldr	r3, [pc, #372]	; (800366c <Voltage_Drop_Sense+0x4ac>)
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80034fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003506:	f67f ae5e 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800350a:	4b59      	ldr	r3, [pc, #356]	; (8003670 <Voltage_Drop_Sense+0x4b0>)
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	f67f ae53 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003520:	4b54      	ldr	r3, [pc, #336]	; (8003674 <Voltage_Drop_Sense+0x4b4>)
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800352a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003532:	f67f ae48 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003536:	4b50      	ldr	r3, [pc, #320]	; (8003678 <Voltage_Drop_Sense+0x4b8>)
 8003538:	edd3 7a00 	vldr	s15, [r3]
 800353c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003548:	f67f ae3d 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C308<=2.50) || (C309<=2.50) || (C310<=2.50) || (C311<=2.50) || (C312<=2.50) || (C313<=2.50) || (C314<=2.50) ||
 800354c:	4b4b      	ldr	r3, [pc, #300]	; (800367c <Voltage_Drop_Sense+0x4bc>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
    		   (C301<=2.50) || (C302<=2.50) || (C303<=2.50) || (C304<=2.50) || (C305<=2.50) || (C306<=2.50) || (C307<=2.50) ||
 8003552:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	f67f ae32 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C308<=2.50) || (C309<=2.50) || (C310<=2.50) || (C311<=2.50) || (C312<=2.50) || (C313<=2.50) || (C314<=2.50) ||
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <Voltage_Drop_Sense+0x4c0>)
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800356c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	f67f ae27 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <Voltage_Drop_Sense+0x4c4>)
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358a:	f67f ae1c 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800358e:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <Voltage_Drop_Sense+0x4c8>)
 8003590:	edd3 7a00 	vldr	s15, [r3]
 8003594:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800359c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a0:	f67f ae11 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80035a4:	4b39      	ldr	r3, [pc, #228]	; (800368c <Voltage_Drop_Sense+0x4cc>)
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80035ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	f67f ae06 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80035ba:	4b35      	ldr	r3, [pc, #212]	; (8003690 <Voltage_Drop_Sense+0x4d0>)
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80035c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	f67f adfb 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80035d0:	4b30      	ldr	r3, [pc, #192]	; (8003694 <Voltage_Drop_Sense+0x4d4>)
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80035da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	f67f adf0 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C401<=2.50) || (C402<=2.50) || (C403<=2.50) || (C404<=2.50) || (C405<=2.50) || (C406<=2.50) || (C407<=2.50) ||
 80035e6:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <Voltage_Drop_Sense+0x4d8>)
 80035e8:	edd3 7a00 	vldr	s15, [r3]
 80035ec:	e056      	b.n	800369c <Voltage_Drop_Sense+0x4dc>
 80035ee:	bf00      	nop
 80035f0:	20000170 	.word	0x20000170
 80035f4:	2000014c 	.word	0x2000014c
 80035f8:	200003f0 	.word	0x200003f0
 80035fc:	200009a4 	.word	0x200009a4
 8003600:	2000027c 	.word	0x2000027c
 8003604:	200006b8 	.word	0x200006b8
 8003608:	20000ae8 	.word	0x20000ae8
 800360c:	2000026c 	.word	0x2000026c
 8003610:	200005dc 	.word	0x200005dc
 8003614:	200009b0 	.word	0x200009b0
 8003618:	20000160 	.word	0x20000160
 800361c:	200003fc 	.word	0x200003fc
 8003620:	200009a0 	.word	0x200009a0
 8003624:	20000278 	.word	0x20000278
 8003628:	20000274 	.word	0x20000274
 800362c:	200005d0 	.word	0x200005d0
 8003630:	20000af8 	.word	0x20000af8
 8003634:	200003c4 	.word	0x200003c4
 8003638:	20000908 	.word	0x20000908
 800363c:	2000015c 	.word	0x2000015c
 8003640:	200003d0 	.word	0x200003d0
 8003644:	200008e8 	.word	0x200008e8
 8003648:	200008e4 	.word	0x200008e4
 800364c:	20000404 	.word	0x20000404
 8003650:	2000091c 	.word	0x2000091c
 8003654:	20000918 	.word	0x20000918
 8003658:	20000178 	.word	0x20000178
 800365c:	200003dc 	.word	0x200003dc
 8003660:	200008d0 	.word	0x200008d0
 8003664:	2000017c 	.word	0x2000017c
 8003668:	200005cc 	.word	0x200005cc
 800366c:	20000924 	.word	0x20000924
 8003670:	20000264 	.word	0x20000264
 8003674:	200005c8 	.word	0x200005c8
 8003678:	200009b8 	.word	0x200009b8
 800367c:	2000090c 	.word	0x2000090c
 8003680:	20000174 	.word	0x20000174
 8003684:	20000154 	.word	0x20000154
 8003688:	200003f4 	.word	0x200003f4
 800368c:	20000b0c 	.word	0x20000b0c
 8003690:	200008f4 	.word	0x200008f4
 8003694:	20000298 	.word	0x20000298
 8003698:	2000029c 	.word	0x2000029c
    		   (C308<=2.50) || (C309<=2.50) || (C310<=2.50) || (C311<=2.50) || (C312<=2.50) || (C313<=2.50) || (C314<=2.50) ||
 800369c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80036a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a8:	f67f ad8d 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C401<=2.50) || (C402<=2.50) || (C403<=2.50) || (C404<=2.50) || (C405<=2.50) || (C406<=2.50) || (C407<=2.50) ||
 80036ac:	4b96      	ldr	r3, [pc, #600]	; (8003908 <Voltage_Drop_Sense+0x748>)
 80036ae:	edd3 7a00 	vldr	s15, [r3]
 80036b2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80036b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036be:	f67f ad82 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80036c2:	4b92      	ldr	r3, [pc, #584]	; (800390c <Voltage_Drop_Sense+0x74c>)
 80036c4:	edd3 7a00 	vldr	s15, [r3]
 80036c8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80036cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	f67f ad77 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80036d8:	4b8d      	ldr	r3, [pc, #564]	; (8003910 <Voltage_Drop_Sense+0x750>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80036e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	f67f ad6c 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80036ee:	4b89      	ldr	r3, [pc, #548]	; (8003914 <Voltage_Drop_Sense+0x754>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80036f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003700:	f67f ad61 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003704:	4b84      	ldr	r3, [pc, #528]	; (8003918 <Voltage_Drop_Sense+0x758>)
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800370e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003716:	f67f ad56 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800371a:	4b80      	ldr	r3, [pc, #512]	; (800391c <Voltage_Drop_Sense+0x75c>)
 800371c:	edd3 7a00 	vldr	s15, [r3]
 8003720:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372c:	f67f ad4b 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C408<=2.50) || (C409<=2.50) || (C410<=2.50) || (C411<=2.50) || (C412<=2.50) || (C413<=2.50) || (C414<=2.50) ||
 8003730:	4b7b      	ldr	r3, [pc, #492]	; (8003920 <Voltage_Drop_Sense+0x760>)
 8003732:	edd3 7a00 	vldr	s15, [r3]
    		   (C401<=2.50) || (C402<=2.50) || (C403<=2.50) || (C404<=2.50) || (C405<=2.50) || (C406<=2.50) || (C407<=2.50) ||
 8003736:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800373a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003742:	f67f ad40 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C408<=2.50) || (C409<=2.50) || (C410<=2.50) || (C411<=2.50) || (C412<=2.50) || (C413<=2.50) || (C414<=2.50) ||
 8003746:	4b77      	ldr	r3, [pc, #476]	; (8003924 <Voltage_Drop_Sense+0x764>)
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003758:	f67f ad35 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800375c:	4b72      	ldr	r3, [pc, #456]	; (8003928 <Voltage_Drop_Sense+0x768>)
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376e:	f67f ad2a 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003772:	4b6e      	ldr	r3, [pc, #440]	; (800392c <Voltage_Drop_Sense+0x76c>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800377c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003784:	f67f ad1f 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003788:	4b69      	ldr	r3, [pc, #420]	; (8003930 <Voltage_Drop_Sense+0x770>)
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	f67f ad14 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800379e:	4b65      	ldr	r3, [pc, #404]	; (8003934 <Voltage_Drop_Sense+0x774>)
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80037a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	f67f ad09 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80037b4:	4b60      	ldr	r3, [pc, #384]	; (8003938 <Voltage_Drop_Sense+0x778>)
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80037be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	f67f acfe 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C501<=2.50) || (C502<=2.50) || (C503<=2.50) || (C504<=2.50) || (C505<=2.50) || (C506<=2.50) || (C507<=2.50) ||
 80037ca:	4b5c      	ldr	r3, [pc, #368]	; (800393c <Voltage_Drop_Sense+0x77c>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
    		   (C408<=2.50) || (C409<=2.50) || (C410<=2.50) || (C411<=2.50) || (C412<=2.50) || (C413<=2.50) || (C414<=2.50) ||
 80037d0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80037d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	f67f acf3 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C501<=2.50) || (C502<=2.50) || (C503<=2.50) || (C504<=2.50) || (C505<=2.50) || (C506<=2.50) || (C507<=2.50) ||
 80037e0:	4b57      	ldr	r3, [pc, #348]	; (8003940 <Voltage_Drop_Sense+0x780>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80037ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f2:	f67f ace8 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80037f6:	4b53      	ldr	r3, [pc, #332]	; (8003944 <Voltage_Drop_Sense+0x784>)
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003808:	f67f acdd 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800380c:	4b4e      	ldr	r3, [pc, #312]	; (8003948 <Voltage_Drop_Sense+0x788>)
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	f67f acd2 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003822:	4b4a      	ldr	r3, [pc, #296]	; (800394c <Voltage_Drop_Sense+0x78c>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800382c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003834:	f67f acc7 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003838:	4b45      	ldr	r3, [pc, #276]	; (8003950 <Voltage_Drop_Sense+0x790>)
 800383a:	edd3 7a00 	vldr	s15, [r3]
 800383e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	f67f acbc 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 800384e:	4b41      	ldr	r3, [pc, #260]	; (8003954 <Voltage_Drop_Sense+0x794>)
 8003850:	edd3 7a00 	vldr	s15, [r3]
 8003854:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800385c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003860:	f67f acb1 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C508<=2.50) || (C509<=2.50) || (C510<=2.50) || (C511<=2.50) || (C512<=2.50) || (C513<=2.50) || (C514<=2.50))
 8003864:	4b3c      	ldr	r3, [pc, #240]	; (8003958 <Voltage_Drop_Sense+0x798>)
 8003866:	edd3 7a00 	vldr	s15, [r3]
    		   (C501<=2.50) || (C502<=2.50) || (C503<=2.50) || (C504<=2.50) || (C505<=2.50) || (C506<=2.50) || (C507<=2.50) ||
 800386a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800386e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003876:	f67f aca6 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
    		   (C508<=2.50) || (C509<=2.50) || (C510<=2.50) || (C511<=2.50) || (C512<=2.50) || (C513<=2.50) || (C514<=2.50))
 800387a:	4b38      	ldr	r3, [pc, #224]	; (800395c <Voltage_Drop_Sense+0x79c>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388c:	f67f ac9b 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 8003890:	4b33      	ldr	r3, [pc, #204]	; (8003960 <Voltage_Drop_Sense+0x7a0>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800389a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a2:	f67f ac90 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80038a6:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <Voltage_Drop_Sense+0x7a4>)
 80038a8:	edd3 7a00 	vldr	s15, [r3]
 80038ac:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80038b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b8:	f67f ac85 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <Voltage_Drop_Sense+0x7a8>)
 80038be:	edd3 7a00 	vldr	s15, [r3]
 80038c2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80038c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ce:	f67f ac7a 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80038d2:	4b26      	ldr	r3, [pc, #152]	; (800396c <Voltage_Drop_Sense+0x7ac>)
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80038dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e4:	f67f ac6f 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <Voltage_Drop_Sense+0x7b0>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80038f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fa:	f67f ac64 	bls.w	80031c6 <Voltage_Drop_Sense+0x6>
                   	 }
                 }
    	}

    	stack = 0;
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <Voltage_Drop_Sense+0x7b4>)
 8003900:	2200      	movs	r2, #0
 8003902:	801a      	strh	r2, [r3, #0]
}
 8003904:	bf00      	nop
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200006c0 	.word	0x200006c0
 800390c:	20000adc 	.word	0x20000adc
 8003910:	200002a0 	.word	0x200002a0
 8003914:	200008d4 	.word	0x200008d4
 8003918:	20000af0 	.word	0x20000af0
 800391c:	200009c8 	.word	0x200009c8
 8003920:	20000284 	.word	0x20000284
 8003924:	20000ae0 	.word	0x20000ae0
 8003928:	20000afc 	.word	0x20000afc
 800392c:	200003cc 	.word	0x200003cc
 8003930:	200008f0 	.word	0x200008f0
 8003934:	20000b08 	.word	0x20000b08
 8003938:	200003d8 	.word	0x200003d8
 800393c:	2000040c 	.word	0x2000040c
 8003940:	200009ac 	.word	0x200009ac
 8003944:	20000288 	.word	0x20000288
 8003948:	20000900 	.word	0x20000900
 800394c:	200003e4 	.word	0x200003e4
 8003950:	20000150 	.word	0x20000150
 8003954:	200008fc 	.word	0x200008fc
 8003958:	20000168 	.word	0x20000168
 800395c:	20000910 	.word	0x20000910
 8003960:	20000158 	.word	0x20000158
 8003964:	200003f8 	.word	0x200003f8
 8003968:	2000099c 	.word	0x2000099c
 800396c:	20000258 	.word	0x20000258
 8003970:	20000930 	.word	0x20000930
 8003974:	2000003a 	.word	0x2000003a

08003978 <Control_Cell_UVE>:


void  Control_Cell_UVE()	//control with voltage
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
        // UVR : 2.50V Per Cell -> DSG ON>=2.50
        if((C101<=2.50) || (C102<=2.50) || (C103<=2.50) || (C104<=2.50) || (C105<=2.50) || (C106<=2.50) || (C107<=2.50) ||
 800397c:	4be8      	ldr	r3, [pc, #928]	; (8003d20 <Control_Cell_UVE+0x3a8>)
 800397e:	edd3 7a00 	vldr	s15, [r3]
 8003982:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398e:	f240 8342 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003992:	4be4      	ldr	r3, [pc, #912]	; (8003d24 <Control_Cell_UVE+0x3ac>)
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800399c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	f240 8337 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 80039a8:	4bdf      	ldr	r3, [pc, #892]	; (8003d28 <Control_Cell_UVE+0x3b0>)
 80039aa:	edd3 7a00 	vldr	s15, [r3]
 80039ae:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80039b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ba:	f240 832c 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 80039be:	4bdb      	ldr	r3, [pc, #876]	; (8003d2c <Control_Cell_UVE+0x3b4>)
 80039c0:	edd3 7a00 	vldr	s15, [r3]
 80039c4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80039c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d0:	f240 8321 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 80039d4:	4bd6      	ldr	r3, [pc, #856]	; (8003d30 <Control_Cell_UVE+0x3b8>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80039de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e6:	f240 8316 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 80039ea:	4bd2      	ldr	r3, [pc, #840]	; (8003d34 <Control_Cell_UVE+0x3bc>)
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80039f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fc:	f240 830b 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003a00:	4bcd      	ldr	r3, [pc, #820]	; (8003d38 <Control_Cell_UVE+0x3c0>)
 8003a02:	edd3 7a00 	vldr	s15, [r3]
 8003a06:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a12:	f240 8300 	bls.w	8004016 <Control_Cell_UVE+0x69e>
   		  (C108<=2.50) || (C109<=2.50) || (C110<=2.50) || (C111<=2.50) || (C112<=2.50) || (C113<=2.50) || (C114<=2.50) ||
 8003a16:	4bc9      	ldr	r3, [pc, #804]	; (8003d3c <Control_Cell_UVE+0x3c4>)
 8003a18:	edd3 7a00 	vldr	s15, [r3]
        if((C101<=2.50) || (C102<=2.50) || (C103<=2.50) || (C104<=2.50) || (C105<=2.50) || (C106<=2.50) || (C107<=2.50) ||
 8003a1c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a28:	f240 82f5 	bls.w	8004016 <Control_Cell_UVE+0x69e>
   		  (C108<=2.50) || (C109<=2.50) || (C110<=2.50) || (C111<=2.50) || (C112<=2.50) || (C113<=2.50) || (C114<=2.50) ||
 8003a2c:	4bc4      	ldr	r3, [pc, #784]	; (8003d40 <Control_Cell_UVE+0x3c8>)
 8003a2e:	edd3 7a00 	vldr	s15, [r3]
 8003a32:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	f240 82ea 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003a42:	4bc0      	ldr	r3, [pc, #768]	; (8003d44 <Control_Cell_UVE+0x3cc>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	f240 82df 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003a58:	4bbb      	ldr	r3, [pc, #748]	; (8003d48 <Control_Cell_UVE+0x3d0>)
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	f240 82d4 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003a6e:	4bb7      	ldr	r3, [pc, #732]	; (8003d4c <Control_Cell_UVE+0x3d4>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	f240 82c9 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003a84:	4bb2      	ldr	r3, [pc, #712]	; (8003d50 <Control_Cell_UVE+0x3d8>)
 8003a86:	edd3 7a00 	vldr	s15, [r3]
 8003a8a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	f240 82be 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003a9a:	4bae      	ldr	r3, [pc, #696]	; (8003d54 <Control_Cell_UVE+0x3dc>)
 8003a9c:	edd3 7a00 	vldr	s15, [r3]
 8003aa0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aac:	f240 82b3 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C201<=2.50) || (C202<=2.50) || (C203<=2.50) || (C204<=2.50) || (C205<=2.50) || (C206<=2.50) || (C207<=2.50) ||
 8003ab0:	4ba9      	ldr	r3, [pc, #676]	; (8003d58 <Control_Cell_UVE+0x3e0>)
 8003ab2:	edd3 7a00 	vldr	s15, [r3]
   		  (C108<=2.50) || (C109<=2.50) || (C110<=2.50) || (C111<=2.50) || (C112<=2.50) || (C113<=2.50) || (C114<=2.50) ||
 8003ab6:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac2:	f240 82a8 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C201<=2.50) || (C202<=2.50) || (C203<=2.50) || (C204<=2.50) || (C205<=2.50) || (C206<=2.50) || (C207<=2.50) ||
 8003ac6:	4ba5      	ldr	r3, [pc, #660]	; (8003d5c <Control_Cell_UVE+0x3e4>)
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad8:	f240 829d 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003adc:	4ba0      	ldr	r3, [pc, #640]	; (8003d60 <Control_Cell_UVE+0x3e8>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aee:	f240 8292 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003af2:	4b9c      	ldr	r3, [pc, #624]	; (8003d64 <Control_Cell_UVE+0x3ec>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b04:	f240 8287 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003b08:	4b97      	ldr	r3, [pc, #604]	; (8003d68 <Control_Cell_UVE+0x3f0>)
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1a:	f240 827c 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003b1e:	4b93      	ldr	r3, [pc, #588]	; (8003d6c <Control_Cell_UVE+0x3f4>)
 8003b20:	edd3 7a00 	vldr	s15, [r3]
 8003b24:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b30:	f240 8271 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003b34:	4b8e      	ldr	r3, [pc, #568]	; (8003d70 <Control_Cell_UVE+0x3f8>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b46:	f240 8266 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C208<=2.50) || (C209<=2.50) || (C210<=2.50) || (C211<=2.50) || (C212<=2.50) || (C213<=2.50) || (C214<=2.50) ||
 8003b4a:	4b8a      	ldr	r3, [pc, #552]	; (8003d74 <Control_Cell_UVE+0x3fc>)
 8003b4c:	edd3 7a00 	vldr	s15, [r3]
		  (C201<=2.50) || (C202<=2.50) || (C203<=2.50) || (C204<=2.50) || (C205<=2.50) || (C206<=2.50) || (C207<=2.50) ||
 8003b50:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5c:	f240 825b 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C208<=2.50) || (C209<=2.50) || (C210<=2.50) || (C211<=2.50) || (C212<=2.50) || (C213<=2.50) || (C214<=2.50) ||
 8003b60:	4b85      	ldr	r3, [pc, #532]	; (8003d78 <Control_Cell_UVE+0x400>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b72:	f240 8250 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003b76:	4b81      	ldr	r3, [pc, #516]	; (8003d7c <Control_Cell_UVE+0x404>)
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b88:	f240 8245 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003b8c:	4b7c      	ldr	r3, [pc, #496]	; (8003d80 <Control_Cell_UVE+0x408>)
 8003b8e:	edd3 7a00 	vldr	s15, [r3]
 8003b92:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	f240 823a 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003ba2:	4b78      	ldr	r3, [pc, #480]	; (8003d84 <Control_Cell_UVE+0x40c>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	f240 822f 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003bb8:	4b73      	ldr	r3, [pc, #460]	; (8003d88 <Control_Cell_UVE+0x410>)
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bca:	f240 8224 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003bce:	4b6f      	ldr	r3, [pc, #444]	; (8003d8c <Control_Cell_UVE+0x414>)
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	f240 8219 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C301<=2.50) || (C302<=2.50) || (C303<=2.50) || (C304<=2.50) || (C305<=2.50) || (C306<=2.50) || (C307<=2.50) ||
 8003be4:	4b6a      	ldr	r3, [pc, #424]	; (8003d90 <Control_Cell_UVE+0x418>)
 8003be6:	edd3 7a00 	vldr	s15, [r3]
		  (C208<=2.50) || (C209<=2.50) || (C210<=2.50) || (C211<=2.50) || (C212<=2.50) || (C213<=2.50) || (C214<=2.50) ||
 8003bea:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf6:	f240 820e 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C301<=2.50) || (C302<=2.50) || (C303<=2.50) || (C304<=2.50) || (C305<=2.50) || (C306<=2.50) || (C307<=2.50) ||
 8003bfa:	4b66      	ldr	r3, [pc, #408]	; (8003d94 <Control_Cell_UVE+0x41c>)
 8003bfc:	edd3 7a00 	vldr	s15, [r3]
 8003c00:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	f240 8203 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003c10:	4b61      	ldr	r3, [pc, #388]	; (8003d98 <Control_Cell_UVE+0x420>)
 8003c12:	edd3 7a00 	vldr	s15, [r3]
 8003c16:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	f240 81f8 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003c26:	4b5d      	ldr	r3, [pc, #372]	; (8003d9c <Control_Cell_UVE+0x424>)
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c38:	f240 81ed 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003c3c:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <Control_Cell_UVE+0x428>)
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4e:	f240 81e2 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003c52:	4b54      	ldr	r3, [pc, #336]	; (8003da4 <Control_Cell_UVE+0x42c>)
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c64:	f240 81d7 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003c68:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <Control_Cell_UVE+0x430>)
 8003c6a:	edd3 7a00 	vldr	s15, [r3]
 8003c6e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	f240 81cc 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C308<=2.50) || (C309<=2.50) || (C310<=2.50) || (C311<=2.50) || (C312<=2.50) || (C313<=2.50) || (C314<=2.50) ||
 8003c7e:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <Control_Cell_UVE+0x434>)
 8003c80:	edd3 7a00 	vldr	s15, [r3]
		  (C301<=2.50) || (C302<=2.50) || (C303<=2.50) || (C304<=2.50) || (C305<=2.50) || (C306<=2.50) || (C307<=2.50) ||
 8003c84:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c90:	f240 81c1 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C308<=2.50) || (C309<=2.50) || (C310<=2.50) || (C311<=2.50) || (C312<=2.50) || (C313<=2.50) || (C314<=2.50) ||
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <Control_Cell_UVE+0x438>)
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca6:	f240 81b6 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003caa:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <Control_Cell_UVE+0x43c>)
 8003cac:	edd3 7a00 	vldr	s15, [r3]
 8003cb0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbc:	f240 81ab 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003cc0:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <Control_Cell_UVE+0x440>)
 8003cc2:	edd3 7a00 	vldr	s15, [r3]
 8003cc6:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd2:	f240 81a0 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003cd6:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <Control_Cell_UVE+0x444>)
 8003cd8:	edd3 7a00 	vldr	s15, [r3]
 8003cdc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce8:	f240 8195 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003cec:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <Control_Cell_UVE+0x448>)
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfe:	f240 818a 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003d02:	4b30      	ldr	r3, [pc, #192]	; (8003dc4 <Control_Cell_UVE+0x44c>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d14:	f240 817f 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C401<=2.50) || (C402<=2.50) || (C403<=2.50) || (C404<=2.50) || (C405<=2.50) || (C406<=2.50) || (C407<=2.50) ||
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <Control_Cell_UVE+0x450>)
 8003d1a:	edd3 7a00 	vldr	s15, [r3]
 8003d1e:	e055      	b.n	8003dcc <Control_Cell_UVE+0x454>
 8003d20:	20000170 	.word	0x20000170
 8003d24:	2000014c 	.word	0x2000014c
 8003d28:	200003f0 	.word	0x200003f0
 8003d2c:	200009a4 	.word	0x200009a4
 8003d30:	2000027c 	.word	0x2000027c
 8003d34:	200006b8 	.word	0x200006b8
 8003d38:	20000ae8 	.word	0x20000ae8
 8003d3c:	2000026c 	.word	0x2000026c
 8003d40:	200005dc 	.word	0x200005dc
 8003d44:	200009b0 	.word	0x200009b0
 8003d48:	20000160 	.word	0x20000160
 8003d4c:	200003fc 	.word	0x200003fc
 8003d50:	200009a0 	.word	0x200009a0
 8003d54:	20000278 	.word	0x20000278
 8003d58:	20000274 	.word	0x20000274
 8003d5c:	200005d0 	.word	0x200005d0
 8003d60:	20000af8 	.word	0x20000af8
 8003d64:	200003c4 	.word	0x200003c4
 8003d68:	20000908 	.word	0x20000908
 8003d6c:	2000015c 	.word	0x2000015c
 8003d70:	200003d0 	.word	0x200003d0
 8003d74:	200008e8 	.word	0x200008e8
 8003d78:	200008e4 	.word	0x200008e4
 8003d7c:	20000404 	.word	0x20000404
 8003d80:	2000091c 	.word	0x2000091c
 8003d84:	20000918 	.word	0x20000918
 8003d88:	20000178 	.word	0x20000178
 8003d8c:	200003dc 	.word	0x200003dc
 8003d90:	200008d0 	.word	0x200008d0
 8003d94:	2000017c 	.word	0x2000017c
 8003d98:	200005cc 	.word	0x200005cc
 8003d9c:	20000924 	.word	0x20000924
 8003da0:	20000264 	.word	0x20000264
 8003da4:	200005c8 	.word	0x200005c8
 8003da8:	200009b8 	.word	0x200009b8
 8003dac:	2000090c 	.word	0x2000090c
 8003db0:	20000174 	.word	0x20000174
 8003db4:	20000154 	.word	0x20000154
 8003db8:	200003f4 	.word	0x200003f4
 8003dbc:	20000b0c 	.word	0x20000b0c
 8003dc0:	200008f4 	.word	0x200008f4
 8003dc4:	20000298 	.word	0x20000298
 8003dc8:	2000029c 	.word	0x2000029c
		  (C308<=2.50) || (C309<=2.50) || (C310<=2.50) || (C311<=2.50) || (C312<=2.50) || (C313<=2.50) || (C314<=2.50) ||
 8003dcc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	f240 811d 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C401<=2.50) || (C402<=2.50) || (C403<=2.50) || (C404<=2.50) || (C405<=2.50) || (C406<=2.50) || (C407<=2.50) ||
 8003ddc:	4ba6      	ldr	r3, [pc, #664]	; (8004078 <Control_Cell_UVE+0x700>)
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dee:	f240 8112 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003df2:	4ba2      	ldr	r3, [pc, #648]	; (800407c <Control_Cell_UVE+0x704>)
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e04:	f240 8107 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003e08:	4b9d      	ldr	r3, [pc, #628]	; (8004080 <Control_Cell_UVE+0x708>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	f240 80fc 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003e1e:	4b99      	ldr	r3, [pc, #612]	; (8004084 <Control_Cell_UVE+0x70c>)
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e30:	f240 80f1 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003e34:	4b94      	ldr	r3, [pc, #592]	; (8004088 <Control_Cell_UVE+0x710>)
 8003e36:	edd3 7a00 	vldr	s15, [r3]
 8003e3a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	f240 80e6 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003e4a:	4b90      	ldr	r3, [pc, #576]	; (800408c <Control_Cell_UVE+0x714>)
 8003e4c:	edd3 7a00 	vldr	s15, [r3]
 8003e50:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5c:	f240 80db 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C408<=2.50) || (C409<=2.50) || (C410<=2.50) || (C411<=2.50) || (C412<=2.50) || (C413<=2.50) || (C414<=2.50) ||
 8003e60:	4b8b      	ldr	r3, [pc, #556]	; (8004090 <Control_Cell_UVE+0x718>)
 8003e62:	edd3 7a00 	vldr	s15, [r3]
		  (C401<=2.50) || (C402<=2.50) || (C403<=2.50) || (C404<=2.50) || (C405<=2.50) || (C406<=2.50) || (C407<=2.50) ||
 8003e66:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e72:	f240 80d0 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C408<=2.50) || (C409<=2.50) || (C410<=2.50) || (C411<=2.50) || (C412<=2.50) || (C413<=2.50) || (C414<=2.50) ||
 8003e76:	4b87      	ldr	r3, [pc, #540]	; (8004094 <Control_Cell_UVE+0x71c>)
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e88:	f240 80c5 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003e8c:	4b82      	ldr	r3, [pc, #520]	; (8004098 <Control_Cell_UVE+0x720>)
 8003e8e:	edd3 7a00 	vldr	s15, [r3]
 8003e92:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9e:	f240 80ba 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003ea2:	4b7e      	ldr	r3, [pc, #504]	; (800409c <Control_Cell_UVE+0x724>)
 8003ea4:	edd3 7a00 	vldr	s15, [r3]
 8003ea8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	f240 80af 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003eb8:	4b79      	ldr	r3, [pc, #484]	; (80040a0 <Control_Cell_UVE+0x728>)
 8003eba:	edd3 7a00 	vldr	s15, [r3]
 8003ebe:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eca:	f240 80a4 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003ece:	4b75      	ldr	r3, [pc, #468]	; (80040a4 <Control_Cell_UVE+0x72c>)
 8003ed0:	edd3 7a00 	vldr	s15, [r3]
 8003ed4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	f240 8099 	bls.w	8004016 <Control_Cell_UVE+0x69e>
 8003ee4:	4b70      	ldr	r3, [pc, #448]	; (80040a8 <Control_Cell_UVE+0x730>)
 8003ee6:	edd3 7a00 	vldr	s15, [r3]
 8003eea:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef6:	f240 808e 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C501<=2.50) || (C502<=2.50) || (C503<=2.50) || (C504<=2.50) || (C505<=2.50) || (C506<=2.50) || (C507<=2.50) ||
 8003efa:	4b6c      	ldr	r3, [pc, #432]	; (80040ac <Control_Cell_UVE+0x734>)
 8003efc:	edd3 7a00 	vldr	s15, [r3]
		  (C408<=2.50) || (C409<=2.50) || (C410<=2.50) || (C411<=2.50) || (C412<=2.50) || (C413<=2.50) || (C414<=2.50) ||
 8003f00:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0c:	f240 8083 	bls.w	8004016 <Control_Cell_UVE+0x69e>
		  (C501<=2.50) || (C502<=2.50) || (C503<=2.50) || (C504<=2.50) || (C505<=2.50) || (C506<=2.50) || (C507<=2.50) ||
 8003f10:	4b67      	ldr	r3, [pc, #412]	; (80040b0 <Control_Cell_UVE+0x738>)
 8003f12:	edd3 7a00 	vldr	s15, [r3]
 8003f16:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f22:	d978      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8003f24:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <Control_Cell_UVE+0x73c>)
 8003f26:	edd3 7a00 	vldr	s15, [r3]
 8003f2a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f36:	d96e      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8003f38:	4b5f      	ldr	r3, [pc, #380]	; (80040b8 <Control_Cell_UVE+0x740>)
 8003f3a:	edd3 7a00 	vldr	s15, [r3]
 8003f3e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	d964      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8003f4c:	4b5b      	ldr	r3, [pc, #364]	; (80040bc <Control_Cell_UVE+0x744>)
 8003f4e:	edd3 7a00 	vldr	s15, [r3]
 8003f52:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	d95a      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8003f60:	4b57      	ldr	r3, [pc, #348]	; (80040c0 <Control_Cell_UVE+0x748>)
 8003f62:	edd3 7a00 	vldr	s15, [r3]
 8003f66:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f72:	d950      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8003f74:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <Control_Cell_UVE+0x74c>)
 8003f76:	edd3 7a00 	vldr	s15, [r3]
 8003f7a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f86:	d946      	bls.n	8004016 <Control_Cell_UVE+0x69e>
		  (C508<=2.50) || (C509<=2.50) || (C510<=2.50) || (C511<=2.50) || (C512<=2.50) || (C513<=2.50) || (C514<=2.50))
 8003f88:	4b4f      	ldr	r3, [pc, #316]	; (80040c8 <Control_Cell_UVE+0x750>)
 8003f8a:	edd3 7a00 	vldr	s15, [r3]
		  (C501<=2.50) || (C502<=2.50) || (C503<=2.50) || (C504<=2.50) || (C505<=2.50) || (C506<=2.50) || (C507<=2.50) ||
 8003f8e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9a:	d93c      	bls.n	8004016 <Control_Cell_UVE+0x69e>
		  (C508<=2.50) || (C509<=2.50) || (C510<=2.50) || (C511<=2.50) || (C512<=2.50) || (C513<=2.50) || (C514<=2.50))
 8003f9c:	4b4b      	ldr	r3, [pc, #300]	; (80040cc <Control_Cell_UVE+0x754>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fae:	d932      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8003fb0:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <Control_Cell_UVE+0x758>)
 8003fb2:	edd3 7a00 	vldr	s15, [r3]
 8003fb6:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc2:	d928      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <Control_Cell_UVE+0x75c>)
 8003fc6:	edd3 7a00 	vldr	s15, [r3]
 8003fca:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd6:	d91e      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8003fd8:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <Control_Cell_UVE+0x760>)
 8003fda:	edd3 7a00 	vldr	s15, [r3]
 8003fde:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	d914      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8003fec:	4b3b      	ldr	r3, [pc, #236]	; (80040dc <Control_Cell_UVE+0x764>)
 8003fee:	edd3 7a00 	vldr	s15, [r3]
 8003ff2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffe:	d90a      	bls.n	8004016 <Control_Cell_UVE+0x69e>
 8004000:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <Control_Cell_UVE+0x768>)
 8004002:	edd3 7a00 	vldr	s15, [r3]
 8004006:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800400a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d900      	bls.n	8004016 <Control_Cell_UVE+0x69e>
            		HAL_Delay(200);
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
            		HAL_Delay(3000);
                }
           }
}
 8004014:	e02f      	b.n	8004076 <Control_Cell_UVE+0x6fe>
        		HAL_GPIO_WritePin(DSG_GPIO_Port, DSG_Pin, GPIO_PIN_RESET);//(1)
 8004016:	2200      	movs	r2, #0
 8004018:	2102      	movs	r1, #2
 800401a:	4832      	ldr	r0, [pc, #200]	; (80040e4 <Control_Cell_UVE+0x76c>)
 800401c:	f003 fb4e 	bl	80076bc <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin, GPIO_PIN_RESET);//(2)
 8004020:	2200      	movs	r2, #0
 8004022:	2101      	movs	r1, #1
 8004024:	482f      	ldr	r0, [pc, #188]	; (80040e4 <Control_Cell_UVE+0x76c>)
 8004026:	f003 fb49 	bl	80076bc <HAL_GPIO_WritePin>
                	Reading_Voltage(); //SLAVEBMSA + B + C + D + E
 800402a:	f7fd f811 	bl	8001050 <Reading_Voltage>
                	Save_voltage(); //cell array
 800402e:	f7fe fccd 	bl	80029cc <Save_voltage>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004032:	2201      	movs	r2, #1
 8004034:	2104      	movs	r1, #4
 8004036:	482b      	ldr	r0, [pc, #172]	; (80040e4 <Control_Cell_UVE+0x76c>)
 8004038:	f003 fb40 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(200);
 800403c:	20c8      	movs	r0, #200	; 0xc8
 800403e:	f001 fa15 	bl	800546c <HAL_Delay>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004042:	2200      	movs	r2, #0
 8004044:	2104      	movs	r1, #4
 8004046:	4827      	ldr	r0, [pc, #156]	; (80040e4 <Control_Cell_UVE+0x76c>)
 8004048:	f003 fb38 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(200);
 800404c:	20c8      	movs	r0, #200	; 0xc8
 800404e:	f001 fa0d 	bl	800546c <HAL_Delay>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004052:	2201      	movs	r2, #1
 8004054:	2104      	movs	r1, #4
 8004056:	4823      	ldr	r0, [pc, #140]	; (80040e4 <Control_Cell_UVE+0x76c>)
 8004058:	f003 fb30 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(200);
 800405c:	20c8      	movs	r0, #200	; 0xc8
 800405e:	f001 fa05 	bl	800546c <HAL_Delay>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004062:	2200      	movs	r2, #0
 8004064:	2104      	movs	r1, #4
 8004066:	481f      	ldr	r0, [pc, #124]	; (80040e4 <Control_Cell_UVE+0x76c>)
 8004068:	f003 fb28 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(3000);
 800406c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004070:	f001 f9fc 	bl	800546c <HAL_Delay>
                	Reading_Voltage(); //SLAVEBMSA + B + C + D + E
 8004074:	e7d9      	b.n	800402a <Control_Cell_UVE+0x6b2>
}
 8004076:	bd80      	pop	{r7, pc}
 8004078:	200006c0 	.word	0x200006c0
 800407c:	20000adc 	.word	0x20000adc
 8004080:	200002a0 	.word	0x200002a0
 8004084:	200008d4 	.word	0x200008d4
 8004088:	20000af0 	.word	0x20000af0
 800408c:	200009c8 	.word	0x200009c8
 8004090:	20000284 	.word	0x20000284
 8004094:	20000ae0 	.word	0x20000ae0
 8004098:	20000afc 	.word	0x20000afc
 800409c:	200003cc 	.word	0x200003cc
 80040a0:	200008f0 	.word	0x200008f0
 80040a4:	20000b08 	.word	0x20000b08
 80040a8:	200003d8 	.word	0x200003d8
 80040ac:	2000040c 	.word	0x2000040c
 80040b0:	200009ac 	.word	0x200009ac
 80040b4:	20000288 	.word	0x20000288
 80040b8:	20000900 	.word	0x20000900
 80040bc:	200003e4 	.word	0x200003e4
 80040c0:	20000150 	.word	0x20000150
 80040c4:	200008fc 	.word	0x200008fc
 80040c8:	20000168 	.word	0x20000168
 80040cc:	20000910 	.word	0x20000910
 80040d0:	20000158 	.word	0x20000158
 80040d4:	200003f8 	.word	0x200003f8
 80040d8:	2000099c 	.word	0x2000099c
 80040dc:	20000258 	.word	0x20000258
 80040e0:	20000930 	.word	0x20000930
 80040e4:	48000400 	.word	0x48000400

080040e8 <Control_Cell_OVE>:

void Control_Cell_OVE()
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
        // OVR : 4.20V Per Cell -> CHG ON>=4.20
        if((C101>=4.20) || (C102>=4.20) || (C103>=4.20) || (C104>=4.20) || (C105>=4.20) || (C106>=4.20) || (C107>=4.20) ||
 80040ec:	4bc6      	ldr	r3, [pc, #792]	; (8004408 <Control_Cell_OVE+0x320>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fc f9d5 	bl	80004a0 <__aeabi_f2d>
 80040f6:	a3c2      	add	r3, pc, #776	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc fa9c 	bl	8000638 <__aeabi_dcmpge>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 843d 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004108:	4bc0      	ldr	r3, [pc, #768]	; (800440c <Control_Cell_OVE+0x324>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7fc f9c7 	bl	80004a0 <__aeabi_f2d>
 8004112:	a3bb      	add	r3, pc, #748	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f7fc fa8e 	bl	8000638 <__aeabi_dcmpge>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 842f 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004124:	4bba      	ldr	r3, [pc, #744]	; (8004410 <Control_Cell_OVE+0x328>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7fc f9b9 	bl	80004a0 <__aeabi_f2d>
 800412e:	a3b4      	add	r3, pc, #720	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f7fc fa80 	bl	8000638 <__aeabi_dcmpge>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 8421 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004140:	4bb4      	ldr	r3, [pc, #720]	; (8004414 <Control_Cell_OVE+0x32c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fc f9ab 	bl	80004a0 <__aeabi_f2d>
 800414a:	a3ad      	add	r3, pc, #692	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f7fc fa72 	bl	8000638 <__aeabi_dcmpge>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 8413 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 800415c:	4bae      	ldr	r3, [pc, #696]	; (8004418 <Control_Cell_OVE+0x330>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc f99d 	bl	80004a0 <__aeabi_f2d>
 8004166:	a3a6      	add	r3, pc, #664	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f7fc fa64 	bl	8000638 <__aeabi_dcmpge>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 8405 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004178:	4ba8      	ldr	r3, [pc, #672]	; (800441c <Control_Cell_OVE+0x334>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc f98f 	bl	80004a0 <__aeabi_f2d>
 8004182:	a39f      	add	r3, pc, #636	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f7fc fa56 	bl	8000638 <__aeabi_dcmpge>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 83f7 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004194:	4ba2      	ldr	r3, [pc, #648]	; (8004420 <Control_Cell_OVE+0x338>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc f981 	bl	80004a0 <__aeabi_f2d>
 800419e:	a398      	add	r3, pc, #608	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f7fc fa48 	bl	8000638 <__aeabi_dcmpge>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 83e9 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C108>=4.20) || (C109>=4.20) || (C110>=4.20) || (C111>=4.20) || (C112>=4.20) || (C113>=4.20) || (C114>=4.20) ||
 80041b0:	4b9c      	ldr	r3, [pc, #624]	; (8004424 <Control_Cell_OVE+0x33c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc f973 	bl	80004a0 <__aeabi_f2d>
        if((C101>=4.20) || (C102>=4.20) || (C103>=4.20) || (C104>=4.20) || (C105>=4.20) || (C106>=4.20) || (C107>=4.20) ||
 80041ba:	a391      	add	r3, pc, #580	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc fa3a 	bl	8000638 <__aeabi_dcmpge>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 83db 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C108>=4.20) || (C109>=4.20) || (C110>=4.20) || (C111>=4.20) || (C112>=4.20) || (C113>=4.20) || (C114>=4.20) ||
 80041cc:	4b96      	ldr	r3, [pc, #600]	; (8004428 <Control_Cell_OVE+0x340>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc f965 	bl	80004a0 <__aeabi_f2d>
 80041d6:	a38a      	add	r3, pc, #552	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc fa2c 	bl	8000638 <__aeabi_dcmpge>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 83cd 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80041e8:	4b90      	ldr	r3, [pc, #576]	; (800442c <Control_Cell_OVE+0x344>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc f957 	bl	80004a0 <__aeabi_f2d>
 80041f2:	a383      	add	r3, pc, #524	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fc fa1e 	bl	8000638 <__aeabi_dcmpge>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 83bf 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004204:	4b8a      	ldr	r3, [pc, #552]	; (8004430 <Control_Cell_OVE+0x348>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fc f949 	bl	80004a0 <__aeabi_f2d>
 800420e:	a37c      	add	r3, pc, #496	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f7fc fa10 	bl	8000638 <__aeabi_dcmpge>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 83b1 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004220:	4b84      	ldr	r3, [pc, #528]	; (8004434 <Control_Cell_OVE+0x34c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc f93b 	bl	80004a0 <__aeabi_f2d>
 800422a:	a375      	add	r3, pc, #468	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fc fa02 	bl	8000638 <__aeabi_dcmpge>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 83a3 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 800423c:	4b7e      	ldr	r3, [pc, #504]	; (8004438 <Control_Cell_OVE+0x350>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc f92d 	bl	80004a0 <__aeabi_f2d>
 8004246:	a36e      	add	r3, pc, #440	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fc f9f4 	bl	8000638 <__aeabi_dcmpge>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 8395 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004258:	4b78      	ldr	r3, [pc, #480]	; (800443c <Control_Cell_OVE+0x354>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc f91f 	bl	80004a0 <__aeabi_f2d>
 8004262:	a367      	add	r3, pc, #412	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f7fc f9e6 	bl	8000638 <__aeabi_dcmpge>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 8387 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C201>=4.20) || (C202>=4.20) || (C203>=4.20) || (C204>=4.20) || (C205>=4.20) || (C206>=4.20) || (C207>=4.20) ||
 8004274:	4b72      	ldr	r3, [pc, #456]	; (8004440 <Control_Cell_OVE+0x358>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7fc f911 	bl	80004a0 <__aeabi_f2d>
    		(C108>=4.20) || (C109>=4.20) || (C110>=4.20) || (C111>=4.20) || (C112>=4.20) || (C113>=4.20) || (C114>=4.20) ||
 800427e:	a360      	add	r3, pc, #384	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f7fc f9d8 	bl	8000638 <__aeabi_dcmpge>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 8379 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C201>=4.20) || (C202>=4.20) || (C203>=4.20) || (C204>=4.20) || (C205>=4.20) || (C206>=4.20) || (C207>=4.20) ||
 8004290:	4b6c      	ldr	r3, [pc, #432]	; (8004444 <Control_Cell_OVE+0x35c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7fc f903 	bl	80004a0 <__aeabi_f2d>
 800429a:	a359      	add	r3, pc, #356	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f7fc f9ca 	bl	8000638 <__aeabi_dcmpge>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f040 836b 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80042ac:	4b66      	ldr	r3, [pc, #408]	; (8004448 <Control_Cell_OVE+0x360>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fc f8f5 	bl	80004a0 <__aeabi_f2d>
 80042b6:	a352      	add	r3, pc, #328	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f7fc f9bc 	bl	8000638 <__aeabi_dcmpge>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 835d 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80042c8:	4b60      	ldr	r3, [pc, #384]	; (800444c <Control_Cell_OVE+0x364>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fc f8e7 	bl	80004a0 <__aeabi_f2d>
 80042d2:	a34b      	add	r3, pc, #300	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f7fc f9ae 	bl	8000638 <__aeabi_dcmpge>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 834f 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80042e4:	4b5a      	ldr	r3, [pc, #360]	; (8004450 <Control_Cell_OVE+0x368>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fc f8d9 	bl	80004a0 <__aeabi_f2d>
 80042ee:	a344      	add	r3, pc, #272	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f7fc f9a0 	bl	8000638 <__aeabi_dcmpge>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f040 8341 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004300:	4b54      	ldr	r3, [pc, #336]	; (8004454 <Control_Cell_OVE+0x36c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc f8cb 	bl	80004a0 <__aeabi_f2d>
 800430a:	a33d      	add	r3, pc, #244	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f7fc f992 	bl	8000638 <__aeabi_dcmpge>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 8333 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 800431c:	4b4e      	ldr	r3, [pc, #312]	; (8004458 <Control_Cell_OVE+0x370>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7fc f8bd 	bl	80004a0 <__aeabi_f2d>
 8004326:	a336      	add	r3, pc, #216	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fc f984 	bl	8000638 <__aeabi_dcmpge>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	f040 8325 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C208>=4.20) || (C209>=4.20) || (C210>=4.20) || (C211>=4.20) || (C212>=4.20) || (C213>=4.20) || (C214>=4.20) ||
 8004338:	4b48      	ldr	r3, [pc, #288]	; (800445c <Control_Cell_OVE+0x374>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc f8af 	bl	80004a0 <__aeabi_f2d>
    		(C201>=4.20) || (C202>=4.20) || (C203>=4.20) || (C204>=4.20) || (C205>=4.20) || (C206>=4.20) || (C207>=4.20) ||
 8004342:	a32f      	add	r3, pc, #188	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f7fc f976 	bl	8000638 <__aeabi_dcmpge>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 8317 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C208>=4.20) || (C209>=4.20) || (C210>=4.20) || (C211>=4.20) || (C212>=4.20) || (C213>=4.20) || (C214>=4.20) ||
 8004354:	4b42      	ldr	r3, [pc, #264]	; (8004460 <Control_Cell_OVE+0x378>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7fc f8a1 	bl	80004a0 <__aeabi_f2d>
 800435e:	a328      	add	r3, pc, #160	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f7fc f968 	bl	8000638 <__aeabi_dcmpge>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 8309 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004370:	4b3c      	ldr	r3, [pc, #240]	; (8004464 <Control_Cell_OVE+0x37c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fc f893 	bl	80004a0 <__aeabi_f2d>
 800437a:	a321      	add	r3, pc, #132	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fc f95a 	bl	8000638 <__aeabi_dcmpge>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 82fb 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 800438c:	4b36      	ldr	r3, [pc, #216]	; (8004468 <Control_Cell_OVE+0x380>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc f885 	bl	80004a0 <__aeabi_f2d>
 8004396:	a31a      	add	r3, pc, #104	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fc f94c 	bl	8000638 <__aeabi_dcmpge>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f040 82ed 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80043a8:	4b30      	ldr	r3, [pc, #192]	; (800446c <Control_Cell_OVE+0x384>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f877 	bl	80004a0 <__aeabi_f2d>
 80043b2:	a313      	add	r3, pc, #76	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc f93e 	bl	8000638 <__aeabi_dcmpge>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f040 82df 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80043c4:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <Control_Cell_OVE+0x388>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc f869 	bl	80004a0 <__aeabi_f2d>
 80043ce:	a30c      	add	r3, pc, #48	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f7fc f930 	bl	8000638 <__aeabi_dcmpge>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 82d1 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <Control_Cell_OVE+0x38c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fc f85b 	bl	80004a0 <__aeabi_f2d>
 80043ea:	a305      	add	r3, pc, #20	; (adr r3, 8004400 <Control_Cell_OVE+0x318>)
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f7fc f922 	bl	8000638 <__aeabi_dcmpge>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	e03e      	b.n	8004478 <Control_Cell_OVE+0x390>
 80043fa:	bf00      	nop
 80043fc:	f3af 8000 	nop.w
 8004400:	cccccccd 	.word	0xcccccccd
 8004404:	4010cccc 	.word	0x4010cccc
 8004408:	20000170 	.word	0x20000170
 800440c:	2000014c 	.word	0x2000014c
 8004410:	200003f0 	.word	0x200003f0
 8004414:	200009a4 	.word	0x200009a4
 8004418:	2000027c 	.word	0x2000027c
 800441c:	200006b8 	.word	0x200006b8
 8004420:	20000ae8 	.word	0x20000ae8
 8004424:	2000026c 	.word	0x2000026c
 8004428:	200005dc 	.word	0x200005dc
 800442c:	200009b0 	.word	0x200009b0
 8004430:	20000160 	.word	0x20000160
 8004434:	200003fc 	.word	0x200003fc
 8004438:	200009a0 	.word	0x200009a0
 800443c:	20000278 	.word	0x20000278
 8004440:	20000274 	.word	0x20000274
 8004444:	200005d0 	.word	0x200005d0
 8004448:	20000af8 	.word	0x20000af8
 800444c:	200003c4 	.word	0x200003c4
 8004450:	20000908 	.word	0x20000908
 8004454:	2000015c 	.word	0x2000015c
 8004458:	200003d0 	.word	0x200003d0
 800445c:	200008e8 	.word	0x200008e8
 8004460:	200008e4 	.word	0x200008e4
 8004464:	20000404 	.word	0x20000404
 8004468:	2000091c 	.word	0x2000091c
 800446c:	20000918 	.word	0x20000918
 8004470:	20000178 	.word	0x20000178
 8004474:	200003dc 	.word	0x200003dc
 8004478:	f040 8283 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C301>=4.20) || (C302>=4.20) || (C303>=4.20) || (C304>=4.20) || (C305>=4.20) || (C306>=4.20) || (C307>=4.20) ||
 800447c:	4bc6      	ldr	r3, [pc, #792]	; (8004798 <Control_Cell_OVE+0x6b0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7fc f80d 	bl	80004a0 <__aeabi_f2d>
    		(C208>=4.20) || (C209>=4.20) || (C210>=4.20) || (C211>=4.20) || (C212>=4.20) || (C213>=4.20) || (C214>=4.20) ||
 8004486:	a3c2      	add	r3, pc, #776	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f7fc f8d4 	bl	8000638 <__aeabi_dcmpge>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 8275 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C301>=4.20) || (C302>=4.20) || (C303>=4.20) || (C304>=4.20) || (C305>=4.20) || (C306>=4.20) || (C307>=4.20) ||
 8004498:	4bc0      	ldr	r3, [pc, #768]	; (800479c <Control_Cell_OVE+0x6b4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fb ffff 	bl	80004a0 <__aeabi_f2d>
 80044a2:	a3bb      	add	r3, pc, #748	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f7fc f8c6 	bl	8000638 <__aeabi_dcmpge>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f040 8267 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80044b4:	4bba      	ldr	r3, [pc, #744]	; (80047a0 <Control_Cell_OVE+0x6b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fb fff1 	bl	80004a0 <__aeabi_f2d>
 80044be:	a3b4      	add	r3, pc, #720	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f8b8 	bl	8000638 <__aeabi_dcmpge>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 8259 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80044d0:	4bb4      	ldr	r3, [pc, #720]	; (80047a4 <Control_Cell_OVE+0x6bc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fb ffe3 	bl	80004a0 <__aeabi_f2d>
 80044da:	a3ad      	add	r3, pc, #692	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f7fc f8aa 	bl	8000638 <__aeabi_dcmpge>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f040 824b 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80044ec:	4bae      	ldr	r3, [pc, #696]	; (80047a8 <Control_Cell_OVE+0x6c0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fb ffd5 	bl	80004a0 <__aeabi_f2d>
 80044f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fc f89c 	bl	8000638 <__aeabi_dcmpge>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 823d 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004508:	4ba8      	ldr	r3, [pc, #672]	; (80047ac <Control_Cell_OVE+0x6c4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb ffc7 	bl	80004a0 <__aeabi_f2d>
 8004512:	a39f      	add	r3, pc, #636	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fc f88e 	bl	8000638 <__aeabi_dcmpge>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	f040 822f 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004524:	4ba2      	ldr	r3, [pc, #648]	; (80047b0 <Control_Cell_OVE+0x6c8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7fb ffb9 	bl	80004a0 <__aeabi_f2d>
 800452e:	a398      	add	r3, pc, #608	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fc f880 	bl	8000638 <__aeabi_dcmpge>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	f040 8221 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C308>=4.20) || (C309>=4.20) || (C310>=4.20) || (C311>=4.20) || (C312>=4.20) || (C313>=4.20) || (C314>=4.20) ||
 8004540:	4b9c      	ldr	r3, [pc, #624]	; (80047b4 <Control_Cell_OVE+0x6cc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7fb ffab 	bl	80004a0 <__aeabi_f2d>
    		(C301>=4.20) || (C302>=4.20) || (C303>=4.20) || (C304>=4.20) || (C305>=4.20) || (C306>=4.20) || (C307>=4.20) ||
 800454a:	a391      	add	r3, pc, #580	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f7fc f872 	bl	8000638 <__aeabi_dcmpge>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 8213 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C308>=4.20) || (C309>=4.20) || (C310>=4.20) || (C311>=4.20) || (C312>=4.20) || (C313>=4.20) || (C314>=4.20) ||
 800455c:	4b96      	ldr	r3, [pc, #600]	; (80047b8 <Control_Cell_OVE+0x6d0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fb ff9d 	bl	80004a0 <__aeabi_f2d>
 8004566:	a38a      	add	r3, pc, #552	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f7fc f864 	bl	8000638 <__aeabi_dcmpge>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 8205 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004578:	4b90      	ldr	r3, [pc, #576]	; (80047bc <Control_Cell_OVE+0x6d4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fb ff8f 	bl	80004a0 <__aeabi_f2d>
 8004582:	a383      	add	r3, pc, #524	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f7fc f856 	bl	8000638 <__aeabi_dcmpge>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 81f7 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004594:	4b8a      	ldr	r3, [pc, #552]	; (80047c0 <Control_Cell_OVE+0x6d8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fb ff81 	bl	80004a0 <__aeabi_f2d>
 800459e:	a37c      	add	r3, pc, #496	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f7fc f848 	bl	8000638 <__aeabi_dcmpge>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 81e9 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80045b0:	4b84      	ldr	r3, [pc, #528]	; (80047c4 <Control_Cell_OVE+0x6dc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fb ff73 	bl	80004a0 <__aeabi_f2d>
 80045ba:	a375      	add	r3, pc, #468	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f7fc f83a 	bl	8000638 <__aeabi_dcmpge>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f040 81db 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80045cc:	4b7e      	ldr	r3, [pc, #504]	; (80047c8 <Control_Cell_OVE+0x6e0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb ff65 	bl	80004a0 <__aeabi_f2d>
 80045d6:	a36e      	add	r3, pc, #440	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f7fc f82c 	bl	8000638 <__aeabi_dcmpge>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 81cd 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80045e8:	4b78      	ldr	r3, [pc, #480]	; (80047cc <Control_Cell_OVE+0x6e4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fb ff57 	bl	80004a0 <__aeabi_f2d>
 80045f2:	a367      	add	r3, pc, #412	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fc f81e 	bl	8000638 <__aeabi_dcmpge>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 81bf 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C401>=4.20) || (C402>=4.20) || (C403>=4.20) || (C404>=4.20) || (C405>=4.20) || (C406>=4.20) || (C407>=4.20) ||
 8004604:	4b72      	ldr	r3, [pc, #456]	; (80047d0 <Control_Cell_OVE+0x6e8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb ff49 	bl	80004a0 <__aeabi_f2d>
    		(C308>=4.20) || (C309>=4.20) || (C310>=4.20) || (C311>=4.20) || (C312>=4.20) || (C313>=4.20) || (C314>=4.20) ||
 800460e:	a360      	add	r3, pc, #384	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f7fc f810 	bl	8000638 <__aeabi_dcmpge>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 81b1 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C401>=4.20) || (C402>=4.20) || (C403>=4.20) || (C404>=4.20) || (C405>=4.20) || (C406>=4.20) || (C407>=4.20) ||
 8004620:	4b6c      	ldr	r3, [pc, #432]	; (80047d4 <Control_Cell_OVE+0x6ec>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb ff3b 	bl	80004a0 <__aeabi_f2d>
 800462a:	a359      	add	r3, pc, #356	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f7fc f802 	bl	8000638 <__aeabi_dcmpge>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 81a3 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 800463c:	4b66      	ldr	r3, [pc, #408]	; (80047d8 <Control_Cell_OVE+0x6f0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f7fb ff2d 	bl	80004a0 <__aeabi_f2d>
 8004646:	a352      	add	r3, pc, #328	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb fff4 	bl	8000638 <__aeabi_dcmpge>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 8195 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004658:	4b60      	ldr	r3, [pc, #384]	; (80047dc <Control_Cell_OVE+0x6f4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fb ff1f 	bl	80004a0 <__aeabi_f2d>
 8004662:	a34b      	add	r3, pc, #300	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f7fb ffe6 	bl	8000638 <__aeabi_dcmpge>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 8187 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004674:	4b5a      	ldr	r3, [pc, #360]	; (80047e0 <Control_Cell_OVE+0x6f8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7fb ff11 	bl	80004a0 <__aeabi_f2d>
 800467e:	a344      	add	r3, pc, #272	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fb ffd8 	bl	8000638 <__aeabi_dcmpge>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	f040 8179 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004690:	4b54      	ldr	r3, [pc, #336]	; (80047e4 <Control_Cell_OVE+0x6fc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f7fb ff03 	bl	80004a0 <__aeabi_f2d>
 800469a:	a33d      	add	r3, pc, #244	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f7fb ffca 	bl	8000638 <__aeabi_dcmpge>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f040 816b 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 80046ac:	4b4e      	ldr	r3, [pc, #312]	; (80047e8 <Control_Cell_OVE+0x700>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fb fef5 	bl	80004a0 <__aeabi_f2d>
 80046b6:	a336      	add	r3, pc, #216	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f7fb ffbc 	bl	8000638 <__aeabi_dcmpge>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 815d 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C408>=4.20) || (C409>=4.20) || (C410>=4.20) || (C411>=4.20) || (C412>=4.20) || (C413>=4.20) || (C414>=4.20) ||
 80046c8:	4b48      	ldr	r3, [pc, #288]	; (80047ec <Control_Cell_OVE+0x704>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fb fee7 	bl	80004a0 <__aeabi_f2d>
    		(C401>=4.20) || (C402>=4.20) || (C403>=4.20) || (C404>=4.20) || (C405>=4.20) || (C406>=4.20) || (C407>=4.20) ||
 80046d2:	a32f      	add	r3, pc, #188	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f7fb ffae 	bl	8000638 <__aeabi_dcmpge>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 814f 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C408>=4.20) || (C409>=4.20) || (C410>=4.20) || (C411>=4.20) || (C412>=4.20) || (C413>=4.20) || (C414>=4.20) ||
 80046e4:	4b42      	ldr	r3, [pc, #264]	; (80047f0 <Control_Cell_OVE+0x708>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fb fed9 	bl	80004a0 <__aeabi_f2d>
 80046ee:	a328      	add	r3, pc, #160	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f7fb ffa0 	bl	8000638 <__aeabi_dcmpge>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f040 8141 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004700:	4b3c      	ldr	r3, [pc, #240]	; (80047f4 <Control_Cell_OVE+0x70c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7fb fecb 	bl	80004a0 <__aeabi_f2d>
 800470a:	a321      	add	r3, pc, #132	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f7fb ff92 	bl	8000638 <__aeabi_dcmpge>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	f040 8133 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 800471c:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <Control_Cell_OVE+0x710>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7fb febd 	bl	80004a0 <__aeabi_f2d>
 8004726:	a31a      	add	r3, pc, #104	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fb ff84 	bl	8000638 <__aeabi_dcmpge>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 8125 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004738:	4b30      	ldr	r3, [pc, #192]	; (80047fc <Control_Cell_OVE+0x714>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7fb feaf 	bl	80004a0 <__aeabi_f2d>
 8004742:	a313      	add	r3, pc, #76	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f7fb ff76 	bl	8000638 <__aeabi_dcmpge>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 8117 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004754:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <Control_Cell_OVE+0x718>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb fea1 	bl	80004a0 <__aeabi_f2d>
 800475e:	a30c      	add	r3, pc, #48	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f7fb ff68 	bl	8000638 <__aeabi_dcmpge>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	f040 8109 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <Control_Cell_OVE+0x71c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fe93 	bl	80004a0 <__aeabi_f2d>
 800477a:	a305      	add	r3, pc, #20	; (adr r3, 8004790 <Control_Cell_OVE+0x6a8>)
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	f7fb ff5a 	bl	8000638 <__aeabi_dcmpge>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	e03e      	b.n	8004808 <Control_Cell_OVE+0x720>
 800478a:	bf00      	nop
 800478c:	f3af 8000 	nop.w
 8004790:	cccccccd 	.word	0xcccccccd
 8004794:	4010cccc 	.word	0x4010cccc
 8004798:	200008d0 	.word	0x200008d0
 800479c:	2000017c 	.word	0x2000017c
 80047a0:	200005cc 	.word	0x200005cc
 80047a4:	20000924 	.word	0x20000924
 80047a8:	20000264 	.word	0x20000264
 80047ac:	200005c8 	.word	0x200005c8
 80047b0:	200009b8 	.word	0x200009b8
 80047b4:	2000090c 	.word	0x2000090c
 80047b8:	20000174 	.word	0x20000174
 80047bc:	20000154 	.word	0x20000154
 80047c0:	200003f4 	.word	0x200003f4
 80047c4:	20000b0c 	.word	0x20000b0c
 80047c8:	200008f4 	.word	0x200008f4
 80047cc:	20000298 	.word	0x20000298
 80047d0:	2000029c 	.word	0x2000029c
 80047d4:	200006c0 	.word	0x200006c0
 80047d8:	20000adc 	.word	0x20000adc
 80047dc:	200002a0 	.word	0x200002a0
 80047e0:	200008d4 	.word	0x200008d4
 80047e4:	20000af0 	.word	0x20000af0
 80047e8:	200009c8 	.word	0x200009c8
 80047ec:	20000284 	.word	0x20000284
 80047f0:	20000ae0 	.word	0x20000ae0
 80047f4:	20000afc 	.word	0x20000afc
 80047f8:	200003cc 	.word	0x200003cc
 80047fc:	200008f0 	.word	0x200008f0
 8004800:	20000b08 	.word	0x20000b08
 8004804:	200003d8 	.word	0x200003d8
 8004808:	f040 80bb 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C501>=4.20) || (C502>=4.20) || (C503>=4.20) || (C504>=4.20) || (C505>=4.20) || (C506>=4.20) || (C507>=4.20) ||
 800480c:	4b80      	ldr	r3, [pc, #512]	; (8004a10 <Control_Cell_OVE+0x928>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7fb fe45 	bl	80004a0 <__aeabi_f2d>
    		(C408>=4.20) || (C409>=4.20) || (C410>=4.20) || (C411>=4.20) || (C412>=4.20) || (C413>=4.20) || (C414>=4.20) ||
 8004816:	a37c      	add	r3, pc, #496	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f7fb ff0c 	bl	8000638 <__aeabi_dcmpge>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	f040 80ad 	bne.w	8004982 <Control_Cell_OVE+0x89a>
    		(C501>=4.20) || (C502>=4.20) || (C503>=4.20) || (C504>=4.20) || (C505>=4.20) || (C506>=4.20) || (C507>=4.20) ||
 8004828:	4b7a      	ldr	r3, [pc, #488]	; (8004a14 <Control_Cell_OVE+0x92c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7fb fe37 	bl	80004a0 <__aeabi_f2d>
 8004832:	a375      	add	r3, pc, #468	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f7fb fefe 	bl	8000638 <__aeabi_dcmpge>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	f040 809f 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004844:	4b74      	ldr	r3, [pc, #464]	; (8004a18 <Control_Cell_OVE+0x930>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7fb fe29 	bl	80004a0 <__aeabi_f2d>
 800484e:	a36e      	add	r3, pc, #440	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f7fb fef0 	bl	8000638 <__aeabi_dcmpge>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 8091 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 8004860:	4b6e      	ldr	r3, [pc, #440]	; (8004a1c <Control_Cell_OVE+0x934>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7fb fe1b 	bl	80004a0 <__aeabi_f2d>
 800486a:	a367      	add	r3, pc, #412	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f7fb fee2 	bl	8000638 <__aeabi_dcmpge>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 8083 	bne.w	8004982 <Control_Cell_OVE+0x89a>
 800487c:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <Control_Cell_OVE+0x938>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7fb fe0d 	bl	80004a0 <__aeabi_f2d>
 8004886:	a360      	add	r3, pc, #384	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f7fb fed4 	bl	8000638 <__aeabi_dcmpge>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d175      	bne.n	8004982 <Control_Cell_OVE+0x89a>
 8004896:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <Control_Cell_OVE+0x93c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fb fe00 	bl	80004a0 <__aeabi_f2d>
 80048a0:	a359      	add	r3, pc, #356	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f7fb fec7 	bl	8000638 <__aeabi_dcmpge>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d168      	bne.n	8004982 <Control_Cell_OVE+0x89a>
 80048b0:	4b5d      	ldr	r3, [pc, #372]	; (8004a28 <Control_Cell_OVE+0x940>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fb fdf3 	bl	80004a0 <__aeabi_f2d>
 80048ba:	a353      	add	r3, pc, #332	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f7fb feba 	bl	8000638 <__aeabi_dcmpge>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d15b      	bne.n	8004982 <Control_Cell_OVE+0x89a>
    		(C508>=4.20) || (C509>=4.20) || (C510>=4.20) || (C511>=4.20) || (C512>=4.20) || (C513>=4.20) || (C514>=4.20))
 80048ca:	4b58      	ldr	r3, [pc, #352]	; (8004a2c <Control_Cell_OVE+0x944>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fde6 	bl	80004a0 <__aeabi_f2d>
    		(C501>=4.20) || (C502>=4.20) || (C503>=4.20) || (C504>=4.20) || (C505>=4.20) || (C506>=4.20) || (C507>=4.20) ||
 80048d4:	a34c      	add	r3, pc, #304	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	f7fb fead 	bl	8000638 <__aeabi_dcmpge>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d14e      	bne.n	8004982 <Control_Cell_OVE+0x89a>
    		(C508>=4.20) || (C509>=4.20) || (C510>=4.20) || (C511>=4.20) || (C512>=4.20) || (C513>=4.20) || (C514>=4.20))
 80048e4:	4b52      	ldr	r3, [pc, #328]	; (8004a30 <Control_Cell_OVE+0x948>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fb fdd9 	bl	80004a0 <__aeabi_f2d>
 80048ee:	a346      	add	r3, pc, #280	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f7fb fea0 	bl	8000638 <__aeabi_dcmpge>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d141      	bne.n	8004982 <Control_Cell_OVE+0x89a>
 80048fe:	4b4d      	ldr	r3, [pc, #308]	; (8004a34 <Control_Cell_OVE+0x94c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fb fdcc 	bl	80004a0 <__aeabi_f2d>
 8004908:	a33f      	add	r3, pc, #252	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f7fb fe93 	bl	8000638 <__aeabi_dcmpge>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d134      	bne.n	8004982 <Control_Cell_OVE+0x89a>
 8004918:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <Control_Cell_OVE+0x950>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fb fdbf 	bl	80004a0 <__aeabi_f2d>
 8004922:	a339      	add	r3, pc, #228	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb fe86 	bl	8000638 <__aeabi_dcmpge>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d127      	bne.n	8004982 <Control_Cell_OVE+0x89a>
 8004932:	4b42      	ldr	r3, [pc, #264]	; (8004a3c <Control_Cell_OVE+0x954>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fb fdb2 	bl	80004a0 <__aeabi_f2d>
 800493c:	a332      	add	r3, pc, #200	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	f7fb fe79 	bl	8000638 <__aeabi_dcmpge>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11a      	bne.n	8004982 <Control_Cell_OVE+0x89a>
 800494c:	4b3c      	ldr	r3, [pc, #240]	; (8004a40 <Control_Cell_OVE+0x958>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fb fda5 	bl	80004a0 <__aeabi_f2d>
 8004956:	a32c      	add	r3, pc, #176	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f7fb fe6c 	bl	8000638 <__aeabi_dcmpge>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <Control_Cell_OVE+0x89a>
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <Control_Cell_OVE+0x95c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fb fd98 	bl	80004a0 <__aeabi_f2d>
 8004970:	a325      	add	r3, pc, #148	; (adr r3, 8004a08 <Control_Cell_OVE+0x920>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f7fb fe5f 	bl	8000638 <__aeabi_dcmpge>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d100      	bne.n	8004982 <Control_Cell_OVE+0x89a>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
            		HAL_Delay(3000);
                }
           }

}
 8004980:	e03f      	b.n	8004a02 <Control_Cell_OVE+0x91a>
        		HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin, GPIO_PIN_RESET);//(1)
 8004982:	2200      	movs	r2, #0
 8004984:	2101      	movs	r1, #1
 8004986:	4830      	ldr	r0, [pc, #192]	; (8004a48 <Control_Cell_OVE+0x960>)
 8004988:	f002 fe98 	bl	80076bc <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(DSG_GPIO_Port, DSG_Pin, GPIO_PIN_RESET);//(2)
 800498c:	2200      	movs	r2, #0
 800498e:	2102      	movs	r1, #2
 8004990:	482d      	ldr	r0, [pc, #180]	; (8004a48 <Control_Cell_OVE+0x960>)
 8004992:	f002 fe93 	bl	80076bc <HAL_GPIO_WritePin>
                	Reading_Voltage(); //SLAVEBMSA + B + C + D + E
 8004996:	f7fc fb5b 	bl	8001050 <Reading_Voltage>
                	Save_voltage(); //cell array
 800499a:	f7fe f817 	bl	80029cc <Save_voltage>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800499e:	2201      	movs	r2, #1
 80049a0:	2104      	movs	r1, #4
 80049a2:	4829      	ldr	r0, [pc, #164]	; (8004a48 <Control_Cell_OVE+0x960>)
 80049a4:	f002 fe8a 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(200);
 80049a8:	20c8      	movs	r0, #200	; 0xc8
 80049aa:	f000 fd5f 	bl	800546c <HAL_Delay>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80049ae:	2200      	movs	r2, #0
 80049b0:	2104      	movs	r1, #4
 80049b2:	4825      	ldr	r0, [pc, #148]	; (8004a48 <Control_Cell_OVE+0x960>)
 80049b4:	f002 fe82 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(200);
 80049b8:	20c8      	movs	r0, #200	; 0xc8
 80049ba:	f000 fd57 	bl	800546c <HAL_Delay>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80049be:	2201      	movs	r2, #1
 80049c0:	2104      	movs	r1, #4
 80049c2:	4821      	ldr	r0, [pc, #132]	; (8004a48 <Control_Cell_OVE+0x960>)
 80049c4:	f002 fe7a 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(200);
 80049c8:	20c8      	movs	r0, #200	; 0xc8
 80049ca:	f000 fd4f 	bl	800546c <HAL_Delay>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80049ce:	2200      	movs	r2, #0
 80049d0:	2104      	movs	r1, #4
 80049d2:	481d      	ldr	r0, [pc, #116]	; (8004a48 <Control_Cell_OVE+0x960>)
 80049d4:	f002 fe72 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(200);
 80049d8:	20c8      	movs	r0, #200	; 0xc8
 80049da:	f000 fd47 	bl	800546c <HAL_Delay>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80049de:	2201      	movs	r2, #1
 80049e0:	2104      	movs	r1, #4
 80049e2:	4819      	ldr	r0, [pc, #100]	; (8004a48 <Control_Cell_OVE+0x960>)
 80049e4:	f002 fe6a 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(200);
 80049e8:	20c8      	movs	r0, #200	; 0xc8
 80049ea:	f000 fd3f 	bl	800546c <HAL_Delay>
            		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2104      	movs	r1, #4
 80049f2:	4815      	ldr	r0, [pc, #84]	; (8004a48 <Control_Cell_OVE+0x960>)
 80049f4:	f002 fe62 	bl	80076bc <HAL_GPIO_WritePin>
            		HAL_Delay(3000);
 80049f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80049fc:	f000 fd36 	bl	800546c <HAL_Delay>
                	Reading_Voltage(); //SLAVEBMSA + B + C + D + E
 8004a00:	e7c9      	b.n	8004996 <Control_Cell_OVE+0x8ae>
}
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	f3af 8000 	nop.w
 8004a08:	cccccccd 	.word	0xcccccccd
 8004a0c:	4010cccc 	.word	0x4010cccc
 8004a10:	2000040c 	.word	0x2000040c
 8004a14:	200009ac 	.word	0x200009ac
 8004a18:	20000288 	.word	0x20000288
 8004a1c:	20000900 	.word	0x20000900
 8004a20:	200003e4 	.word	0x200003e4
 8004a24:	20000150 	.word	0x20000150
 8004a28:	200008fc 	.word	0x200008fc
 8004a2c:	20000168 	.word	0x20000168
 8004a30:	20000910 	.word	0x20000910
 8004a34:	20000158 	.word	0x20000158
 8004a38:	200003f8 	.word	0x200003f8
 8004a3c:	2000099c 	.word	0x2000099c
 8004a40:	20000258 	.word	0x20000258
 8004a44:	20000930 	.word	0x20000930
 8004a48:	48000400 	.word	0x48000400

08004a4c <Transmit_Data>:

void Transmit_Data(CAN_TxHeaderTypeDef* TxHeader)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	uint8_t Sum_of_Voltage_1 = ((Sum_of_Voltage & 0xff00)>>8);
 8004a54:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <Transmit_Data+0x84>)
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	0a1b      	lsrs	r3, r3, #8
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	73fb      	strb	r3, [r7, #15]
	uint8_t Sum_of_Voltage_2 = (Sum_of_Voltage & 0x00ff);
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <Transmit_Data+0x84>)
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	73bb      	strb	r3, [r7, #14]
	uint8_t Max_temp_1 = ((Max_temp & 0xff00)>>8);
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <Transmit_Data+0x88>)
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	0a1b      	lsrs	r3, r3, #8
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	737b      	strb	r3, [r7, #13]
	uint8_t Max_temp_2 = (Max_temp & 0x00ff);
 8004a6e:	4b19      	ldr	r3, [pc, #100]	; (8004ad4 <Transmit_Data+0x88>)
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	733b      	strb	r3, [r7, #12]
	uint8_t Min_temp_1 = ((Min_temp & 0xff00)>>8);
 8004a74:	4b18      	ldr	r3, [pc, #96]	; (8004ad8 <Transmit_Data+0x8c>)
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	0a1b      	lsrs	r3, r3, #8
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	72fb      	strb	r3, [r7, #11]
	uint8_t Min_temp_2 = (Min_temp & 0x00ff);
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <Transmit_Data+0x8c>)
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	72bb      	strb	r3, [r7, #10]


	tx_data[0] = Sum_of_Voltage_1;
 8004a84:	4a15      	ldr	r2, [pc, #84]	; (8004adc <Transmit_Data+0x90>)
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	7013      	strb	r3, [r2, #0]
	tx_data[1] = Sum_of_Voltage_2;
 8004a8a:	4a14      	ldr	r2, [pc, #80]	; (8004adc <Transmit_Data+0x90>)
 8004a8c:	7bbb      	ldrb	r3, [r7, #14]
 8004a8e:	7053      	strb	r3, [r2, #1]
	tx_data[2] = Max_temp_1;
 8004a90:	4a12      	ldr	r2, [pc, #72]	; (8004adc <Transmit_Data+0x90>)
 8004a92:	7b7b      	ldrb	r3, [r7, #13]
 8004a94:	7093      	strb	r3, [r2, #2]
	tx_data[3] = Max_temp_2;
 8004a96:	4a11      	ldr	r2, [pc, #68]	; (8004adc <Transmit_Data+0x90>)
 8004a98:	7b3b      	ldrb	r3, [r7, #12]
 8004a9a:	70d3      	strb	r3, [r2, #3]
	tx_data[4] = Min_temp_1;
 8004a9c:	4a0f      	ldr	r2, [pc, #60]	; (8004adc <Transmit_Data+0x90>)
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
 8004aa0:	7113      	strb	r3, [r2, #4]
	tx_data[5] = Min_temp_2;
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <Transmit_Data+0x90>)
 8004aa4:	7abb      	ldrb	r3, [r7, #10]
 8004aa6:	7153      	strb	r3, [r2, #5]

	{
		Mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8004aa8:	480d      	ldr	r0, [pc, #52]	; (8004ae0 <Transmit_Data+0x94>)
 8004aaa:	f001 fffb 	bl	8006aa4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <Transmit_Data+0x98>)
 8004ab2:	601a      	str	r2, [r3, #0]

		if(Mailbox){
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <Transmit_Data+0x98>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <Transmit_Data+0x7c>
		HAL_CAN_AddTxMessage(&hcan1, TxHeader, tx_data, &Mailbox);
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <Transmit_Data+0x98>)
 8004abe:	4a07      	ldr	r2, [pc, #28]	; (8004adc <Transmit_Data+0x90>)
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4807      	ldr	r0, [pc, #28]	; (8004ae0 <Transmit_Data+0x94>)
 8004ac4:	f001 ff13 	bl	80068ee <HAL_CAN_AddTxMessage>
		}
	}

}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000038 	.word	0x20000038
 8004ad4:	200008dc 	.word	0x200008dc
 8004ad8:	20000b04 	.word	0x20000b04
 8004adc:	2000003c 	.word	0x2000003c
 8004ae0:	200000f8 	.word	0x200000f8
 8004ae4:	200009c4 	.word	0x200009c4

08004ae8 <Power_On_Event>:

void Power_On_Event()
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
	HAL_Delay(5000);	//PRECHARGE
 8004aec:	f241 3088 	movw	r0, #5000	; 0x1388
 8004af0:	f000 fcbc 	bl	800546c <HAL_Delay>

	HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin, GPIO_PIN_SET);
 8004af4:	2201      	movs	r2, #1
 8004af6:	2101      	movs	r1, #1
 8004af8:	4811      	ldr	r0, [pc, #68]	; (8004b40 <Power_On_Event+0x58>)
 8004afa:	f002 fddf 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8004afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b02:	f000 fcb3 	bl	800546c <HAL_Delay>
	HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin, GPIO_PIN_RESET);
 8004b06:	2200      	movs	r2, #0
 8004b08:	2101      	movs	r1, #1
 8004b0a:	480d      	ldr	r0, [pc, #52]	; (8004b40 <Power_On_Event+0x58>)
 8004b0c:	f002 fdd6 	bl	80076bc <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8004b10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b14:	f000 fcaa 	bl	800546c <HAL_Delay>

	HAL_GPIO_WritePin(DSG_GPIO_Port, DSG_Pin, GPIO_PIN_SET);
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	4808      	ldr	r0, [pc, #32]	; (8004b40 <Power_On_Event+0x58>)
 8004b1e:	f002 fdcd 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8004b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b26:	f000 fca1 	bl	800546c <HAL_Delay>
	HAL_GPIO_WritePin(DSG_GPIO_Port, DSG_Pin, GPIO_PIN_RESET);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	4804      	ldr	r0, [pc, #16]	; (8004b40 <Power_On_Event+0x58>)
 8004b30:	f002 fdc4 	bl	80076bc <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8004b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b38:	f000 fc98 	bl	800546c <HAL_Delay>

}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	48000400 	.word	0x48000400

08004b44 <Select_Address>:


void Select_Address(unsigned char number)  //for temperature sensor
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
	switch(number){
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	2b0d      	cmp	r3, #13
 8004b54:	f200 80cb 	bhi.w	8004cee <Select_Address+0x1aa>
 8004b58:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <Select_Address+0x1c>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004b99 	.word	0x08004b99
 8004b64:	08004ba7 	.word	0x08004ba7
 8004b68:	08004bbf 	.word	0x08004bbf
 8004b6c:	08004bd7 	.word	0x08004bd7
 8004b70:	08004bef 	.word	0x08004bef
 8004b74:	08004c09 	.word	0x08004c09
 8004b78:	08004c23 	.word	0x08004c23
 8004b7c:	08004c3d 	.word	0x08004c3d
 8004b80:	08004c57 	.word	0x08004c57
 8004b84:	08004c71 	.word	0x08004c71
 8004b88:	08004c8b 	.word	0x08004c8b
 8004b8c:	08004ca5 	.word	0x08004ca5
 8004b90:	08004cbf 	.word	0x08004cbf
 8004b94:	08004cd7 	.word	0x08004cd7

	case 1:
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin|A1_Pin|A0_Pin, GPIO_PIN_RESET);//1
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8004b9e:	4856      	ldr	r0, [pc, #344]	; (8004cf8 <Select_Address+0x1b4>)
 8004ba0:	f002 fd8c 	bl	80076bc <HAL_GPIO_WritePin>
	//0000
	break;
 8004ba4:	e0a3      	b.n	8004cee <Select_Address+0x1aa>

	case 2:
	HAL_GPIO_WritePin(GPIOC, A0_Pin, GPIO_PIN_SET);//2
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	2140      	movs	r1, #64	; 0x40
 8004baa:	4853      	ldr	r0, [pc, #332]	; (8004cf8 <Select_Address+0x1b4>)
 8004bac:	f002 fd86 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin|A1_Pin, GPIO_PIN_RESET);//0001
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8004bb6:	4850      	ldr	r0, [pc, #320]	; (8004cf8 <Select_Address+0x1b4>)
 8004bb8:	f002 fd80 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004bbc:	e097      	b.n	8004cee <Select_Address+0x1aa>

	case 3:
	HAL_GPIO_WritePin(GPIOC, A1_Pin, GPIO_PIN_SET);//3
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	484d      	ldr	r0, [pc, #308]	; (8004cf8 <Select_Address+0x1b4>)
 8004bc4:	f002 fd7a 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin|A0_Pin, GPIO_PIN_RESET);//0010
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f44f 7150 	mov.w	r1, #832	; 0x340
 8004bce:	484a      	ldr	r0, [pc, #296]	; (8004cf8 <Select_Address+0x1b4>)
 8004bd0:	f002 fd74 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004bd4:	e08b      	b.n	8004cee <Select_Address+0x1aa>

	case 4:
	HAL_GPIO_WritePin(GPIOC, A1_Pin|A0_Pin, GPIO_PIN_SET);//4
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	21c0      	movs	r1, #192	; 0xc0
 8004bda:	4847      	ldr	r0, [pc, #284]	; (8004cf8 <Select_Address+0x1b4>)
 8004bdc:	f002 fd6e 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin, GPIO_PIN_RESET);//0011
 8004be0:	2200      	movs	r2, #0
 8004be2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004be6:	4844      	ldr	r0, [pc, #272]	; (8004cf8 <Select_Address+0x1b4>)
 8004be8:	f002 fd68 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004bec:	e07f      	b.n	8004cee <Select_Address+0x1aa>

	case 5:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);//5
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bf4:	4840      	ldr	r0, [pc, #256]	; (8004cf8 <Select_Address+0x1b4>)
 8004bf6:	f002 fd61 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A1_Pin|A0_Pin, GPIO_PIN_RESET);//0100
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8004c00:	483d      	ldr	r0, [pc, #244]	; (8004cf8 <Select_Address+0x1b4>)
 8004c02:	f002 fd5b 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004c06:	e072      	b.n	8004cee <Select_Address+0x1aa>

	case 6:
	HAL_GPIO_WritePin(GPIOC, A2_Pin|A0_Pin, GPIO_PIN_SET);//6
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004c0e:	483a      	ldr	r0, [pc, #232]	; (8004cf8 <Select_Address+0x1b4>)
 8004c10:	f002 fd54 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A1_Pin, GPIO_PIN_RESET);//0101
 8004c14:	2200      	movs	r2, #0
 8004c16:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004c1a:	4837      	ldr	r0, [pc, #220]	; (8004cf8 <Select_Address+0x1b4>)
 8004c1c:	f002 fd4e 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004c20:	e065      	b.n	8004cee <Select_Address+0x1aa>

	case 7:
	HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin, GPIO_PIN_SET);//7
 8004c22:	2201      	movs	r2, #1
 8004c24:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004c28:	4833      	ldr	r0, [pc, #204]	; (8004cf8 <Select_Address+0x1b4>)
 8004c2a:	f002 fd47 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A0_Pin, GPIO_PIN_RESET);//0110
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c34:	4830      	ldr	r0, [pc, #192]	; (8004cf8 <Select_Address+0x1b4>)
 8004c36:	f002 fd41 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004c3a:	e058      	b.n	8004cee <Select_Address+0x1aa>

	case 8:
	HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin|A0_Pin, GPIO_PIN_SET);//8
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004c42:	482d      	ldr	r0, [pc, #180]	; (8004cf8 <Select_Address+0x1b4>)
 8004c44:	f002 fd3a 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A3_Pin, GPIO_PIN_RESET);//0111
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c4e:	482a      	ldr	r0, [pc, #168]	; (8004cf8 <Select_Address+0x1b4>)
 8004c50:	f002 fd34 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004c54:	e04b      	b.n	8004cee <Select_Address+0x1aa>

	case 9:
	HAL_GPIO_WritePin(GPIOC, A3_Pin, GPIO_PIN_SET);//9
 8004c56:	2201      	movs	r2, #1
 8004c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c5c:	4826      	ldr	r0, [pc, #152]	; (8004cf8 <Select_Address+0x1b4>)
 8004c5e:	f002 fd2d 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin|A0_Pin, GPIO_PIN_RESET);//1000
 8004c62:	2200      	movs	r2, #0
 8004c64:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004c68:	4823      	ldr	r0, [pc, #140]	; (8004cf8 <Select_Address+0x1b4>)
 8004c6a:	f002 fd27 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004c6e:	e03e      	b.n	8004cee <Select_Address+0x1aa>

	case 10:
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A0_Pin, GPIO_PIN_SET);//10
 8004c70:	2201      	movs	r2, #1
 8004c72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c76:	4820      	ldr	r0, [pc, #128]	; (8004cf8 <Select_Address+0x1b4>)
 8004c78:	f002 fd20 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin, GPIO_PIN_RESET);//1001
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004c82:	481d      	ldr	r0, [pc, #116]	; (8004cf8 <Select_Address+0x1b4>)
 8004c84:	f002 fd1a 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004c88:	e031      	b.n	8004cee <Select_Address+0x1aa>

	case 11:
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A1_Pin, GPIO_PIN_SET);//11
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004c90:	4819      	ldr	r0, [pc, #100]	; (8004cf8 <Select_Address+0x1b4>)
 8004c92:	f002 fd13 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin, GPIO_PIN_RESET);//1010
 8004c96:	2200      	movs	r2, #0
 8004c98:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004c9c:	4816      	ldr	r0, [pc, #88]	; (8004cf8 <Select_Address+0x1b4>)
 8004c9e:	f002 fd0d 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004ca2:	e024      	b.n	8004cee <Select_Address+0x1aa>

	case 12:
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A1_Pin|A0_Pin, GPIO_PIN_SET);//12
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8004caa:	4813      	ldr	r0, [pc, #76]	; (8004cf8 <Select_Address+0x1b4>)
 8004cac:	f002 fd06 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);//1011
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cb6:	4810      	ldr	r0, [pc, #64]	; (8004cf8 <Select_Address+0x1b4>)
 8004cb8:	f002 fd00 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004cbc:	e017      	b.n	8004cee <Select_Address+0x1aa>

	case 13:
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin, GPIO_PIN_SET);//13
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004cc4:	480c      	ldr	r0, [pc, #48]	; (8004cf8 <Select_Address+0x1b4>)
 8004cc6:	f002 fcf9 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A1_Pin|A0_Pin, GPIO_PIN_RESET);//1100
 8004cca:	2200      	movs	r2, #0
 8004ccc:	21c0      	movs	r1, #192	; 0xc0
 8004cce:	480a      	ldr	r0, [pc, #40]	; (8004cf8 <Select_Address+0x1b4>)
 8004cd0:	f002 fcf4 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004cd4:	e00b      	b.n	8004cee <Select_Address+0x1aa>

	case 14:
	HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin|A0_Pin, GPIO_PIN_SET);//14
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f44f 7150 	mov.w	r1, #832	; 0x340
 8004cdc:	4806      	ldr	r0, [pc, #24]	; (8004cf8 <Select_Address+0x1b4>)
 8004cde:	f002 fced 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, A1_Pin, GPIO_PIN_RESET);//1101
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	4804      	ldr	r0, [pc, #16]	; (8004cf8 <Select_Address+0x1b4>)
 8004ce8:	f002 fce8 	bl	80076bc <HAL_GPIO_WritePin>
	break;
 8004cec:	bf00      	nop
	}
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	48000800 	.word	0x48000800

08004cfc <Reading_Temp>:

void Reading_Temp()  // TEMP1:PA0, TEMP2:PC2, TEMP3:PC3, TEMP4:PC4, TEMP5:PC5
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
		for(uint8_t i = 1; i < 15; i++)
 8004d02:	2301      	movs	r3, #1
 8004d04:	71fb      	strb	r3, [r7, #7]
 8004d06:	e025      	b.n	8004d54 <Reading_Temp+0x58>
		{
			Select_Address(i); // select MUX(14:0)
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff ff1a 	bl	8004b44 <Select_Address>

			k = i * 5 - 5;
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	1e5a      	subs	r2, r3, #1
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <Reading_Temp+0x108>)
 8004d1e:	601a      	str	r2, [r3, #0]

			if(i != 1)
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d00b      	beq.n	8004d3e <Reading_Temp+0x42>
			{
				uint32_t *j = (Temp) + k;
 8004d26:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <Reading_Temp+0x108>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4a36      	ldr	r2, [pc, #216]	; (8004e08 <Reading_Temp+0x10c>)
 8004d2e:	4413      	add	r3, r2
 8004d30:	603b      	str	r3, [r7, #0]
				HAL_ADC_Start_DMA(&hadc1, j , 5);
 8004d32:	2205      	movs	r2, #5
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	4835      	ldr	r0, [pc, #212]	; (8004e0c <Reading_Temp+0x110>)
 8004d38:	f000 fed2 	bl	8005ae0 <HAL_ADC_Start_DMA>
 8004d3c:	e004      	b.n	8004d48 <Reading_Temp+0x4c>
			}

			else
			{
				HAL_ADC_Start_DMA(&hadc1, Temp, 5);
 8004d3e:	2205      	movs	r2, #5
 8004d40:	4931      	ldr	r1, [pc, #196]	; (8004e08 <Reading_Temp+0x10c>)
 8004d42:	4832      	ldr	r0, [pc, #200]	; (8004e0c <Reading_Temp+0x110>)
 8004d44:	f000 fecc 	bl	8005ae0 <HAL_ADC_Start_DMA>
			}

			HAL_Delay(2);
 8004d48:	2002      	movs	r0, #2
 8004d4a:	f000 fb8f 	bl	800546c <HAL_Delay>
		for(uint8_t i = 1; i < 15; i++)
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	3301      	adds	r3, #1
 8004d52:	71fb      	strb	r3, [r7, #7]
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	2b0e      	cmp	r3, #14
 8004d58:	d9d6      	bls.n	8004d08 <Reading_Temp+0xc>
		 }

		Max_temp = Temp[0];
 8004d5a:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <Reading_Temp+0x10c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <Reading_Temp+0x114>)
 8004d62:	801a      	strh	r2, [r3, #0]

		for (uint8_t q=0; q<70; q++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	71bb      	strb	r3, [r7, #6]
 8004d68:	e012      	b.n	8004d90 <Reading_Temp+0x94>
		{
			if(Max_temp<Temp[q])
 8004d6a:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <Reading_Temp+0x114>)
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	79bb      	ldrb	r3, [r7, #6]
 8004d72:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <Reading_Temp+0x10c>)
 8004d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d78:	4299      	cmp	r1, r3
 8004d7a:	d206      	bcs.n	8004d8a <Reading_Temp+0x8e>
			{
				Max_temp = Temp[q];
 8004d7c:	79bb      	ldrb	r3, [r7, #6]
 8004d7e:	4a22      	ldr	r2, [pc, #136]	; (8004e08 <Reading_Temp+0x10c>)
 8004d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <Reading_Temp+0x114>)
 8004d88:	801a      	strh	r2, [r3, #0]
		for (uint8_t q=0; q<70; q++)
 8004d8a:	79bb      	ldrb	r3, [r7, #6]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	71bb      	strb	r3, [r7, #6]
 8004d90:	79bb      	ldrb	r3, [r7, #6]
 8004d92:	2b45      	cmp	r3, #69	; 0x45
 8004d94:	d9e9      	bls.n	8004d6a <Reading_Temp+0x6e>
			}
		}

		Min_temp = Temp[0];
 8004d96:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <Reading_Temp+0x10c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <Reading_Temp+0x118>)
 8004d9e:	801a      	strh	r2, [r3, #0]

		for (uint8_t q=0; q<70; q++)
 8004da0:	2300      	movs	r3, #0
 8004da2:	717b      	strb	r3, [r7, #5]
 8004da4:	e012      	b.n	8004dcc <Reading_Temp+0xd0>
		{
			if(Min_temp>Temp[q])
 8004da6:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <Reading_Temp+0x118>)
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	4619      	mov	r1, r3
 8004dac:	797b      	ldrb	r3, [r7, #5]
 8004dae:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <Reading_Temp+0x10c>)
 8004db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db4:	4299      	cmp	r1, r3
 8004db6:	d906      	bls.n	8004dc6 <Reading_Temp+0xca>
			{
				Min_temp = Temp[q];
 8004db8:	797b      	ldrb	r3, [r7, #5]
 8004dba:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <Reading_Temp+0x10c>)
 8004dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <Reading_Temp+0x118>)
 8004dc4:	801a      	strh	r2, [r3, #0]
		for (uint8_t q=0; q<70; q++)
 8004dc6:	797b      	ldrb	r3, [r7, #5]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	717b      	strb	r3, [r7, #5]
 8004dcc:	797b      	ldrb	r3, [r7, #5]
 8004dce:	2b45      	cmp	r3, #69	; 0x45
 8004dd0:	d9e9      	bls.n	8004da6 <Reading_Temp+0xaa>
			}
		}

		if(Max_temp > 2678)	//Max_temp > 60'C
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <Reading_Temp+0x114>)
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	f640 2276 	movw	r2, #2678	; 0xa76
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d90e      	bls.n	8004dfc <Reading_Temp+0x100>
		{
			HAL_Delay(1000);
 8004dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004de2:	f000 fb43 	bl	800546c <HAL_Delay>
			HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin, GPIO_PIN_RESET);//(1)
 8004de6:	2200      	movs	r2, #0
 8004de8:	2101      	movs	r1, #1
 8004dea:	480b      	ldr	r0, [pc, #44]	; (8004e18 <Reading_Temp+0x11c>)
 8004dec:	f002 fc66 	bl	80076bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DSG_GPIO_Port, DSG_Pin, GPIO_PIN_RESET);//(2)
 8004df0:	2200      	movs	r2, #0
 8004df2:	2102      	movs	r1, #2
 8004df4:	4808      	ldr	r0, [pc, #32]	; (8004e18 <Reading_Temp+0x11c>)
 8004df6:	f002 fc61 	bl	80076bc <HAL_GPIO_WritePin>

			while(1)
 8004dfa:	e7fe      	b.n	8004dfa <Reading_Temp+0xfe>
			{

			}
		}
}
 8004dfc:	bf00      	nop
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	2000002c 	.word	0x2000002c
 8004e08:	200002ac 	.word	0x200002ac
 8004e0c:	20000048 	.word	0x20000048
 8004e10:	200008dc 	.word	0x200008dc
 8004e14:	20000b04 	.word	0x20000b04
 8004e18:	48000400 	.word	0x48000400

08004e1c <CAN_TX_Config>:


void CAN_TX_Config()
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
	  TxHeader.StdId = 0x321;
 8004e20:	4b1a      	ldr	r3, [pc, #104]	; (8004e8c <CAN_TX_Config+0x70>)
 8004e22:	f240 3221 	movw	r2, #801	; 0x321
 8004e26:	601a      	str	r2, [r3, #0]
	  TxHeader.ExtId = 0x00;
 8004e28:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <CAN_TX_Config+0x70>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	605a      	str	r2, [r3, #4]
	  TxHeader.IDE = CAN_ID_STD;
 8004e2e:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <CAN_TX_Config+0x70>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <CAN_TX_Config+0x70>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]
	  TxHeader.DLC = 8;
 8004e3a:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <CAN_TX_Config+0x70>)
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	611a      	str	r2, [r3, #16]
	  TxHeader.TransmitGlobalTime = DISABLE;
 8004e40:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <CAN_TX_Config+0x70>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	751a      	strb	r2, [r3, #20]

	  sFilterConfig.FilterIdHigh = 0x0000;
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterBank = 0;
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	615a      	str	r2, [r3, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterActivation = ENABLE;
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	621a      	str	r2, [r3, #32]
	  sFilterConfig.SlaveStartFilterBank = 14;
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <CAN_TX_Config+0x74>)
 8004e7e:	220e      	movs	r2, #14
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004e82:	bf00      	nop
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	200009cc 	.word	0x200009cc
 8004e90:	20000124 	.word	0x20000124

08004e94 <Master_BMS_CAN_Receive>:
              Error_Handler();
      }
}

void Master_BMS_CAN_Receive(CAN_HandleTypeDef *can, CAN_RxHeaderTypeDef *RxHeader, uint8_t rx_data[])
{
 8004e94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
     HAL_CAN_GetRxMessage(can, CAN_RX_FIFO0, RxHeader, rx_data);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f001 fe30 	bl	8006b0e <HAL_CAN_GetRxMessage>

     Current = ((uint64_t)rx_data[0]<<8) + ((uint64_t)rx_data[1]);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b2d9      	uxtb	r1, r3
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0b00 	mov.w	fp, #0
 8004ebc:	f04f 0c00 	mov.w	ip, #0
 8004ec0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8004ec4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8004ec8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	3201      	adds	r2, #1
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	b2d1      	uxtb	r1, r2
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	eb1b 0301 	adds.w	r3, fp, r1
 8004edc:	eb4c 0402 	adc.w	r4, ip, r2
 8004ee0:	4a03      	ldr	r2, [pc, #12]	; (8004ef0 <Master_BMS_CAN_Receive+0x5c>)
 8004ee2:	e9c2 3400 	strd	r3, r4, [r2]
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004ef0:	20000030 	.word	0x20000030

08004ef4 <Control_Current>:

void Control_Current()
{
 8004ef4:	b598      	push	{r3, r4, r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
	if(Current > 250)
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <Control_Current+0x34>)
 8004efa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004efe:	2c00      	cmp	r4, #0
 8004f00:	bf08      	it	eq
 8004f02:	2bfb      	cmpeq	r3, #251	; 0xfb
 8004f04:	d30e      	bcc.n	8004f24 <Control_Current+0x30>
	{
		HAL_Delay(1000);
 8004f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f0a:	f000 faaf 	bl	800546c <HAL_Delay>
		HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin, GPIO_PIN_RESET);//(1)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2101      	movs	r1, #1
 8004f12:	4806      	ldr	r0, [pc, #24]	; (8004f2c <Control_Current+0x38>)
 8004f14:	f002 fbd2 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DSG_GPIO_Port, DSG_Pin, GPIO_PIN_RESET);//(2)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4803      	ldr	r0, [pc, #12]	; (8004f2c <Control_Current+0x38>)
 8004f1e:	f002 fbcd 	bl	80076bc <HAL_GPIO_WritePin>

		while(1)
 8004f22:	e7fe      	b.n	8004f22 <Control_Current+0x2e>
		{

		}
	}
}
 8004f24:	bf00      	nop
 8004f26:	bd98      	pop	{r3, r4, r7, pc}
 8004f28:	20000030 	.word	0x20000030
 8004f2c:	48000400 	.word	0x48000400

08004f30 <CHG_DSG_ON>:

void CHG_DSG_ON()
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DSG_GPIO_Port, DSG_Pin, GPIO_PIN_SET);//(1)
 8004f34:	2201      	movs	r2, #1
 8004f36:	2102      	movs	r1, #2
 8004f38:	4804      	ldr	r0, [pc, #16]	; (8004f4c <CHG_DSG_ON+0x1c>)
 8004f3a:	f002 fbbf 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin, GPIO_PIN_SET);//(2)
 8004f3e:	2201      	movs	r2, #1
 8004f40:	2101      	movs	r1, #1
 8004f42:	4802      	ldr	r0, [pc, #8]	; (8004f4c <CHG_DSG_ON+0x1c>)
 8004f44:	f002 fbba 	bl	80076bc <HAL_GPIO_WritePin>
}
 8004f48:	bf00      	nop
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	48000400 	.word	0x48000400

08004f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f54:	f000 fa19 	bl	800538a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f58:	f000 f844 	bl	8004fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f5c:	f7fb fd48 	bl	80009f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f60:	f7fb fd28 	bl	80009b4 <MX_DMA_Init>
  MX_CAN1_Init();
 8004f64:	f7fb fcac 	bl	80008c0 <MX_CAN1_Init>
  MX_SPI1_Init();
 8004f68:	f000 f8c2 	bl	80050f0 <MX_SPI1_Init>
  MX_ADC1_Init();
 8004f6c:	f7fb fb78 	bl	8000660 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SLAVEBMS_InitCRCTable();
 8004f70:	f7fb fde0 	bl	8000b34 <SLAVEBMS_InitCRCTable>

  CAN_TX_Config();
 8004f74:	f7ff ff52 	bl	8004e1c <CAN_TX_Config>

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8004f78:	4915      	ldr	r1, [pc, #84]	; (8004fd0 <main+0x80>)
 8004f7a:	4816      	ldr	r0, [pc, #88]	; (8004fd4 <main+0x84>)
 8004f7c:	f001 fba9 	bl	80066d2 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 8004f80:	4814      	ldr	r0, [pc, #80]	; (8004fd4 <main+0x84>)
 8004f82:	f001 fc70 	bl	8006866 <HAL_CAN_Start>

  Reading_Voltage();
 8004f86:	f7fc f863 	bl	8001050 <Reading_Voltage>

  Save_voltage();
 8004f8a:	f7fd fd1f 	bl	80029cc <Save_voltage>

  Control_Cell_UVE();
 8004f8e:	f7fe fcf3 	bl	8003978 <Control_Cell_UVE>

  Control_Cell_OVE();
 8004f92:	f7ff f8a9 	bl	80040e8 <Control_Cell_OVE>

  Power_On_Event();
 8004f96:	f7ff fda7 	bl	8004ae8 <Power_On_Event>

  CHG_DSG_ON();
 8004f9a:	f7ff ffc9 	bl	8004f30 <CHG_DSG_ON>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 HAL_Delay(10);
 8004f9e:	200a      	movs	r0, #10
 8004fa0:	f000 fa64 	bl	800546c <HAL_Delay>

		 Reading_Voltage(); //SLAVEBMSA + B + C + D + E
 8004fa4:	f7fc f854 	bl	8001050 <Reading_Voltage>

		 Save_voltage(); //cell array
 8004fa8:	f7fd fd10 	bl	80029cc <Save_voltage>

		 Control_Cell_OVE(); //with voltage
 8004fac:	f7ff f89c 	bl	80040e8 <Control_Cell_OVE>

		 Voltage_Drop_Sense();
 8004fb0:	f7fe f906 	bl	80031c0 <Voltage_Drop_Sense>

		 Reading_Temp();
 8004fb4:	f7ff fea2 	bl	8004cfc <Reading_Temp>

		 Transmit_Data(&TxHeader);
 8004fb8:	4807      	ldr	r0, [pc, #28]	; (8004fd8 <main+0x88>)
 8004fba:	f7ff fd47 	bl	8004a4c <Transmit_Data>

		 Master_BMS_CAN_Receive(&hcan1, &RxHeader, rx_data);
 8004fbe:	4a07      	ldr	r2, [pc, #28]	; (8004fdc <main+0x8c>)
 8004fc0:	4907      	ldr	r1, [pc, #28]	; (8004fe0 <main+0x90>)
 8004fc2:	4804      	ldr	r0, [pc, #16]	; (8004fd4 <main+0x84>)
 8004fc4:	f7ff ff66 	bl	8004e94 <Master_BMS_CAN_Receive>

		 Control_Current();
 8004fc8:	f7ff ff94 	bl	8004ef4 <Control_Current>
		 HAL_Delay(10);
 8004fcc:	e7e7      	b.n	8004f9e <main+0x4e>
 8004fce:	bf00      	nop
 8004fd0:	20000124 	.word	0x20000124
 8004fd4:	200000f8 	.word	0x200000f8
 8004fd8:	200009cc 	.word	0x200009cc
 8004fdc:	20000044 	.word	0x20000044
 8004fe0:	200009e8 	.word	0x200009e8

08004fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b0b0      	sub	sp, #192	; 0xc0
 8004fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004fee:	2244      	movs	r2, #68	; 0x44
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f004 fa22 	bl	800943c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ff8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005008:	463b      	mov	r3, r7
 800500a:	2268      	movs	r2, #104	; 0x68
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f004 fa14 	bl	800943c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005014:	2301      	movs	r3, #1
 8005016:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800501c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005020:	2302      	movs	r3, #2
 8005022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005026:	2303      	movs	r3, #3
 8005028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800502c:	2301      	movs	r3, #1
 800502e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 8005032:	2314      	movs	r3, #20
 8005034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005038:	2307      	movs	r3, #7
 800503a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800503e:	2302      	movs	r3, #2
 8005040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005044:	2302      	movs	r3, #2
 8005046:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800504a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800504e:	4618      	mov	r0, r3
 8005050:	f002 fbb0 	bl	80077b4 <HAL_RCC_OscConfig>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800505a:	f000 f841 	bl	80050e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800505e:	230f      	movs	r3, #15
 8005060:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005062:	2303      	movs	r3, #3
 8005064:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005066:	2300      	movs	r3, #0
 8005068:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800506a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800506e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005070:	2300      	movs	r3, #0
 8005072:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005074:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005078:	2104      	movs	r1, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f002 ffba 	bl	8007ff4 <HAL_RCC_ClockConfig>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005086:	f000 f82b 	bl	80050e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800508a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800508e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8005090:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005094:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8005096:	2303      	movs	r3, #3
 8005098:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800509a:	2301      	movs	r3, #1
 800509c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800509e:	2308      	movs	r3, #8
 80050a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80050a2:	2307      	movs	r3, #7
 80050a4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80050a6:	2302      	movs	r3, #2
 80050a8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80050aa:	2302      	movs	r3, #2
 80050ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80050ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050b4:	463b      	mov	r3, r7
 80050b6:	4618      	mov	r0, r3
 80050b8:	f003 f968 	bl	800838c <HAL_RCCEx_PeriphCLKConfig>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80050c2:	f000 f80d 	bl	80050e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80050c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80050ca:	f002 fb1d 	bl	8007708 <HAL_PWREx_ControlVoltageScaling>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80050d4:	f000 f804 	bl	80050e0 <Error_Handler>
  }
}
 80050d8:	bf00      	nop
 80050da:	37c0      	adds	r7, #192	; 0xc0
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <MX_SPI1_Init+0x74>)
 80050f6:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <MX_SPI1_Init+0x78>)
 80050f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050fa:	4b1a      	ldr	r3, [pc, #104]	; (8005164 <MX_SPI1_Init+0x74>)
 80050fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005102:	4b18      	ldr	r3, [pc, #96]	; (8005164 <MX_SPI1_Init+0x74>)
 8005104:	2200      	movs	r2, #0
 8005106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005108:	4b16      	ldr	r3, [pc, #88]	; (8005164 <MX_SPI1_Init+0x74>)
 800510a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800510e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005110:	4b14      	ldr	r3, [pc, #80]	; (8005164 <MX_SPI1_Init+0x74>)
 8005112:	2202      	movs	r2, #2
 8005114:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005116:	4b13      	ldr	r3, [pc, #76]	; (8005164 <MX_SPI1_Init+0x74>)
 8005118:	2201      	movs	r2, #1
 800511a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800511c:	4b11      	ldr	r3, [pc, #68]	; (8005164 <MX_SPI1_Init+0x74>)
 800511e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005122:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005124:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <MX_SPI1_Init+0x74>)
 8005126:	2230      	movs	r2, #48	; 0x30
 8005128:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800512a:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <MX_SPI1_Init+0x74>)
 800512c:	2200      	movs	r2, #0
 800512e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <MX_SPI1_Init+0x74>)
 8005132:	2200      	movs	r2, #0
 8005134:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <MX_SPI1_Init+0x74>)
 8005138:	2200      	movs	r2, #0
 800513a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <MX_SPI1_Init+0x74>)
 800513e:	2207      	movs	r2, #7
 8005140:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <MX_SPI1_Init+0x74>)
 8005144:	2200      	movs	r2, #0
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005148:	4b06      	ldr	r3, [pc, #24]	; (8005164 <MX_SPI1_Init+0x74>)
 800514a:	2200      	movs	r2, #0
 800514c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800514e:	4805      	ldr	r0, [pc, #20]	; (8005164 <MX_SPI1_Init+0x74>)
 8005150:	f003 fc76 	bl	8008a40 <HAL_SPI_Init>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800515a:	f7ff ffc1 	bl	80050e0 <Error_Handler>
  }

}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000934 	.word	0x20000934
 8005168:	40013000 	.word	0x40013000

0800516c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005174:	f107 0314 	add.w	r3, r7, #20
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1b      	ldr	r2, [pc, #108]	; (80051f8 <HAL_SPI_MspInit+0x8c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d130      	bne.n	80051f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800518e:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_SPI_MspInit+0x90>)
 8005190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005192:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <HAL_SPI_MspInit+0x90>)
 8005194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005198:	6613      	str	r3, [r2, #96]	; 0x60
 800519a:	4b18      	ldr	r3, [pc, #96]	; (80051fc <HAL_SPI_MspInit+0x90>)
 800519c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a6:	4b15      	ldr	r3, [pc, #84]	; (80051fc <HAL_SPI_MspInit+0x90>)
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	4a14      	ldr	r2, [pc, #80]	; (80051fc <HAL_SPI_MspInit+0x90>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_SPI_MspInit+0x90>)
 80051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80051be:	23c2      	movs	r3, #194	; 0xc2
 80051c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c2:	2302      	movs	r3, #2
 80051c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051c6:	2301      	movs	r3, #1
 80051c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ca:	2303      	movs	r3, #3
 80051cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051ce:	2305      	movs	r3, #5
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051d2:	f107 0314 	add.w	r3, r7, #20
 80051d6:	4619      	mov	r1, r3
 80051d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051dc:	f002 f8f4 	bl	80073c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80051e0:	2200      	movs	r2, #0
 80051e2:	2100      	movs	r1, #0
 80051e4:	2023      	movs	r0, #35	; 0x23
 80051e6:	f001 fe80 	bl	8006eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80051ea:	2023      	movs	r0, #35	; 0x23
 80051ec:	f001 fe99 	bl	8006f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80051f0:	bf00      	nop
 80051f2:	3728      	adds	r7, #40	; 0x28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40013000 	.word	0x40013000
 80051fc:	40021000 	.word	0x40021000

08005200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <HAL_MspInit+0x44>)
 8005208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520a:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <HAL_MspInit+0x44>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	6613      	str	r3, [r2, #96]	; 0x60
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <HAL_MspInit+0x44>)
 8005214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <HAL_MspInit+0x44>)
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <HAL_MspInit+0x44>)
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005228:	6593      	str	r3, [r2, #88]	; 0x58
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_MspInit+0x44>)
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000

08005248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005256:	b480      	push	{r7}
 8005258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800525a:	e7fe      	b.n	800525a <HardFault_Handler+0x4>

0800525c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005260:	e7fe      	b.n	8005260 <MemManage_Handler+0x4>

08005262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005262:	b480      	push	{r7}
 8005264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005266:	e7fe      	b.n	8005266 <BusFault_Handler+0x4>

08005268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800526c:	e7fe      	b.n	800526c <UsageFault_Handler+0x4>

0800526e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800526e:	b480      	push	{r7}
 8005270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800528a:	b480      	push	{r7}
 800528c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800529c:	f000 f8c8 	bl	8005430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052a0:	bf00      	nop
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80052a8:	4802      	ldr	r0, [pc, #8]	; (80052b4 <DMA1_Channel1_IRQHandler+0x10>)
 80052aa:	f001 ffae 	bl	800720a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80052ae:	bf00      	nop
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	200000b0 	.word	0x200000b0

080052b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80052bc:	4802      	ldr	r0, [pc, #8]	; (80052c8 <SPI1_IRQHandler+0x10>)
 80052be:	f003 fe5d 	bl	8008f7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80052c2:	bf00      	nop
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000934 	.word	0x20000934

080052cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052d0:	4b17      	ldr	r3, [pc, #92]	; (8005330 <SystemInit+0x64>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	4a16      	ldr	r2, [pc, #88]	; (8005330 <SystemInit+0x64>)
 80052d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80052e0:	4b14      	ldr	r3, [pc, #80]	; (8005334 <SystemInit+0x68>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a13      	ldr	r2, [pc, #76]	; (8005334 <SystemInit+0x68>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80052ec:	4b11      	ldr	r3, [pc, #68]	; (8005334 <SystemInit+0x68>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <SystemInit+0x68>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a0f      	ldr	r2, [pc, #60]	; (8005334 <SystemInit+0x68>)
 80052f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80052fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005300:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <SystemInit+0x68>)
 8005304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005308:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800530a:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <SystemInit+0x68>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <SystemInit+0x68>)
 8005310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005314:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <SystemInit+0x68>)
 8005318:	2200      	movs	r2, #0
 800531a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <SystemInit+0x64>)
 800531e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005322:	609a      	str	r2, [r3, #8]
#endif
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000ed00 	.word	0xe000ed00
 8005334:	40021000 	.word	0x40021000

08005338 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005370 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800533c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800533e:	e003      	b.n	8005348 <LoopCopyDataInit>

08005340 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005342:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005344:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005346:	3104      	adds	r1, #4

08005348 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005348:	480b      	ldr	r0, [pc, #44]	; (8005378 <LoopForever+0xa>)
	ldr	r3, =_edata
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <LoopForever+0xe>)
	adds	r2, r0, r1
 800534c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800534e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005350:	d3f6      	bcc.n	8005340 <CopyDataInit>
	ldr	r2, =_sbss
 8005352:	4a0b      	ldr	r2, [pc, #44]	; (8005380 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005354:	e002      	b.n	800535c <LoopFillZerobss>

08005356 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005356:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005358:	f842 3b04 	str.w	r3, [r2], #4

0800535c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <LoopForever+0x16>)
	cmp	r2, r3
 800535e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005360:	d3f9      	bcc.n	8005356 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005362:	f7ff ffb3 	bl	80052cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005366:	f004 f845 	bl	80093f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800536a:	f7ff fdf1 	bl	8004f50 <main>

0800536e <LoopForever>:

LoopForever:
    b LoopForever
 800536e:	e7fe      	b.n	800536e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005370:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8005374:	080094ac 	.word	0x080094ac
	ldr	r0, =_sdata
 8005378:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800537c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8005380:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8005384:	20000b14 	.word	0x20000b14

08005388 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005388:	e7fe      	b.n	8005388 <ADC1_IRQHandler>

0800538a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005394:	2003      	movs	r0, #3
 8005396:	f001 fd9d 	bl	8006ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800539a:	2000      	movs	r0, #0
 800539c:	f000 f80e 	bl	80053bc <HAL_InitTick>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	71fb      	strb	r3, [r7, #7]
 80053aa:	e001      	b.n	80053b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80053ac:	f7ff ff28 	bl	8005200 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053b0:	79fb      	ldrb	r3, [r7, #7]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80053c8:	4b16      	ldr	r3, [pc, #88]	; (8005424 <HAL_InitTick+0x68>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d022      	beq.n	8005416 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80053d0:	4b15      	ldr	r3, [pc, #84]	; (8005428 <HAL_InitTick+0x6c>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <HAL_InitTick+0x68>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80053dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 fdaa 	bl	8006f3e <HAL_SYSTICK_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	d809      	bhi.n	800540a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053f6:	2200      	movs	r2, #0
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	f04f 30ff 	mov.w	r0, #4294967295
 80053fe:	f001 fd74 	bl	8006eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005402:	4a0a      	ldr	r2, [pc, #40]	; (800542c <HAL_InitTick+0x70>)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e007      	b.n	800541a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
 800540e:	e004      	b.n	800541a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
 8005414:	e001      	b.n	800541a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000008 	.word	0x20000008
 8005428:	20000000 	.word	0x20000000
 800542c:	20000004 	.word	0x20000004

08005430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_IncTick+0x1c>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HAL_IncTick+0x20>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4413      	add	r3, r2
 800543e:	4a03      	ldr	r2, [pc, #12]	; (800544c <HAL_IncTick+0x1c>)
 8005440:	6013      	str	r3, [r2, #0]
}
 8005442:	bf00      	nop
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	20000b10 	.word	0x20000b10
 8005450:	20000008 	.word	0x20000008

08005454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return uwTick;
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <HAL_GetTick+0x14>)
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000b10 	.word	0x20000b10

0800546c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005474:	f7ff ffee 	bl	8005454 <HAL_GetTick>
 8005478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d004      	beq.n	8005490 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_Delay+0x40>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005490:	bf00      	nop
 8005492:	f7ff ffdf 	bl	8005454 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d8f7      	bhi.n	8005492 <HAL_Delay+0x26>
  {
  }
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000008 	.word	0x20000008

080054b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	609a      	str	r2, [r3, #8]
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005518:	b490      	push	{r4, r7}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3360      	adds	r3, #96	; 0x60
 800552a:	461a      	mov	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <LL_ADC_SetOffset+0x40>)
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	4313      	orrs	r3, r2
 8005546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800554a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bc90      	pop	{r4, r7}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	03fff000 	.word	0x03fff000

0800555c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800555c:	b490      	push	{r4, r7}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3360      	adds	r3, #96	; 0x60
 800556a:	461a      	mov	r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bc90      	pop	{r4, r7}
 8005582:	4770      	bx	lr

08005584 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005584:	b490      	push	{r4, r7}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3360      	adds	r3, #96	; 0x60
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc90      	pop	{r4, r7}
 80055b2:	4770      	bx	lr

080055b4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	615a      	str	r2, [r3, #20]
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005600:	b490      	push	{r4, r7}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3330      	adds	r3, #48	; 0x30
 8005610:	461a      	mov	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	0a1b      	lsrs	r3, r3, #8
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	4413      	add	r3, r2
 800561e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	211f      	movs	r1, #31
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	401a      	ands	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	0e9b      	lsrs	r3, r3, #26
 8005636:	f003 011f 	and.w	r1, r3, #31
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	fa01 f303 	lsl.w	r3, r1, r3
 8005644:	4313      	orrs	r3, r2
 8005646:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bc90      	pop	{r4, r7}
 8005650:	4770      	bx	lr

08005652 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005652:	b490      	push	{r4, r7}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3314      	adds	r3, #20
 8005662:	461a      	mov	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	0e5b      	lsrs	r3, r3, #25
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	4413      	add	r3, r2
 8005670:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	0d1b      	lsrs	r3, r3, #20
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	2107      	movs	r1, #7
 800567e:	fa01 f303 	lsl.w	r3, r1, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	401a      	ands	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	0d1b      	lsrs	r3, r3, #20
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	4313      	orrs	r3, r2
 8005696:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bc90      	pop	{r4, r7}
 80056a0:	4770      	bx	lr
	...

080056a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056bc:	43db      	mvns	r3, r3
 80056be:	401a      	ands	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f003 0318 	and.w	r3, r3, #24
 80056c6:	4908      	ldr	r1, [pc, #32]	; (80056e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80056c8:	40d9      	lsrs	r1, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	400b      	ands	r3, r1
 80056ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d2:	431a      	orrs	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	0007ffff 	.word	0x0007ffff

080056ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80056fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6093      	str	r3, [r2, #8]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005724:	d101      	bne.n	800572a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800574c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005774:	d101      	bne.n	800577a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800579c:	f043 0201 	orr.w	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <LL_ADC_IsEnabled+0x18>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <LL_ADC_IsEnabled+0x1a>
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057ea:	f043 0204 	orr.w	r2, r3, #4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b04      	cmp	r3, #4
 8005810:	d101      	bne.n	8005816 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b08      	cmp	r3, #8
 8005836:	d101      	bne.n	800583c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005858:	2300      	movs	r3, #0
 800585a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e12d      	b.n	8005ac2 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7fa ff9b 	bl	80007b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ff3f 	bl	8005710 <LL_ADC_IsDeepPowerDownEnabled>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d004      	beq.n	80058a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff ff25 	bl	80056ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff ff5a 	bl	8005760 <LL_ADC_IsInternalRegulatorEnabled>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d113      	bne.n	80058da <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff ff3e 	bl	8005738 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80058bc:	4b83      	ldr	r3, [pc, #524]	; (8005acc <HAL_ADC_Init+0x280>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	099b      	lsrs	r3, r3, #6
 80058c2:	4a83      	ldr	r2, [pc, #524]	; (8005ad0 <HAL_ADC_Init+0x284>)
 80058c4:	fba2 2303 	umull	r2, r3, r2, r3
 80058c8:	099b      	lsrs	r3, r3, #6
 80058ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80058cc:	e002      	b.n	80058d4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f9      	bne.n	80058ce <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ff3e 	bl	8005760 <LL_ADC_IsInternalRegulatorEnabled>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10d      	bne.n	8005906 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	f043 0210 	orr.w	r2, r3, #16
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	f043 0201 	orr.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff ff77 	bl	80057fe <LL_ADC_REG_IsConversionOngoing>
 8005910:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b00      	cmp	r3, #0
 800591c:	f040 80c8 	bne.w	8005ab0 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f040 80c4 	bne.w	8005ab0 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005930:	f043 0202 	orr.w	r2, r3, #2
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ff37 	bl	80057b0 <LL_ADC_IsEnabled>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005948:	4862      	ldr	r0, [pc, #392]	; (8005ad4 <HAL_ADC_Init+0x288>)
 800594a:	f7ff ff31 	bl	80057b0 <LL_ADC_IsEnabled>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4619      	mov	r1, r3
 800595a:	485f      	ldr	r0, [pc, #380]	; (8005ad8 <HAL_ADC_Init+0x28c>)
 800595c:	f7ff fda8 	bl	80054b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	7e5b      	ldrb	r3, [r3, #25]
 8005964:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800596a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005970:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005976:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800597e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005980:	4313      	orrs	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d106      	bne.n	800599c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	3b01      	subs	r3, #1
 8005994:	045b      	lsls	r3, r3, #17
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	4b47      	ldr	r3, [pc, #284]	; (8005adc <HAL_ADC_Init+0x290>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	69b9      	ldr	r1, [r7, #24]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff ff14 	bl	80057fe <LL_ADC_REG_IsConversionOngoing>
 80059d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff ff21 	bl	8005824 <LL_ADC_INJ_IsConversionOngoing>
 80059e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d140      	bne.n	8005a6c <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d13d      	bne.n	8005a6c <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	7e1b      	ldrb	r3, [r3, #24]
 80059f8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80059fa:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a02:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a12:	f023 0306 	bic.w	r3, r3, #6
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d118      	bne.n	8005a5c <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a34:	f023 0304 	bic.w	r3, r3, #4
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a40:	4311      	orrs	r1, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a46:	4311      	orrs	r1, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	611a      	str	r2, [r3, #16]
 8005a5a:	e007      	b.n	8005a6c <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d10c      	bne.n	8005a8e <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	f023 010f 	bic.w	r1, r3, #15
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	1e5a      	subs	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a8c:	e007      	b.n	8005a9e <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 020f 	bic.w	r2, r2, #15
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	f043 0201 	orr.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	659a      	str	r2, [r3, #88]	; 0x58
 8005aae:	e007      	b.n	8005ac0 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab4:	f043 0210 	orr.w	r2, r3, #16
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ac0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000000 	.word	0x20000000
 8005ad0:	053e2d63 	.word	0x053e2d63
 8005ad4:	50040000 	.word	0x50040000
 8005ad8:	50040300 	.word	0x50040300
 8005adc:	fff0c007 	.word	0xfff0c007

08005ae0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff fe84 	bl	80057fe <LL_ADC_REG_IsConversionOngoing>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d167      	bne.n	8005bcc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_ADC_Start_DMA+0x2a>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e063      	b.n	8005bd2 <HAL_ADC_Start_DMA+0xf2>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fbf4 	bl	8006300 <ADC_Enable>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d14f      	bne.n	8005bc2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d006      	beq.n	8005b50 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	f023 0206 	bic.w	r2, r3, #6
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b4e:	e002      	b.n	8005b56 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5a:	4a20      	ldr	r2, [pc, #128]	; (8005bdc <HAL_ADC_Start_DMA+0xfc>)
 8005b5c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b62:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <HAL_ADC_Start_DMA+0x100>)
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6a:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <HAL_ADC_Start_DMA+0x104>)
 8005b6c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	221c      	movs	r2, #28
 8005b74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0210 	orr.w	r2, r2, #16
 8005b8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3340      	adds	r3, #64	; 0x40
 8005ba8:	4619      	mov	r1, r3
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f001 fa8b 	bl	80070c8 <HAL_DMA_Start_IT>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fe0b 	bl	80057d6 <LL_ADC_REG_StartConversion>
 8005bc0:	e006      	b.n	8005bd0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005bca:	e001      	b.n	8005bd0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	080063b5 	.word	0x080063b5
 8005be0:	0800648d 	.word	0x0800648d
 8005be4:	080064a9 	.word	0x080064a9

08005be8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b0a6      	sub	sp, #152	; 0x98
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_ADC_ConfigChannel+0x22>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e352      	b.n	80062ec <HAL_ADC_ConfigChannel+0x6c8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff fdd3 	bl	80057fe <LL_ADC_REG_IsConversionOngoing>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 8337 	bne.w	80062ce <HAL_ADC_ConfigChannel+0x6aa>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b05      	cmp	r3, #5
 8005c66:	d824      	bhi.n	8005cb2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	3b02      	subs	r3, #2
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d81b      	bhi.n	8005caa <HAL_ADC_ConfigChannel+0x86>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <HAL_ADC_ConfigChannel+0x54>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005c89 	.word	0x08005c89
 8005c7c:	08005c91 	.word	0x08005c91
 8005c80:	08005c99 	.word	0x08005c99
 8005c84:	08005ca1 	.word	0x08005ca1
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	220c      	movs	r2, #12
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	e011      	b.n	8005cb4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2212      	movs	r2, #18
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	e00d      	b.n	8005cb4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2218      	movs	r2, #24
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	e009      	b.n	8005cb4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	e004      	b.n	8005cb4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2206      	movs	r2, #6
 8005cae:	605a      	str	r2, [r3, #4]
 8005cb0:	e000      	b.n	8005cb4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005cb2:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f7ff fc9d 	bl	8005600 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fd97 	bl	80057fe <LL_ADC_REG_IsConversionOngoing>
 8005cd0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fda3 	bl	8005824 <LL_ADC_INJ_IsConversionOngoing>
 8005cde:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 8163 	bne.w	8005fb2 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 815e 	bne.w	8005fb2 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cfe:	d10f      	bne.n	8005d20 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	f7ff fca1 	bl	8005652 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fc4b 	bl	80055b4 <LL_ADC_SetSamplingTimeCommonConfig>
 8005d1e:	e00e      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6819      	ldr	r1, [r3, #0]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f7ff fc90 	bl	8005652 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2100      	movs	r1, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fc3b 	bl	80055b4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	08db      	lsrs	r3, r3, #3
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d00a      	beq.n	8005d76 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6919      	ldr	r1, [r3, #16]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d70:	f7ff fbd2 	bl	8005518 <LL_ADC_SetOffset>
 8005d74:	e11d      	b.n	8005fb2 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fbed 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <HAL_ADC_ConfigChannel+0x17e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fbe2 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	0e9b      	lsrs	r3, r3, #26
 8005d9c:	f003 021f 	and.w	r2, r3, #31
 8005da0:	e012      	b.n	8005dc8 <HAL_ADC_ConfigChannel+0x1a4>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fbd7 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005db8:	fa93 f3a3 	rbit	r3, r3
 8005dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005dbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dc0:	fab3 f383 	clz	r3, r3
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d105      	bne.n	8005de0 <HAL_ADC_ConfigChannel+0x1bc>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	0e9b      	lsrs	r3, r3, #26
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	e00a      	b.n	8005df6 <HAL_ADC_ConfigChannel+0x1d2>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de8:	fa93 f3a3 	rbit	r3, r3
 8005dec:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8005dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df0:	fab3 f383 	clz	r3, r3
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d106      	bne.n	8005e08 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2100      	movs	r1, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fbbe 	bl	8005584 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fba4 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <HAL_ADC_ConfigChannel+0x210>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2101      	movs	r1, #1
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fb99 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	0e9b      	lsrs	r3, r3, #26
 8005e2e:	f003 021f 	and.w	r2, r3, #31
 8005e32:	e010      	b.n	8005e56 <HAL_ADC_ConfigChannel+0x232>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2101      	movs	r1, #1
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff fb8e 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005e40:	4603      	mov	r3, r0
 8005e42:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e46:	fa93 f3a3 	rbit	r3, r3
 8005e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4e:	fab3 f383 	clz	r3, r3
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d105      	bne.n	8005e6e <HAL_ADC_ConfigChannel+0x24a>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	0e9b      	lsrs	r3, r3, #26
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	e00a      	b.n	8005e84 <HAL_ADC_ConfigChannel+0x260>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e76:	fa93 f3a3 	rbit	r3, r3
 8005e7a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7e:	fab3 f383 	clz	r3, r3
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d106      	bne.n	8005e96 <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2101      	movs	r1, #1
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fb77 	bl	8005584 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fb5d 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <HAL_ADC_ConfigChannel+0x29e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fb52 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	0e9b      	lsrs	r3, r3, #26
 8005ebc:	f003 021f 	and.w	r2, r3, #31
 8005ec0:	e010      	b.n	8005ee4 <HAL_ADC_ConfigChannel+0x2c0>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fb47 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed4:	fa93 f3a3 	rbit	r3, r3
 8005ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8005eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005edc:	fab3 f383 	clz	r3, r3
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x2d8>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	0e9b      	lsrs	r3, r3, #26
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	e00a      	b.n	8005f12 <HAL_ADC_ConfigChannel+0x2ee>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f04:	fa93 f3a3 	rbit	r3, r3
 8005f08:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f0c:	fab3 f383 	clz	r3, r3
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d106      	bne.n	8005f24 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fb30 	bl	8005584 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2103      	movs	r1, #3
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fb16 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x32c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2103      	movs	r1, #3
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fb0b 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005f46:	4603      	mov	r3, r0
 8005f48:	0e9b      	lsrs	r3, r3, #26
 8005f4a:	f003 021f 	and.w	r2, r3, #31
 8005f4e:	e010      	b.n	8005f72 <HAL_ADC_ConfigChannel+0x34e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2103      	movs	r1, #3
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fb00 	bl	800555c <LL_ADC_GetOffsetChannel>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f62:	fa93 f3a3 	rbit	r3, r3
 8005f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6a:	fab3 f383 	clz	r3, r3
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d105      	bne.n	8005f8a <HAL_ADC_ConfigChannel+0x366>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	0e9b      	lsrs	r3, r3, #26
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	e00a      	b.n	8005fa0 <HAL_ADC_ConfigChannel+0x37c>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f92:	fa93 f3a3 	rbit	r3, r3
 8005f96:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8005f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9a:	fab3 f383 	clz	r3, r3
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d106      	bne.n	8005fb2 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2103      	movs	r1, #3
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff fae9 	bl	8005584 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff fbfa 	bl	80057b0 <LL_ADC_IsEnabled>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f040 810c 	bne.w	80061dc <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6819      	ldr	r1, [r3, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f7ff fb67 	bl	80056a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	4aa8      	ldr	r2, [pc, #672]	; (800627c <HAL_ADC_ConfigChannel+0x658>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	f040 80fd 	bne.w	80061dc <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <HAL_ADC_ConfigChannel+0x3e6>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	0e9b      	lsrs	r3, r3, #26
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2b09      	cmp	r3, #9
 8006000:	bf94      	ite	ls
 8006002:	2301      	movls	r3, #1
 8006004:	2300      	movhi	r3, #0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	e012      	b.n	8006030 <HAL_ADC_ConfigChannel+0x40c>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006012:	fa93 f3a3 	rbit	r3, r3
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601a:	fab3 f383 	clz	r3, r3
 800601e:	b2db      	uxtb	r3, r3
 8006020:	3301      	adds	r3, #1
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	2b09      	cmp	r3, #9
 8006028:	bf94      	ite	ls
 800602a:	2301      	movls	r3, #1
 800602c:	2300      	movhi	r3, #0
 800602e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006030:	2b00      	cmp	r3, #0
 8006032:	d064      	beq.n	80060fe <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603c:	2b00      	cmp	r3, #0
 800603e:	d107      	bne.n	8006050 <HAL_ADC_ConfigChannel+0x42c>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	0e9b      	lsrs	r3, r3, #26
 8006046:	3301      	adds	r3, #1
 8006048:	069b      	lsls	r3, r3, #26
 800604a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800604e:	e00e      	b.n	800606e <HAL_ADC_ConfigChannel+0x44a>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	fa93 f3a3 	rbit	r3, r3
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	fab3 f383 	clz	r3, r3
 8006064:	b2db      	uxtb	r3, r3
 8006066:	3301      	adds	r3, #1
 8006068:	069b      	lsls	r3, r3, #26
 800606a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_ADC_ConfigChannel+0x46a>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	0e9b      	lsrs	r3, r3, #26
 8006080:	3301      	adds	r3, #1
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	2101      	movs	r1, #1
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	e010      	b.n	80060b0 <HAL_ADC_ConfigChannel+0x48c>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	fa93 f3a3 	rbit	r3, r3
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	fab3 f383 	clz	r3, r3
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	3301      	adds	r3, #1
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2101      	movs	r1, #1
 80060ac:	fa01 f303 	lsl.w	r3, r1, r3
 80060b0:	ea42 0103 	orr.w	r1, r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <HAL_ADC_ConfigChannel+0x4b2>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	0e9b      	lsrs	r3, r3, #26
 80060c6:	3301      	adds	r3, #1
 80060c8:	f003 021f 	and.w	r2, r3, #31
 80060cc:	4613      	mov	r3, r2
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4413      	add	r3, r2
 80060d2:	051b      	lsls	r3, r3, #20
 80060d4:	e011      	b.n	80060fa <HAL_ADC_ConfigChannel+0x4d6>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	fa93 f3a3 	rbit	r3, r3
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	fab3 f383 	clz	r3, r3
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	3301      	adds	r3, #1
 80060ee:	f003 021f 	and.w	r2, r3, #31
 80060f2:	4613      	mov	r3, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	4413      	add	r3, r2
 80060f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060fa:	430b      	orrs	r3, r1
 80060fc:	e069      	b.n	80061d2 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006106:	2b00      	cmp	r3, #0
 8006108:	d107      	bne.n	800611a <HAL_ADC_ConfigChannel+0x4f6>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	0e9b      	lsrs	r3, r3, #26
 8006110:	3301      	adds	r3, #1
 8006112:	069b      	lsls	r3, r3, #26
 8006114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006118:	e00e      	b.n	8006138 <HAL_ADC_ConfigChannel+0x514>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	fa93 f3a3 	rbit	r3, r3
 8006126:	61fb      	str	r3, [r7, #28]
  return result;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	fab3 f383 	clz	r3, r3
 800612e:	b2db      	uxtb	r3, r3
 8006130:	3301      	adds	r3, #1
 8006132:	069b      	lsls	r3, r3, #26
 8006134:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <HAL_ADC_ConfigChannel+0x534>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	0e9b      	lsrs	r3, r3, #26
 800614a:	3301      	adds	r3, #1
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	2101      	movs	r1, #1
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	e010      	b.n	800617a <HAL_ADC_ConfigChannel+0x556>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	fa93 f3a3 	rbit	r3, r3
 8006164:	617b      	str	r3, [r7, #20]
  return result;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	fab3 f383 	clz	r3, r3
 800616c:	b2db      	uxtb	r3, r3
 800616e:	3301      	adds	r3, #1
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	2101      	movs	r1, #1
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	ea42 0103 	orr.w	r1, r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10d      	bne.n	80061a6 <HAL_ADC_ConfigChannel+0x582>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	0e9b      	lsrs	r3, r3, #26
 8006190:	3301      	adds	r3, #1
 8006192:	f003 021f 	and.w	r2, r3, #31
 8006196:	4613      	mov	r3, r2
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4413      	add	r3, r2
 800619c:	3b1e      	subs	r3, #30
 800619e:	051b      	lsls	r3, r3, #20
 80061a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061a4:	e014      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x5ac>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	fa93 f3a3 	rbit	r3, r3
 80061b2:	60fb      	str	r3, [r7, #12]
  return result;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	fab3 f383 	clz	r3, r3
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	3301      	adds	r3, #1
 80061be:	f003 021f 	and.w	r2, r3, #31
 80061c2:	4613      	mov	r3, r2
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	4413      	add	r3, r2
 80061c8:	3b1e      	subs	r3, #30
 80061ca:	051b      	lsls	r3, r3, #20
 80061cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061d0:	430b      	orrs	r3, r1
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	6892      	ldr	r2, [r2, #8]
 80061d6:	4619      	mov	r1, r3
 80061d8:	f7ff fa3b 	bl	8005652 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	4b27      	ldr	r3, [pc, #156]	; (8006280 <HAL_ADC_ConfigChannel+0x65c>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d07b      	beq.n	80062e0 <HAL_ADC_ConfigChannel+0x6bc>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061e8:	4826      	ldr	r0, [pc, #152]	; (8006284 <HAL_ADC_ConfigChannel+0x660>)
 80061ea:	f7ff f987 	bl	80054fc <LL_ADC_GetCommonPathInternalCh>
 80061ee:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a24      	ldr	r2, [pc, #144]	; (8006288 <HAL_ADC_ConfigChannel+0x664>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d126      	bne.n	800624a <HAL_ADC_ConfigChannel+0x626>
 80061fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d120      	bne.n	800624a <HAL_ADC_ConfigChannel+0x626>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1f      	ldr	r2, [pc, #124]	; (800628c <HAL_ADC_ConfigChannel+0x668>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d166      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006216:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800621a:	4619      	mov	r1, r3
 800621c:	4819      	ldr	r0, [pc, #100]	; (8006284 <HAL_ADC_ConfigChannel+0x660>)
 800621e:	f7ff f95a 	bl	80054d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006222:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <HAL_ADC_ConfigChannel+0x66c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_ADC_ConfigChannel+0x670>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	099a      	lsrs	r2, r3, #6
 8006230:	4613      	mov	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800623a:	e002      	b.n	8006242 <HAL_ADC_ConfigChannel+0x61e>
          {
            wait_loop_index--;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	3b01      	subs	r3, #1
 8006240:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1f9      	bne.n	800623c <HAL_ADC_ConfigChannel+0x618>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006248:	e04a      	b.n	80062e0 <HAL_ADC_ConfigChannel+0x6bc>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a12      	ldr	r2, [pc, #72]	; (8006298 <HAL_ADC_ConfigChannel+0x674>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d123      	bne.n	800629c <HAL_ADC_ConfigChannel+0x678>
 8006254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d11d      	bne.n	800629c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a09      	ldr	r2, [pc, #36]	; (800628c <HAL_ADC_ConfigChannel+0x668>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d13a      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800626a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800626e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006272:	4619      	mov	r1, r3
 8006274:	4803      	ldr	r0, [pc, #12]	; (8006284 <HAL_ADC_ConfigChannel+0x660>)
 8006276:	f7ff f92e 	bl	80054d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800627a:	e031      	b.n	80062e0 <HAL_ADC_ConfigChannel+0x6bc>
 800627c:	407f0000 	.word	0x407f0000
 8006280:	80080000 	.word	0x80080000
 8006284:	50040300 	.word	0x50040300
 8006288:	c7520000 	.word	0xc7520000
 800628c:	50040000 	.word	0x50040000
 8006290:	20000000 	.word	0x20000000
 8006294:	053e2d63 	.word	0x053e2d63
 8006298:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a14      	ldr	r2, [pc, #80]	; (80062f4 <HAL_ADC_ConfigChannel+0x6d0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d11c      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x6bc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80062a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d116      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x6bc>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a10      	ldr	r2, [pc, #64]	; (80062f8 <HAL_ADC_ConfigChannel+0x6d4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d111      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062c4:	4619      	mov	r1, r3
 80062c6:	480d      	ldr	r0, [pc, #52]	; (80062fc <HAL_ADC_ConfigChannel+0x6d8>)
 80062c8:	f7ff f905 	bl	80054d6 <LL_ADC_SetCommonPathInternalCh>
 80062cc:	e008      	b.n	80062e0 <HAL_ADC_ConfigChannel+0x6bc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d2:	f043 0220 	orr.w	r2, r3, #32
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80062e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3798      	adds	r7, #152	; 0x98
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	80000001 	.word	0x80000001
 80062f8:	50040000 	.word	0x50040000
 80062fc:	50040300 	.word	0x50040300

08006300 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fa4f 	bl	80057b0 <LL_ADC_IsEnabled>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d146      	bne.n	80063a6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	4b24      	ldr	r3, [pc, #144]	; (80063b0 <ADC_Enable+0xb0>)
 8006320:	4013      	ands	r3, r2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632a:	f043 0210 	orr.w	r2, r3, #16
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006336:	f043 0201 	orr.w	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e032      	b.n	80063a8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fa1e 	bl	8005788 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800634c:	f7ff f882 	bl	8005454 <HAL_GetTick>
 8006350:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006352:	e021      	b.n	8006398 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fa29 	bl	80057b0 <LL_ADC_IsEnabled>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff fa0d 	bl	8005788 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800636e:	f7ff f871 	bl	8005454 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d90d      	bls.n	8006398 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	f043 0210 	orr.w	r2, r3, #16
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	f043 0201 	orr.w	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e007      	b.n	80063a8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d1d6      	bne.n	8006354 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	8000003f 	.word	0x8000003f

080063b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d14b      	bne.n	8006466 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d021      	beq.n	800642c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff f8f4 	bl	80055da <LL_ADC_REG_IsTriggerSourceSWStart>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d032      	beq.n	800645e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d12b      	bne.n	800645e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d11f      	bne.n	800645e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006422:	f043 0201 	orr.w	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	659a      	str	r2, [r3, #88]	; 0x58
 800642a:	e018      	b.n	800645e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d111      	bne.n	800645e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d105      	bne.n	800645e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006456:	f043 0201 	orr.w	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fbc2 	bl	8005be8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006464:	e00e      	b.n	8006484 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7ff fbcc 	bl	8005c10 <HAL_ADC_ErrorCallback>
}
 8006478:	e004      	b.n	8006484 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff fbae 	bl	8005bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80064a0:	bf00      	nop
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	f043 0204 	orr.w	r2, r3, #4
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fb9e 	bl	8005c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e0ed      	b.n	80066ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fa fa16 	bl	800092c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0202 	bic.w	r2, r2, #2
 800650e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006510:	f7fe ffa0 	bl	8005454 <HAL_GetTick>
 8006514:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006516:	e012      	b.n	800653e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006518:	f7fe ff9c 	bl	8005454 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b0a      	cmp	r3, #10
 8006524:	d90b      	bls.n	800653e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2205      	movs	r2, #5
 8006536:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e0c5      	b.n	80066ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e5      	bne.n	8006518 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800655c:	f7fe ff7a 	bl	8005454 <HAL_GetTick>
 8006560:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006562:	e012      	b.n	800658a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006564:	f7fe ff76 	bl	8005454 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b0a      	cmp	r3, #10
 8006570:	d90b      	bls.n	800658a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2205      	movs	r2, #5
 8006582:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e09f      	b.n	80066ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0e5      	beq.n	8006564 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	7e1b      	ldrb	r3, [r3, #24]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d108      	bne.n	80065b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e007      	b.n	80065c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	7e5b      	ldrb	r3, [r3, #25]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d108      	bne.n	80065dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	e007      	b.n	80065ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7e9b      	ldrb	r3, [r3, #26]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d108      	bne.n	8006606 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0220 	orr.w	r2, r2, #32
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	e007      	b.n	8006616 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0220 	bic.w	r2, r2, #32
 8006614:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7edb      	ldrb	r3, [r3, #27]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d108      	bne.n	8006630 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0210 	bic.w	r2, r2, #16
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e007      	b.n	8006640 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0210 	orr.w	r2, r2, #16
 800663e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7f1b      	ldrb	r3, [r3, #28]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d108      	bne.n	800665a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0208 	orr.w	r2, r2, #8
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e007      	b.n	800666a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0208 	bic.w	r2, r2, #8
 8006668:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	7f5b      	ldrb	r3, [r3, #29]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d108      	bne.n	8006684 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0204 	orr.w	r2, r2, #4
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e007      	b.n	8006694 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0204 	bic.w	r2, r2, #4
 8006692:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	ea42 0103 	orr.w	r1, r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	1e5a      	subs	r2, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b087      	sub	sp, #28
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80066ea:	7cfb      	ldrb	r3, [r7, #19]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d003      	beq.n	80066f8 <HAL_CAN_ConfigFilter+0x26>
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	f040 80aa 	bne.w	800684c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2201      	movs	r2, #1
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	43db      	mvns	r3, r3
 8006722:	401a      	ands	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d123      	bne.n	800677a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	43db      	mvns	r3, r3
 800673c:	401a      	ands	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006754:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	3248      	adds	r2, #72	; 0x48
 800675a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800676e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006770:	6979      	ldr	r1, [r7, #20]
 8006772:	3348      	adds	r3, #72	; 0x48
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	440b      	add	r3, r1
 8006778:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d122      	bne.n	80067c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	431a      	orrs	r2, r3
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80067a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	3248      	adds	r2, #72	; 0x48
 80067a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80067bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80067be:	6979      	ldr	r1, [r7, #20]
 80067c0:	3348      	adds	r3, #72	; 0x48
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	440b      	add	r3, r1
 80067c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d109      	bne.n	80067e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	43db      	mvns	r3, r3
 80067da:	401a      	ands	r2, r3
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80067e2:	e007      	b.n	80067f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	43db      	mvns	r3, r3
 8006806:	401a      	ands	r2, r3
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800680e:	e007      	b.n	8006820 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	431a      	orrs	r2, r3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d107      	bne.n	8006838 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	431a      	orrs	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e006      	b.n	800685a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
  }
}
 800685a:	4618      	mov	r0, r3
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b01      	cmp	r3, #1
 8006878:	d12e      	bne.n	80068d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2202      	movs	r2, #2
 800687e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006892:	f7fe fddf 	bl	8005454 <HAL_GetTick>
 8006896:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006898:	e012      	b.n	80068c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800689a:	f7fe fddb 	bl	8005454 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b0a      	cmp	r3, #10
 80068a6:	d90b      	bls.n	80068c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2205      	movs	r2, #5
 80068b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e012      	b.n	80068e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e5      	bne.n	800689a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	e006      	b.n	80068e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
  }
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b089      	sub	sp, #36	; 0x24
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	607a      	str	r2, [r7, #4]
 80068fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006902:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800690c:	7ffb      	ldrb	r3, [r7, #31]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d003      	beq.n	800691a <HAL_CAN_AddTxMessage+0x2c>
 8006912:	7ffb      	ldrb	r3, [r7, #31]
 8006914:	2b02      	cmp	r3, #2
 8006916:	f040 80b8 	bne.w	8006a8a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80a0 	beq.w	8006a7a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	0e1b      	lsrs	r3, r3, #24
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d907      	bls.n	800695a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e09e      	b.n	8006a98 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800695a:	2201      	movs	r2, #1
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	409a      	lsls	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10d      	bne.n	8006988 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006976:	68f9      	ldr	r1, [r7, #12]
 8006978:	6809      	ldr	r1, [r1, #0]
 800697a:	431a      	orrs	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	3318      	adds	r3, #24
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	440b      	add	r3, r1
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e00f      	b.n	80069a8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006992:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006998:	68f9      	ldr	r1, [r7, #12]
 800699a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800699c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	3318      	adds	r3, #24
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	440b      	add	r3, r1
 80069a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6819      	ldr	r1, [r3, #0]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	3318      	adds	r3, #24
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	440b      	add	r3, r1
 80069b8:	3304      	adds	r3, #4
 80069ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	7d1b      	ldrb	r3, [r3, #20]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d111      	bne.n	80069e8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	3318      	adds	r3, #24
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	4413      	add	r3, r2
 80069d0:	3304      	adds	r3, #4
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	6811      	ldr	r1, [r2, #0]
 80069d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	3318      	adds	r3, #24
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	440b      	add	r3, r1
 80069e4:	3304      	adds	r3, #4
 80069e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3307      	adds	r3, #7
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	061a      	lsls	r2, r3, #24
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3306      	adds	r3, #6
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	041b      	lsls	r3, r3, #16
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3305      	adds	r3, #5
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	4313      	orrs	r3, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	3204      	adds	r2, #4
 8006a08:	7812      	ldrb	r2, [r2, #0]
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	6811      	ldr	r1, [r2, #0]
 8006a10:	ea43 0200 	orr.w	r2, r3, r0
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	440b      	add	r3, r1
 8006a1a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006a1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3303      	adds	r3, #3
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	061a      	lsls	r2, r3, #24
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3302      	adds	r3, #2
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	041b      	lsls	r3, r3, #16
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3301      	adds	r3, #1
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7812      	ldrb	r2, [r2, #0]
 8006a40:	4610      	mov	r0, r2
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	6811      	ldr	r1, [r2, #0]
 8006a46:	ea43 0200 	orr.w	r2, r3, r0
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	440b      	add	r3, r1
 8006a50:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006a54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	3318      	adds	r3, #24
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	4413      	add	r3, r2
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	6811      	ldr	r1, [r2, #0]
 8006a68:	f043 0201 	orr.w	r2, r3, #1
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	3318      	adds	r3, #24
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	440b      	add	r3, r1
 8006a74:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	e00e      	b.n	8006a98 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e006      	b.n	8006a98 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
  }
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3724      	adds	r7, #36	; 0x24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ab6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d002      	beq.n	8006ac4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d11d      	bne.n	8006b00 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b087      	sub	sp, #28
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b22:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d003      	beq.n	8006b32 <HAL_CAN_GetRxMessage+0x24>
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	f040 80f4 	bne.w	8006d1a <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10e      	bne.n	8006b56 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d116      	bne.n	8006b74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e0e8      	b.n	8006d28 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d107      	bne.n	8006b74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0d9      	b.n	8006d28 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	331b      	adds	r3, #27
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	4413      	add	r3, r2
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0204 	and.w	r2, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10c      	bne.n	8006bac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	331b      	adds	r3, #27
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	4413      	add	r3, r2
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	0d5b      	lsrs	r3, r3, #21
 8006ba2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e00b      	b.n	8006bc4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	331b      	adds	r3, #27
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	4413      	add	r3, r2
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	08db      	lsrs	r3, r3, #3
 8006bbc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	331b      	adds	r3, #27
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	4413      	add	r3, r2
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	f003 0201 	and.w	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	331b      	adds	r3, #27
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	4413      	add	r3, r2
 8006be8:	3304      	adds	r3, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 020f 	and.w	r2, r3, #15
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	331b      	adds	r3, #27
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	4413      	add	r3, r2
 8006c00:	3304      	adds	r3, #4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	0a1b      	lsrs	r3, r3, #8
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	331b      	adds	r3, #27
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	4413      	add	r3, r2
 8006c18:	3304      	adds	r3, #4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	0c1b      	lsrs	r3, r3, #16
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	0a1a      	lsrs	r2, r3, #8
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	0c1a      	lsrs	r2, r3, #16
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	3302      	adds	r3, #2
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	0e1a      	lsrs	r2, r3, #24
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	3303      	adds	r3, #3
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	0a1a      	lsrs	r2, r3, #8
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	3305      	adds	r3, #5
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	0c1a      	lsrs	r2, r3, #16
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	3306      	adds	r3, #6
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	0e1a      	lsrs	r2, r3, #24
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	3307      	adds	r3, #7
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d108      	bne.n	8006d06 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0220 	orr.w	r2, r2, #32
 8006d02:	60da      	str	r2, [r3, #12]
 8006d04:	e007      	b.n	8006d16 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0220 	orr.w	r2, r2, #32
 8006d14:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e006      	b.n	8006d28 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
  }
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <__NVIC_SetPriorityGrouping+0x44>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d50:	4013      	ands	r3, r2
 8006d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d66:	4a04      	ldr	r2, [pc, #16]	; (8006d78 <__NVIC_SetPriorityGrouping+0x44>)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	60d3      	str	r3, [r2, #12]
}
 8006d6c:	bf00      	nop
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	e000ed00 	.word	0xe000ed00

08006d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <__NVIC_GetPriorityGrouping+0x18>)
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	0a1b      	lsrs	r3, r3, #8
 8006d86:	f003 0307 	and.w	r3, r3, #7
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	e000ed00 	.word	0xe000ed00

08006d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	db0b      	blt.n	8006dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	f003 021f 	and.w	r2, r3, #31
 8006db0:	4907      	ldr	r1, [pc, #28]	; (8006dd0 <__NVIC_EnableIRQ+0x38>)
 8006db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	2001      	movs	r0, #1
 8006dba:	fa00 f202 	lsl.w	r2, r0, r2
 8006dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	e000e100 	.word	0xe000e100

08006dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	6039      	str	r1, [r7, #0]
 8006dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	db0a      	blt.n	8006dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	490c      	ldr	r1, [pc, #48]	; (8006e20 <__NVIC_SetPriority+0x4c>)
 8006dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006df2:	0112      	lsls	r2, r2, #4
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	440b      	add	r3, r1
 8006df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006dfc:	e00a      	b.n	8006e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	4908      	ldr	r1, [pc, #32]	; (8006e24 <__NVIC_SetPriority+0x50>)
 8006e04:	79fb      	ldrb	r3, [r7, #7]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	3b04      	subs	r3, #4
 8006e0c:	0112      	lsls	r2, r2, #4
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	440b      	add	r3, r1
 8006e12:	761a      	strb	r2, [r3, #24]
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	e000e100 	.word	0xe000e100
 8006e24:	e000ed00 	.word	0xe000ed00

08006e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	; 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f1c3 0307 	rsb	r3, r3, #7
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	bf28      	it	cs
 8006e46:	2304      	movcs	r3, #4
 8006e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	2b06      	cmp	r3, #6
 8006e50:	d902      	bls.n	8006e58 <NVIC_EncodePriority+0x30>
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	3b03      	subs	r3, #3
 8006e56:	e000      	b.n	8006e5a <NVIC_EncodePriority+0x32>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	fa02 f303 	lsl.w	r3, r2, r3
 8006e66:	43da      	mvns	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	401a      	ands	r2, r3
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e70:	f04f 31ff 	mov.w	r1, #4294967295
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7a:	43d9      	mvns	r1, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e80:	4313      	orrs	r3, r2
         );
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3724      	adds	r7, #36	; 0x24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ea0:	d301      	bcc.n	8006ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e00f      	b.n	8006ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ea6:	4a0a      	ldr	r2, [pc, #40]	; (8006ed0 <SysTick_Config+0x40>)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eae:	210f      	movs	r1, #15
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb4:	f7ff ff8e 	bl	8006dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <SysTick_Config+0x40>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <SysTick_Config+0x40>)
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	e000e010 	.word	0xe000e010

08006ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff ff29 	bl	8006d34 <__NVIC_SetPriorityGrouping>
}
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b086      	sub	sp, #24
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006efc:	f7ff ff3e 	bl	8006d7c <__NVIC_GetPriorityGrouping>
 8006f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	6978      	ldr	r0, [r7, #20]
 8006f08:	f7ff ff8e 	bl	8006e28 <NVIC_EncodePriority>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f12:	4611      	mov	r1, r2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff ff5d 	bl	8006dd4 <__NVIC_SetPriority>
}
 8006f1a:	bf00      	nop
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	4603      	mov	r3, r0
 8006f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff ff31 	bl	8006d98 <__NVIC_EnableIRQ>
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff ffa2 	bl	8006e90 <SysTick_Config>
 8006f4c:	4603      	mov	r3, r0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e098      	b.n	800709c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	4b4d      	ldr	r3, [pc, #308]	; (80070a8 <HAL_DMA_Init+0x150>)
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d80f      	bhi.n	8006f96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	4b4b      	ldr	r3, [pc, #300]	; (80070ac <HAL_DMA_Init+0x154>)
 8006f7e:	4413      	add	r3, r2
 8006f80:	4a4b      	ldr	r2, [pc, #300]	; (80070b0 <HAL_DMA_Init+0x158>)
 8006f82:	fba2 2303 	umull	r2, r3, r2, r3
 8006f86:	091b      	lsrs	r3, r3, #4
 8006f88:	009a      	lsls	r2, r3, #2
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a48      	ldr	r2, [pc, #288]	; (80070b4 <HAL_DMA_Init+0x15c>)
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
 8006f94:	e00e      	b.n	8006fb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	4b46      	ldr	r3, [pc, #280]	; (80070b8 <HAL_DMA_Init+0x160>)
 8006f9e:	4413      	add	r3, r2
 8006fa0:	4a43      	ldr	r2, [pc, #268]	; (80070b0 <HAL_DMA_Init+0x158>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	091b      	lsrs	r3, r3, #4
 8006fa8:	009a      	lsls	r2, r3, #2
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a42      	ldr	r2, [pc, #264]	; (80070bc <HAL_DMA_Init+0x164>)
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800700e:	d039      	beq.n	8007084 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	4a27      	ldr	r2, [pc, #156]	; (80070b4 <HAL_DMA_Init+0x15c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d11a      	bne.n	8007050 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800701a:	4b29      	ldr	r3, [pc, #164]	; (80070c0 <HAL_DMA_Init+0x168>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	f003 031c 	and.w	r3, r3, #28
 8007026:	210f      	movs	r1, #15
 8007028:	fa01 f303 	lsl.w	r3, r1, r3
 800702c:	43db      	mvns	r3, r3
 800702e:	4924      	ldr	r1, [pc, #144]	; (80070c0 <HAL_DMA_Init+0x168>)
 8007030:	4013      	ands	r3, r2
 8007032:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007034:	4b22      	ldr	r3, [pc, #136]	; (80070c0 <HAL_DMA_Init+0x168>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6859      	ldr	r1, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007040:	f003 031c 	and.w	r3, r3, #28
 8007044:	fa01 f303 	lsl.w	r3, r1, r3
 8007048:	491d      	ldr	r1, [pc, #116]	; (80070c0 <HAL_DMA_Init+0x168>)
 800704a:	4313      	orrs	r3, r2
 800704c:	600b      	str	r3, [r1, #0]
 800704e:	e019      	b.n	8007084 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007050:	4b1c      	ldr	r3, [pc, #112]	; (80070c4 <HAL_DMA_Init+0x16c>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007058:	f003 031c 	and.w	r3, r3, #28
 800705c:	210f      	movs	r1, #15
 800705e:	fa01 f303 	lsl.w	r3, r1, r3
 8007062:	43db      	mvns	r3, r3
 8007064:	4917      	ldr	r1, [pc, #92]	; (80070c4 <HAL_DMA_Init+0x16c>)
 8007066:	4013      	ands	r3, r2
 8007068:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800706a:	4b16      	ldr	r3, [pc, #88]	; (80070c4 <HAL_DMA_Init+0x16c>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6859      	ldr	r1, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007076:	f003 031c 	and.w	r3, r3, #28
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	4911      	ldr	r1, [pc, #68]	; (80070c4 <HAL_DMA_Init+0x16c>)
 8007080:	4313      	orrs	r3, r2
 8007082:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	40020407 	.word	0x40020407
 80070ac:	bffdfff8 	.word	0xbffdfff8
 80070b0:	cccccccd 	.word	0xcccccccd
 80070b4:	40020000 	.word	0x40020000
 80070b8:	bffdfbf8 	.word	0xbffdfbf8
 80070bc:	40020400 	.word	0x40020400
 80070c0:	400200a8 	.word	0x400200a8
 80070c4:	400204a8 	.word	0x400204a8

080070c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_DMA_Start_IT+0x20>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e04b      	b.n	8007180 <HAL_DMA_Start_IT+0xb8>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d13a      	bne.n	8007172 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f921 	bl	8007368 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	2b00      	cmp	r3, #0
 800712c:	d008      	beq.n	8007140 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 020e 	orr.w	r2, r2, #14
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e00f      	b.n	8007160 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0204 	bic.w	r2, r2, #4
 800714e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 020a 	orr.w	r2, r2, #10
 800715e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e005      	b.n	800717e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800717a:	2302      	movs	r3, #2
 800717c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d005      	beq.n	80071ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2204      	movs	r2, #4
 80071a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	73fb      	strb	r3, [r7, #15]
 80071aa:	e029      	b.n	8007200 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 020e 	bic.w	r2, r2, #14
 80071ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 0201 	bic.w	r2, r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d0:	f003 021c 	and.w	r2, r3, #28
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	2101      	movs	r1, #1
 80071da:	fa01 f202 	lsl.w	r2, r1, r2
 80071de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
    }
  }
  return status;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	f003 031c 	and.w	r3, r3, #28
 800722a:	2204      	movs	r2, #4
 800722c:	409a      	lsls	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d026      	beq.n	8007284 <HAL_DMA_IRQHandler+0x7a>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d021      	beq.n	8007284 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d107      	bne.n	800725e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0204 	bic.w	r2, r2, #4
 800725c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007262:	f003 021c 	and.w	r2, r3, #28
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	2104      	movs	r1, #4
 800726c:	fa01 f202 	lsl.w	r2, r1, r2
 8007270:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	2b00      	cmp	r3, #0
 8007278:	d071      	beq.n	800735e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007282:	e06c      	b.n	800735e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007288:	f003 031c 	and.w	r3, r3, #28
 800728c:	2202      	movs	r2, #2
 800728e:	409a      	lsls	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4013      	ands	r3, r2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02e      	beq.n	80072f6 <HAL_DMA_IRQHandler+0xec>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d029      	beq.n	80072f6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10b      	bne.n	80072c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 020a 	bic.w	r2, r2, #10
 80072be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072cc:	f003 021c 	and.w	r2, r3, #28
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	2102      	movs	r1, #2
 80072d6:	fa01 f202 	lsl.w	r2, r1, r2
 80072da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d038      	beq.n	800735e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80072f4:	e033      	b.n	800735e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fa:	f003 031c 	and.w	r3, r3, #28
 80072fe:	2208      	movs	r2, #8
 8007300:	409a      	lsls	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4013      	ands	r3, r2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d02a      	beq.n	8007360 <HAL_DMA_IRQHandler+0x156>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d025      	beq.n	8007360 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 020e 	bic.w	r2, r2, #14
 8007322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007328:	f003 021c 	and.w	r2, r3, #28
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	2101      	movs	r1, #1
 8007332:	fa01 f202 	lsl.w	r2, r1, r2
 8007336:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007352:	2b00      	cmp	r3, #0
 8007354:	d004      	beq.n	8007360 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800735e:	bf00      	nop
 8007360:	bf00      	nop
}
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737a:	f003 021c 	and.w	r2, r3, #28
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	2101      	movs	r1, #1
 8007384:	fa01 f202 	lsl.w	r2, r1, r2
 8007388:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b10      	cmp	r3, #16
 8007398:	d108      	bne.n	80073ac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80073aa:	e007      	b.n	80073bc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073d6:	e154      	b.n	8007682 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	2101      	movs	r1, #1
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	fa01 f303 	lsl.w	r3, r1, r3
 80073e4:	4013      	ands	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 8146 	beq.w	800767c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d00b      	beq.n	8007410 <HAL_GPIO_Init+0x48>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d007      	beq.n	8007410 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007404:	2b11      	cmp	r3, #17
 8007406:	d003      	beq.n	8007410 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b12      	cmp	r3, #18
 800740e:	d130      	bne.n	8007472 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	2203      	movs	r2, #3
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	43db      	mvns	r3, r3
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4013      	ands	r3, r2
 8007426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007446:	2201      	movs	r2, #1
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43db      	mvns	r3, r3
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4013      	ands	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f003 0201 	and.w	r2, r3, #1
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	2203      	movs	r2, #3
 800747e:	fa02 f303 	lsl.w	r3, r2, r3
 8007482:	43db      	mvns	r3, r3
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4013      	ands	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d003      	beq.n	80074b2 <HAL_GPIO_Init+0xea>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b12      	cmp	r3, #18
 80074b0:	d123      	bne.n	80074fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	08da      	lsrs	r2, r3, #3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3208      	adds	r2, #8
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	220f      	movs	r2, #15
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	43db      	mvns	r3, r3
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4013      	ands	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	fa02 f303 	lsl.w	r3, r2, r3
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	08da      	lsrs	r2, r3, #3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3208      	adds	r2, #8
 80074f4:	6939      	ldr	r1, [r7, #16]
 80074f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	2203      	movs	r2, #3
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	43db      	mvns	r3, r3
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4013      	ands	r3, r2
 8007510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f003 0203 	and.w	r2, r3, #3
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	fa02 f303 	lsl.w	r3, r2, r3
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 80a0 	beq.w	800767c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800753c:	4b58      	ldr	r3, [pc, #352]	; (80076a0 <HAL_GPIO_Init+0x2d8>)
 800753e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007540:	4a57      	ldr	r2, [pc, #348]	; (80076a0 <HAL_GPIO_Init+0x2d8>)
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	6613      	str	r3, [r2, #96]	; 0x60
 8007548:	4b55      	ldr	r3, [pc, #340]	; (80076a0 <HAL_GPIO_Init+0x2d8>)
 800754a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007554:	4a53      	ldr	r2, [pc, #332]	; (80076a4 <HAL_GPIO_Init+0x2dc>)
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	089b      	lsrs	r3, r3, #2
 800755a:	3302      	adds	r3, #2
 800755c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f003 0303 	and.w	r3, r3, #3
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	220f      	movs	r2, #15
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	43db      	mvns	r3, r3
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4013      	ands	r3, r2
 8007576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800757e:	d019      	beq.n	80075b4 <HAL_GPIO_Init+0x1ec>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a49      	ldr	r2, [pc, #292]	; (80076a8 <HAL_GPIO_Init+0x2e0>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d013      	beq.n	80075b0 <HAL_GPIO_Init+0x1e8>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a48      	ldr	r2, [pc, #288]	; (80076ac <HAL_GPIO_Init+0x2e4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d00d      	beq.n	80075ac <HAL_GPIO_Init+0x1e4>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a47      	ldr	r2, [pc, #284]	; (80076b0 <HAL_GPIO_Init+0x2e8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d007      	beq.n	80075a8 <HAL_GPIO_Init+0x1e0>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a46      	ldr	r2, [pc, #280]	; (80076b4 <HAL_GPIO_Init+0x2ec>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d101      	bne.n	80075a4 <HAL_GPIO_Init+0x1dc>
 80075a0:	2304      	movs	r3, #4
 80075a2:	e008      	b.n	80075b6 <HAL_GPIO_Init+0x1ee>
 80075a4:	2307      	movs	r3, #7
 80075a6:	e006      	b.n	80075b6 <HAL_GPIO_Init+0x1ee>
 80075a8:	2303      	movs	r3, #3
 80075aa:	e004      	b.n	80075b6 <HAL_GPIO_Init+0x1ee>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e002      	b.n	80075b6 <HAL_GPIO_Init+0x1ee>
 80075b0:	2301      	movs	r3, #1
 80075b2:	e000      	b.n	80075b6 <HAL_GPIO_Init+0x1ee>
 80075b4:	2300      	movs	r3, #0
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	f002 0203 	and.w	r2, r2, #3
 80075bc:	0092      	lsls	r2, r2, #2
 80075be:	4093      	lsls	r3, r2
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80075c6:	4937      	ldr	r1, [pc, #220]	; (80076a4 <HAL_GPIO_Init+0x2dc>)
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	089b      	lsrs	r3, r3, #2
 80075cc:	3302      	adds	r3, #2
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80075d4:	4b38      	ldr	r3, [pc, #224]	; (80076b8 <HAL_GPIO_Init+0x2f0>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	43db      	mvns	r3, r3
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	4013      	ands	r3, r2
 80075e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80075f8:	4a2f      	ldr	r2, [pc, #188]	; (80076b8 <HAL_GPIO_Init+0x2f0>)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80075fe:	4b2e      	ldr	r3, [pc, #184]	; (80076b8 <HAL_GPIO_Init+0x2f0>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	43db      	mvns	r3, r3
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4013      	ands	r3, r2
 800760c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007622:	4a25      	ldr	r2, [pc, #148]	; (80076b8 <HAL_GPIO_Init+0x2f0>)
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007628:	4b23      	ldr	r3, [pc, #140]	; (80076b8 <HAL_GPIO_Init+0x2f0>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	43db      	mvns	r3, r3
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	4013      	ands	r3, r2
 8007636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800764c:	4a1a      	ldr	r2, [pc, #104]	; (80076b8 <HAL_GPIO_Init+0x2f0>)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007652:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <HAL_GPIO_Init+0x2f0>)
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	43db      	mvns	r3, r3
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4013      	ands	r3, r2
 8007660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007676:	4a10      	ldr	r2, [pc, #64]	; (80076b8 <HAL_GPIO_Init+0x2f0>)
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	3301      	adds	r3, #1
 8007680:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	fa22 f303 	lsr.w	r3, r2, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	f47f aea3 	bne.w	80073d8 <HAL_GPIO_Init+0x10>
  }
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40021000 	.word	0x40021000
 80076a4:	40010000 	.word	0x40010000
 80076a8:	48000400 	.word	0x48000400
 80076ac:	48000800 	.word	0x48000800
 80076b0:	48000c00 	.word	0x48000c00
 80076b4:	48001000 	.word	0x48001000
 80076b8:	40010400 	.word	0x40010400

080076bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	807b      	strh	r3, [r7, #2]
 80076c8:	4613      	mov	r3, r2
 80076ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076cc:	787b      	ldrb	r3, [r7, #1]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80076d2:	887a      	ldrh	r2, [r7, #2]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80076d8:	e002      	b.n	80076e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80076da:	887a      	ldrh	r2, [r7, #2]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80076f0:	4b04      	ldr	r3, [pc, #16]	; (8007704 <HAL_PWREx_GetVoltageRange+0x18>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40007000 	.word	0x40007000

08007708 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007716:	d130      	bne.n	800777a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007718:	4b23      	ldr	r3, [pc, #140]	; (80077a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007724:	d038      	beq.n	8007798 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007726:	4b20      	ldr	r3, [pc, #128]	; (80077a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800772e:	4a1e      	ldr	r2, [pc, #120]	; (80077a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007734:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007736:	4b1d      	ldr	r3, [pc, #116]	; (80077ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2232      	movs	r2, #50	; 0x32
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	4a1b      	ldr	r2, [pc, #108]	; (80077b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	0c9b      	lsrs	r3, r3, #18
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800774c:	e002      	b.n	8007754 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3b01      	subs	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007754:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800775c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007760:	d102      	bne.n	8007768 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1f2      	bne.n	800774e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007768:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007774:	d110      	bne.n	8007798 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e00f      	b.n	800779a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800777a:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007786:	d007      	beq.n	8007798 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007788:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007790:	4a05      	ldr	r2, [pc, #20]	; (80077a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007796:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	40007000 	.word	0x40007000
 80077ac:	20000000 	.word	0x20000000
 80077b0:	431bde83 	.word	0x431bde83

080077b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f000 bc11 	b.w	8007fea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077c8:	4ba0      	ldr	r3, [pc, #640]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 030c 	and.w	r3, r3, #12
 80077d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077d2:	4b9e      	ldr	r3, [pc, #632]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 80e4 	beq.w	80079b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <HAL_RCC_OscConfig+0x4c>
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b0c      	cmp	r3, #12
 80077f4:	f040 808b 	bne.w	800790e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	f040 8087 	bne.w	800790e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007800:	4b92      	ldr	r3, [pc, #584]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <HAL_RCC_OscConfig+0x64>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e3e8      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1a      	ldr	r2, [r3, #32]
 800781c:	4b8b      	ldr	r3, [pc, #556]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <HAL_RCC_OscConfig+0x7e>
 8007828:	4b88      	ldr	r3, [pc, #544]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007830:	e005      	b.n	800783e <HAL_RCC_OscConfig+0x8a>
 8007832:	4b86      	ldr	r3, [pc, #536]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007838:	091b      	lsrs	r3, r3, #4
 800783a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800783e:	4293      	cmp	r3, r2
 8007840:	d223      	bcs.n	800788a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fd40 	bl	80082cc <RCC_SetFlashLatencyFromMSIRange>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e3c9      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007856:	4b7d      	ldr	r3, [pc, #500]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a7c      	ldr	r2, [pc, #496]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 800785c:	f043 0308 	orr.w	r3, r3, #8
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	4b7a      	ldr	r3, [pc, #488]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	4977      	ldr	r1, [pc, #476]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007870:	4313      	orrs	r3, r2
 8007872:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007874:	4b75      	ldr	r3, [pc, #468]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	4972      	ldr	r1, [pc, #456]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007884:	4313      	orrs	r3, r2
 8007886:	604b      	str	r3, [r1, #4]
 8007888:	e025      	b.n	80078d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800788a:	4b70      	ldr	r3, [pc, #448]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a6f      	ldr	r2, [pc, #444]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007890:	f043 0308 	orr.w	r3, r3, #8
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	4b6d      	ldr	r3, [pc, #436]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	496a      	ldr	r1, [pc, #424]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078a8:	4b68      	ldr	r3, [pc, #416]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	4965      	ldr	r1, [pc, #404]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fd00 	bl	80082cc <RCC_SetFlashLatencyFromMSIRange>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e389      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078d6:	f000 fc6f 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 80078da:	4601      	mov	r1, r0
 80078dc:	4b5b      	ldr	r3, [pc, #364]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	091b      	lsrs	r3, r3, #4
 80078e2:	f003 030f 	and.w	r3, r3, #15
 80078e6:	4a5a      	ldr	r2, [pc, #360]	; (8007a50 <HAL_RCC_OscConfig+0x29c>)
 80078e8:	5cd3      	ldrb	r3, [r2, r3]
 80078ea:	f003 031f 	and.w	r3, r3, #31
 80078ee:	fa21 f303 	lsr.w	r3, r1, r3
 80078f2:	4a58      	ldr	r2, [pc, #352]	; (8007a54 <HAL_RCC_OscConfig+0x2a0>)
 80078f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80078f6:	4b58      	ldr	r3, [pc, #352]	; (8007a58 <HAL_RCC_OscConfig+0x2a4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fd fd5e 	bl	80053bc <HAL_InitTick>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d052      	beq.n	80079b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	e36d      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d032      	beq.n	800797c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007916:	4b4d      	ldr	r3, [pc, #308]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a4c      	ldr	r2, [pc, #304]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007922:	f7fd fd97 	bl	8005454 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800792a:	f7fd fd93 	bl	8005454 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e356      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800793c:	4b43      	ldr	r3, [pc, #268]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0f0      	beq.n	800792a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007948:	4b40      	ldr	r3, [pc, #256]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a3f      	ldr	r2, [pc, #252]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 800794e:	f043 0308 	orr.w	r3, r3, #8
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	4b3d      	ldr	r3, [pc, #244]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	493a      	ldr	r1, [pc, #232]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007962:	4313      	orrs	r3, r2
 8007964:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007966:	4b39      	ldr	r3, [pc, #228]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	4935      	ldr	r1, [pc, #212]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007976:	4313      	orrs	r3, r2
 8007978:	604b      	str	r3, [r1, #4]
 800797a:	e01a      	b.n	80079b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800797c:	4b33      	ldr	r3, [pc, #204]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a32      	ldr	r2, [pc, #200]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007988:	f7fd fd64 	bl	8005454 <HAL_GetTick>
 800798c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007990:	f7fd fd60 	bl	8005454 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e323      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079a2:	4b2a      	ldr	r3, [pc, #168]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1f0      	bne.n	8007990 <HAL_RCC_OscConfig+0x1dc>
 80079ae:	e000      	b.n	80079b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80079b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d073      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d005      	beq.n	80079d0 <HAL_RCC_OscConfig+0x21c>
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b0c      	cmp	r3, #12
 80079c8:	d10e      	bne.n	80079e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d10b      	bne.n	80079e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079d0:	4b1e      	ldr	r3, [pc, #120]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d063      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x2f0>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d15f      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e300      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f0:	d106      	bne.n	8007a00 <HAL_RCC_OscConfig+0x24c>
 80079f2:	4b16      	ldr	r3, [pc, #88]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a15      	ldr	r2, [pc, #84]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 80079f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	e01d      	b.n	8007a3c <HAL_RCC_OscConfig+0x288>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a08:	d10c      	bne.n	8007a24 <HAL_RCC_OscConfig+0x270>
 8007a0a:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a0f      	ldr	r2, [pc, #60]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	4b0d      	ldr	r3, [pc, #52]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a0c      	ldr	r2, [pc, #48]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	e00b      	b.n	8007a3c <HAL_RCC_OscConfig+0x288>
 8007a24:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a08      	ldr	r2, [pc, #32]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a05      	ldr	r2, [pc, #20]	; (8007a4c <HAL_RCC_OscConfig+0x298>)
 8007a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01b      	beq.n	8007a7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a44:	f7fd fd06 	bl	8005454 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a4a:	e010      	b.n	8007a6e <HAL_RCC_OscConfig+0x2ba>
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	08009464 	.word	0x08009464
 8007a54:	20000000 	.word	0x20000000
 8007a58:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a5c:	f7fd fcfa 	bl	8005454 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b64      	cmp	r3, #100	; 0x64
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e2bd      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a6e:	4baf      	ldr	r3, [pc, #700]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0f0      	beq.n	8007a5c <HAL_RCC_OscConfig+0x2a8>
 8007a7a:	e014      	b.n	8007aa6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7c:	f7fd fcea 	bl	8005454 <HAL_GetTick>
 8007a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a82:	e008      	b.n	8007a96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a84:	f7fd fce6 	bl	8005454 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b64      	cmp	r3, #100	; 0x64
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e2a9      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a96:	4ba5      	ldr	r3, [pc, #660]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1f0      	bne.n	8007a84 <HAL_RCC_OscConfig+0x2d0>
 8007aa2:	e000      	b.n	8007aa6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d060      	beq.n	8007b74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d005      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x310>
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	2b0c      	cmp	r3, #12
 8007abc:	d119      	bne.n	8007af2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d116      	bne.n	8007af2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ac4:	4b99      	ldr	r3, [pc, #612]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <HAL_RCC_OscConfig+0x328>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e286      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007adc:	4b93      	ldr	r3, [pc, #588]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	061b      	lsls	r3, r3, #24
 8007aea:	4990      	ldr	r1, [pc, #576]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007af0:	e040      	b.n	8007b74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d023      	beq.n	8007b42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007afa:	4b8c      	ldr	r3, [pc, #560]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a8b      	ldr	r2, [pc, #556]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b06:	f7fd fca5 	bl	8005454 <HAL_GetTick>
 8007b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b0c:	e008      	b.n	8007b20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b0e:	f7fd fca1 	bl	8005454 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d901      	bls.n	8007b20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e264      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b20:	4b82      	ldr	r3, [pc, #520]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d0f0      	beq.n	8007b0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b2c:	4b7f      	ldr	r3, [pc, #508]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	061b      	lsls	r3, r3, #24
 8007b3a:	497c      	ldr	r1, [pc, #496]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	604b      	str	r3, [r1, #4]
 8007b40:	e018      	b.n	8007b74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b42:	4b7a      	ldr	r3, [pc, #488]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a79      	ldr	r2, [pc, #484]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4e:	f7fd fc81 	bl	8005454 <HAL_GetTick>
 8007b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b54:	e008      	b.n	8007b68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b56:	f7fd fc7d 	bl	8005454 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e240      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b68:	4b70      	ldr	r3, [pc, #448]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f0      	bne.n	8007b56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d03c      	beq.n	8007bfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01c      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b88:	4b68      	ldr	r3, [pc, #416]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b8e:	4a67      	ldr	r2, [pc, #412]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b98:	f7fd fc5c 	bl	8005454 <HAL_GetTick>
 8007b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ba0:	f7fd fc58 	bl	8005454 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e21b      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bb2:	4b5e      	ldr	r3, [pc, #376]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0ef      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x3ec>
 8007bc0:	e01b      	b.n	8007bfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bc2:	4b5a      	ldr	r3, [pc, #360]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bc8:	4a58      	ldr	r2, [pc, #352]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007bca:	f023 0301 	bic.w	r3, r3, #1
 8007bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd2:	f7fd fc3f 	bl	8005454 <HAL_GetTick>
 8007bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bd8:	e008      	b.n	8007bec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bda:	f7fd fc3b 	bl	8005454 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e1fe      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bec:	4b4f      	ldr	r3, [pc, #316]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1ef      	bne.n	8007bda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80a6 	beq.w	8007d54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007c0c:	4b47      	ldr	r3, [pc, #284]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10d      	bne.n	8007c34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c18:	4b44      	ldr	r3, [pc, #272]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1c:	4a43      	ldr	r2, [pc, #268]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c22:	6593      	str	r3, [r2, #88]	; 0x58
 8007c24:	4b41      	ldr	r3, [pc, #260]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c30:	2301      	movs	r3, #1
 8007c32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c34:	4b3e      	ldr	r3, [pc, #248]	; (8007d30 <HAL_RCC_OscConfig+0x57c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d118      	bne.n	8007c72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c40:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <HAL_RCC_OscConfig+0x57c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a3a      	ldr	r2, [pc, #232]	; (8007d30 <HAL_RCC_OscConfig+0x57c>)
 8007c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c4c:	f7fd fc02 	bl	8005454 <HAL_GetTick>
 8007c50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c52:	e008      	b.n	8007c66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c54:	f7fd fbfe 	bl	8005454 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e1c1      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c66:	4b32      	ldr	r3, [pc, #200]	; (8007d30 <HAL_RCC_OscConfig+0x57c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f0      	beq.n	8007c54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d108      	bne.n	8007c8c <HAL_RCC_OscConfig+0x4d8>
 8007c7a:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c80:	4a2a      	ldr	r2, [pc, #168]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c8a:	e024      	b.n	8007cd6 <HAL_RCC_OscConfig+0x522>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	2b05      	cmp	r3, #5
 8007c92:	d110      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x502>
 8007c94:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9a:	4a24      	ldr	r2, [pc, #144]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007c9c:	f043 0304 	orr.w	r3, r3, #4
 8007ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ca4:	4b21      	ldr	r3, [pc, #132]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007caa:	4a20      	ldr	r2, [pc, #128]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cb4:	e00f      	b.n	8007cd6 <HAL_RCC_OscConfig+0x522>
 8007cb6:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbc:	4a1b      	ldr	r2, [pc, #108]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007cbe:	f023 0301 	bic.w	r3, r3, #1
 8007cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cc6:	4b19      	ldr	r3, [pc, #100]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ccc:	4a17      	ldr	r2, [pc, #92]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007cce:	f023 0304 	bic.w	r3, r3, #4
 8007cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d016      	beq.n	8007d0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cde:	f7fd fbb9 	bl	8005454 <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ce4:	e00a      	b.n	8007cfc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce6:	f7fd fbb5 	bl	8005454 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e176      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cfc:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <HAL_RCC_OscConfig+0x578>)
 8007cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0ed      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x532>
 8007d0a:	e01a      	b.n	8007d42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d0c:	f7fd fba2 	bl	8005454 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d12:	e00f      	b.n	8007d34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d14:	f7fd fb9e 	bl	8005454 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d906      	bls.n	8007d34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e15f      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
 8007d2a:	bf00      	nop
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d34:	4baa      	ldr	r3, [pc, #680]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e8      	bne.n	8007d14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d42:	7ffb      	ldrb	r3, [r7, #31]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d105      	bne.n	8007d54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d48:	4ba5      	ldr	r3, [pc, #660]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4c:	4aa4      	ldr	r2, [pc, #656]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d03c      	beq.n	8007dda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01c      	beq.n	8007da2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d68:	4b9d      	ldr	r3, [pc, #628]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d6e:	4a9c      	ldr	r2, [pc, #624]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007d70:	f043 0301 	orr.w	r3, r3, #1
 8007d74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d78:	f7fd fb6c 	bl	8005454 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d80:	f7fd fb68 	bl	8005454 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e12b      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d92:	4b93      	ldr	r3, [pc, #588]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d0ef      	beq.n	8007d80 <HAL_RCC_OscConfig+0x5cc>
 8007da0:	e01b      	b.n	8007dda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007da2:	4b8f      	ldr	r3, [pc, #572]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007da8:	4a8d      	ldr	r2, [pc, #564]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007daa:	f023 0301 	bic.w	r3, r3, #1
 8007dae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db2:	f7fd fb4f 	bl	8005454 <HAL_GetTick>
 8007db6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007db8:	e008      	b.n	8007dcc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dba:	f7fd fb4b 	bl	8005454 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e10e      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dcc:	4b84      	ldr	r3, [pc, #528]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1ef      	bne.n	8007dba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 8102 	beq.w	8007fe8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	f040 80c5 	bne.w	8007f78 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007dee:	4b7c      	ldr	r3, [pc, #496]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f003 0203 	and.w	r2, r3, #3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d12c      	bne.n	8007e5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d123      	bne.n	8007e5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d11b      	bne.n	8007e5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d113      	bne.n	8007e5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	3b01      	subs	r3, #1
 8007e42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d109      	bne.n	8007e5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	3b01      	subs	r3, #1
 8007e56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d067      	beq.n	8007f2c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b0c      	cmp	r3, #12
 8007e60:	d062      	beq.n	8007f28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007e62:	4b5f      	ldr	r3, [pc, #380]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e0bb      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007e72:	4b5b      	ldr	r3, [pc, #364]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a5a      	ldr	r2, [pc, #360]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007e78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e7e:	f7fd fae9 	bl	8005454 <HAL_GetTick>
 8007e82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e84:	e008      	b.n	8007e98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e86:	f7fd fae5 	bl	8005454 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e0a8      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e98:	4b51      	ldr	r3, [pc, #324]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1f0      	bne.n	8007e86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ea4:	4b4e      	ldr	r3, [pc, #312]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	4b4e      	ldr	r3, [pc, #312]	; (8007fe4 <HAL_RCC_OscConfig+0x830>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007eb4:	3a01      	subs	r2, #1
 8007eb6:	0112      	lsls	r2, r2, #4
 8007eb8:	4311      	orrs	r1, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ebe:	0212      	lsls	r2, r2, #8
 8007ec0:	4311      	orrs	r1, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ec6:	0852      	lsrs	r2, r2, #1
 8007ec8:	3a01      	subs	r2, #1
 8007eca:	0552      	lsls	r2, r2, #21
 8007ecc:	4311      	orrs	r1, r2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007ed2:	0852      	lsrs	r2, r2, #1
 8007ed4:	3a01      	subs	r2, #1
 8007ed6:	0652      	lsls	r2, r2, #25
 8007ed8:	4311      	orrs	r1, r2
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ede:	06d2      	lsls	r2, r2, #27
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	493f      	ldr	r1, [pc, #252]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007ee8:	4b3d      	ldr	r3, [pc, #244]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a3c      	ldr	r2, [pc, #240]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ef2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ef4:	4b3a      	ldr	r3, [pc, #232]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	4a39      	ldr	r2, [pc, #228]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007efe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f00:	f7fd faa8 	bl	8005454 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f08:	f7fd faa4 	bl	8005454 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e067      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f1a:	4b31      	ldr	r3, [pc, #196]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f0      	beq.n	8007f08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f26:	e05f      	b.n	8007fe8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e05e      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f2c:	4b2c      	ldr	r3, [pc, #176]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d157      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007f38:	4b29      	ldr	r3, [pc, #164]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a28      	ldr	r2, [pc, #160]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f44:	4b26      	ldr	r3, [pc, #152]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	4a25      	ldr	r2, [pc, #148]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f50:	f7fd fa80 	bl	8005454 <HAL_GetTick>
 8007f54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f58:	f7fd fa7c 	bl	8005454 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e03f      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f6a:	4b1d      	ldr	r3, [pc, #116]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0f0      	beq.n	8007f58 <HAL_RCC_OscConfig+0x7a4>
 8007f76:	e037      	b.n	8007fe8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b0c      	cmp	r3, #12
 8007f7c:	d02d      	beq.n	8007fda <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f7e:	4b18      	ldr	r3, [pc, #96]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f88:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f8a:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d105      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	4a11      	ldr	r2, [pc, #68]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007f9c:	f023 0303 	bic.w	r3, r3, #3
 8007fa0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	4a0e      	ldr	r2, [pc, #56]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007fa8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb2:	f7fd fa4f 	bl	8005454 <HAL_GetTick>
 8007fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fba:	f7fd fa4b 	bl	8005454 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e00e      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fcc:	4b04      	ldr	r3, [pc, #16]	; (8007fe0 <HAL_RCC_OscConfig+0x82c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f0      	bne.n	8007fba <HAL_RCC_OscConfig+0x806>
 8007fd8:	e006      	b.n	8007fe8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e005      	b.n	8007fea <HAL_RCC_OscConfig+0x836>
 8007fde:	bf00      	nop
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop

08007ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e0c8      	b.n	800819a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008008:	4b66      	ldr	r3, [pc, #408]	; (80081a4 <HAL_RCC_ClockConfig+0x1b0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d910      	bls.n	8008038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008016:	4b63      	ldr	r3, [pc, #396]	; (80081a4 <HAL_RCC_ClockConfig+0x1b0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f023 0207 	bic.w	r2, r3, #7
 800801e:	4961      	ldr	r1, [pc, #388]	; (80081a4 <HAL_RCC_ClockConfig+0x1b0>)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	4313      	orrs	r3, r2
 8008024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008026:	4b5f      	ldr	r3, [pc, #380]	; (80081a4 <HAL_RCC_ClockConfig+0x1b0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d001      	beq.n	8008038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e0b0      	b.n	800819a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d04c      	beq.n	80080de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d107      	bne.n	800805c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800804c:	4b56      	ldr	r3, [pc, #344]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d121      	bne.n	800809c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e09e      	b.n	800819a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d107      	bne.n	8008074 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008064:	4b50      	ldr	r3, [pc, #320]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d115      	bne.n	800809c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e092      	b.n	800819a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d107      	bne.n	800808c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800807c:	4b4a      	ldr	r3, [pc, #296]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d109      	bne.n	800809c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e086      	b.n	800819a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800808c:	4b46      	ldr	r3, [pc, #280]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e07e      	b.n	800819a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800809c:	4b42      	ldr	r3, [pc, #264]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f023 0203 	bic.w	r2, r3, #3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	493f      	ldr	r1, [pc, #252]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ae:	f7fd f9d1 	bl	8005454 <HAL_GetTick>
 80080b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080b4:	e00a      	b.n	80080cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080b6:	f7fd f9cd 	bl	8005454 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d901      	bls.n	80080cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e066      	b.n	800819a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080cc:	4b36      	ldr	r3, [pc, #216]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 020c 	and.w	r2, r3, #12
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	429a      	cmp	r2, r3
 80080dc:	d1eb      	bne.n	80080b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d008      	beq.n	80080fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ea:	4b2f      	ldr	r3, [pc, #188]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	492c      	ldr	r1, [pc, #176]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080fc:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <HAL_RCC_ClockConfig+0x1b0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d210      	bcs.n	800812c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800810a:	4b26      	ldr	r3, [pc, #152]	; (80081a4 <HAL_RCC_ClockConfig+0x1b0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f023 0207 	bic.w	r2, r3, #7
 8008112:	4924      	ldr	r1, [pc, #144]	; (80081a4 <HAL_RCC_ClockConfig+0x1b0>)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	4313      	orrs	r3, r2
 8008118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800811a:	4b22      	ldr	r3, [pc, #136]	; (80081a4 <HAL_RCC_ClockConfig+0x1b0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	429a      	cmp	r2, r3
 8008126:	d001      	beq.n	800812c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e036      	b.n	800819a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d008      	beq.n	800814a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008138:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	4918      	ldr	r1, [pc, #96]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008146:	4313      	orrs	r3, r2
 8008148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008156:	4b14      	ldr	r3, [pc, #80]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	4910      	ldr	r1, [pc, #64]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008166:	4313      	orrs	r3, r2
 8008168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800816a:	f000 f825 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 800816e:	4601      	mov	r1, r0
 8008170:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	091b      	lsrs	r3, r3, #4
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	4a0c      	ldr	r2, [pc, #48]	; (80081ac <HAL_RCC_ClockConfig+0x1b8>)
 800817c:	5cd3      	ldrb	r3, [r2, r3]
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	fa21 f303 	lsr.w	r3, r1, r3
 8008186:	4a0a      	ldr	r2, [pc, #40]	; (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <HAL_RCC_ClockConfig+0x1c0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f7fd f914 	bl	80053bc <HAL_InitTick>
 8008194:	4603      	mov	r3, r0
 8008196:	72fb      	strb	r3, [r7, #11]

  return status;
 8008198:	7afb      	ldrb	r3, [r7, #11]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40022000 	.word	0x40022000
 80081a8:	40021000 	.word	0x40021000
 80081ac:	08009464 	.word	0x08009464
 80081b0:	20000000 	.word	0x20000000
 80081b4:	20000004 	.word	0x20000004

080081b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b089      	sub	sp, #36	; 0x24
 80081bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]
 80081c2:	2300      	movs	r3, #0
 80081c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081c6:	4b3d      	ldr	r3, [pc, #244]	; (80082bc <HAL_RCC_GetSysClockFreq+0x104>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 030c 	and.w	r3, r3, #12
 80081ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081d0:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <HAL_RCC_GetSysClockFreq+0x104>)
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <HAL_RCC_GetSysClockFreq+0x34>
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	2b0c      	cmp	r3, #12
 80081e4:	d121      	bne.n	800822a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d11e      	bne.n	800822a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80081ec:	4b33      	ldr	r3, [pc, #204]	; (80082bc <HAL_RCC_GetSysClockFreq+0x104>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d107      	bne.n	8008208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80081f8:	4b30      	ldr	r3, [pc, #192]	; (80082bc <HAL_RCC_GetSysClockFreq+0x104>)
 80081fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	61fb      	str	r3, [r7, #28]
 8008206:	e005      	b.n	8008214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008208:	4b2c      	ldr	r3, [pc, #176]	; (80082bc <HAL_RCC_GetSysClockFreq+0x104>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	091b      	lsrs	r3, r3, #4
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008214:	4a2a      	ldr	r2, [pc, #168]	; (80082c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800821c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10d      	bne.n	8008240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008228:	e00a      	b.n	8008240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b04      	cmp	r3, #4
 800822e:	d102      	bne.n	8008236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008230:	4b24      	ldr	r3, [pc, #144]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008232:	61bb      	str	r3, [r7, #24]
 8008234:	e004      	b.n	8008240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b08      	cmp	r3, #8
 800823a:	d101      	bne.n	8008240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800823c:	4b22      	ldr	r3, [pc, #136]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800823e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2b0c      	cmp	r3, #12
 8008244:	d133      	bne.n	80082ae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008246:	4b1d      	ldr	r3, [pc, #116]	; (80082bc <HAL_RCC_GetSysClockFreq+0x104>)
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d002      	beq.n	800825c <HAL_RCC_GetSysClockFreq+0xa4>
 8008256:	2b03      	cmp	r3, #3
 8008258:	d003      	beq.n	8008262 <HAL_RCC_GetSysClockFreq+0xaa>
 800825a:	e005      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800825c:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800825e:	617b      	str	r3, [r7, #20]
      break;
 8008260:	e005      	b.n	800826e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008262:	4b19      	ldr	r3, [pc, #100]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008264:	617b      	str	r3, [r7, #20]
      break;
 8008266:	e002      	b.n	800826e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	617b      	str	r3, [r7, #20]
      break;
 800826c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800826e:	4b13      	ldr	r3, [pc, #76]	; (80082bc <HAL_RCC_GetSysClockFreq+0x104>)
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	091b      	lsrs	r3, r3, #4
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	3301      	adds	r3, #1
 800827a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800827c:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <HAL_RCC_GetSysClockFreq+0x104>)
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	0a1b      	lsrs	r3, r3, #8
 8008282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	fb02 f203 	mul.w	r2, r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008292:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008294:	4b09      	ldr	r3, [pc, #36]	; (80082bc <HAL_RCC_GetSysClockFreq+0x104>)
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	0e5b      	lsrs	r3, r3, #25
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	3301      	adds	r3, #1
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80082ae:	69bb      	ldr	r3, [r7, #24]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3724      	adds	r7, #36	; 0x24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	40021000 	.word	0x40021000
 80082c0:	08009474 	.word	0x08009474
 80082c4:	00f42400 	.word	0x00f42400
 80082c8:	007a1200 	.word	0x007a1200

080082cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80082d4:	2300      	movs	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80082d8:	4b2a      	ldr	r3, [pc, #168]	; (8008384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80082e4:	f7ff fa02 	bl	80076ec <HAL_PWREx_GetVoltageRange>
 80082e8:	6178      	str	r0, [r7, #20]
 80082ea:	e014      	b.n	8008316 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80082ec:	4b25      	ldr	r3, [pc, #148]	; (8008384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f0:	4a24      	ldr	r2, [pc, #144]	; (8008384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082f6:	6593      	str	r3, [r2, #88]	; 0x58
 80082f8:	4b22      	ldr	r3, [pc, #136]	; (8008384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008304:	f7ff f9f2 	bl	80076ec <HAL_PWREx_GetVoltageRange>
 8008308:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800830a:	4b1e      	ldr	r3, [pc, #120]	; (8008384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800830c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830e:	4a1d      	ldr	r2, [pc, #116]	; (8008384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008314:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800831c:	d10b      	bne.n	8008336 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b80      	cmp	r3, #128	; 0x80
 8008322:	d919      	bls.n	8008358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2ba0      	cmp	r3, #160	; 0xa0
 8008328:	d902      	bls.n	8008330 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800832a:	2302      	movs	r3, #2
 800832c:	613b      	str	r3, [r7, #16]
 800832e:	e013      	b.n	8008358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008330:	2301      	movs	r3, #1
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	e010      	b.n	8008358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b80      	cmp	r3, #128	; 0x80
 800833a:	d902      	bls.n	8008342 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800833c:	2303      	movs	r3, #3
 800833e:	613b      	str	r3, [r7, #16]
 8008340:	e00a      	b.n	8008358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b80      	cmp	r3, #128	; 0x80
 8008346:	d102      	bne.n	800834e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008348:	2302      	movs	r3, #2
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	e004      	b.n	8008358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b70      	cmp	r3, #112	; 0x70
 8008352:	d101      	bne.n	8008358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008354:	2301      	movs	r3, #1
 8008356:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f023 0207 	bic.w	r2, r3, #7
 8008360:	4909      	ldr	r1, [pc, #36]	; (8008388 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	4313      	orrs	r3, r2
 8008366:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008368:	4b07      	ldr	r3, [pc, #28]	; (8008388 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	429a      	cmp	r2, r3
 8008374:	d001      	beq.n	800837a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40021000 	.word	0x40021000
 8008388:	40022000 	.word	0x40022000

0800838c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008394:	2300      	movs	r3, #0
 8008396:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008398:	2300      	movs	r3, #0
 800839a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d02f      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083b0:	d005      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x32>
 80083b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083b6:	d015      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80083bc:	e00f      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80083be:	4b5d      	ldr	r3, [pc, #372]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	4a5c      	ldr	r2, [pc, #368]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80083c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083ca:	e00c      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3304      	adds	r3, #4
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fa44 	bl	8008860 <RCCEx_PLLSAI1_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083dc:	e003      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	74fb      	strb	r3, [r7, #19]
      break;
 80083e2:	e000      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80083e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e6:	7cfb      	ldrb	r3, [r7, #19]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083ec:	4b51      	ldr	r3, [pc, #324]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80083ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fa:	494e      	ldr	r1, [pc, #312]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008402:	e001      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	7cfb      	ldrb	r3, [r7, #19]
 8008406:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 809e 	beq.w	8008552 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008416:	2300      	movs	r3, #0
 8008418:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800841a:	4b46      	ldr	r3, [pc, #280]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800841c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8008426:	2301      	movs	r3, #1
 8008428:	e000      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800842a:	2300      	movs	r3, #0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00d      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008430:	4b40      	ldr	r3, [pc, #256]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008434:	4a3f      	ldr	r2, [pc, #252]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800843a:	6593      	str	r3, [r2, #88]	; 0x58
 800843c:	4b3d      	ldr	r3, [pc, #244]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008448:	2301      	movs	r3, #1
 800844a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800844c:	4b3a      	ldr	r3, [pc, #232]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a39      	ldr	r2, [pc, #228]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008456:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008458:	f7fc fffc 	bl	8005454 <HAL_GetTick>
 800845c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800845e:	e009      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008460:	f7fc fff8 	bl	8005454 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d902      	bls.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	74fb      	strb	r3, [r7, #19]
        break;
 8008472:	e005      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008474:	4b30      	ldr	r3, [pc, #192]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0ef      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8008480:	7cfb      	ldrb	r3, [r7, #19]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d15a      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008486:	4b2b      	ldr	r3, [pc, #172]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008490:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01e      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d019      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80084a2:	4b24      	ldr	r3, [pc, #144]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80084a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084ae:	4b21      	ldr	r3, [pc, #132]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80084b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b4:	4a1f      	ldr	r2, [pc, #124]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80084b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084be:	4b1d      	ldr	r3, [pc, #116]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80084c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c4:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80084c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80084ce:	4a19      	ldr	r2, [pc, #100]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d016      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e0:	f7fc ffb8 	bl	8005454 <HAL_GetTick>
 80084e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084e6:	e00b      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084e8:	f7fc ffb4 	bl	8005454 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d902      	bls.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	74fb      	strb	r3, [r7, #19]
            break;
 80084fe:	e006      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008500:	4b0c      	ldr	r3, [pc, #48]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0ec      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800850e:	7cfb      	ldrb	r3, [r7, #19]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10b      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008514:	4b07      	ldr	r3, [pc, #28]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800851a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008522:	4904      	ldr	r1, [pc, #16]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008524:	4313      	orrs	r3, r2
 8008526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800852a:	e009      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800852c:	7cfb      	ldrb	r3, [r7, #19]
 800852e:	74bb      	strb	r3, [r7, #18]
 8008530:	e006      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008532:	bf00      	nop
 8008534:	40021000 	.word	0x40021000
 8008538:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853c:	7cfb      	ldrb	r3, [r7, #19]
 800853e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008540:	7c7b      	ldrb	r3, [r7, #17]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d105      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008546:	4b9e      	ldr	r3, [pc, #632]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854a:	4a9d      	ldr	r2, [pc, #628]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800854c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008550:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800855e:	4b98      	ldr	r3, [pc, #608]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008564:	f023 0203 	bic.w	r2, r3, #3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	4994      	ldr	r1, [pc, #592]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800856e:	4313      	orrs	r3, r2
 8008570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00a      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008580:	4b8f      	ldr	r3, [pc, #572]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008586:	f023 020c 	bic.w	r2, r3, #12
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	498c      	ldr	r1, [pc, #560]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008590:	4313      	orrs	r3, r2
 8008592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0304 	and.w	r3, r3, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085a2:	4b87      	ldr	r3, [pc, #540]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b0:	4983      	ldr	r1, [pc, #524]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0308 	and.w	r3, r3, #8
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085c4:	4b7e      	ldr	r3, [pc, #504]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	497b      	ldr	r1, [pc, #492]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085e6:	4b76      	ldr	r3, [pc, #472]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f4:	4972      	ldr	r1, [pc, #456]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008608:	4b6d      	ldr	r3, [pc, #436]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800860a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008616:	496a      	ldr	r1, [pc, #424]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008618:	4313      	orrs	r3, r2
 800861a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800862a:	4b65      	ldr	r3, [pc, #404]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800862c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008638:	4961      	ldr	r1, [pc, #388]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800863a:	4313      	orrs	r3, r2
 800863c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800864c:	4b5c      	ldr	r3, [pc, #368]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800864e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008652:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865a:	4959      	ldr	r1, [pc, #356]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800865c:	4313      	orrs	r3, r2
 800865e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800866e:	4b54      	ldr	r3, [pc, #336]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867c:	4950      	ldr	r1, [pc, #320]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00a      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008690:	4b4b      	ldr	r3, [pc, #300]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008696:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	4948      	ldr	r1, [pc, #288]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086b2:	4b43      	ldr	r3, [pc, #268]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80086b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086b8:	f023 0203 	bic.w	r2, r3, #3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	493f      	ldr	r1, [pc, #252]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d028      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086d4:	4b3a      	ldr	r3, [pc, #232]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80086d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e2:	4937      	ldr	r1, [pc, #220]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086f2:	d106      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086f4:	4b32      	ldr	r3, [pc, #200]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	4a31      	ldr	r2, [pc, #196]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80086fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086fe:	60d3      	str	r3, [r2, #12]
 8008700:	e011      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800870a:	d10c      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3304      	adds	r3, #4
 8008710:	2101      	movs	r1, #1
 8008712:	4618      	mov	r0, r3
 8008714:	f000 f8a4 	bl	8008860 <RCCEx_PLLSAI1_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800871c:	7cfb      	ldrb	r3, [r7, #19]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8008722:	7cfb      	ldrb	r3, [r7, #19]
 8008724:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d028      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008732:	4b23      	ldr	r3, [pc, #140]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008738:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008740:	491f      	ldr	r1, [pc, #124]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008742:	4313      	orrs	r3, r2
 8008744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008750:	d106      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008752:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	4a1a      	ldr	r2, [pc, #104]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800875c:	60d3      	str	r3, [r2, #12]
 800875e:	e011      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008768:	d10c      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3304      	adds	r3, #4
 800876e:	2101      	movs	r1, #1
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f875 	bl	8008860 <RCCEx_PLLSAI1_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800877a:	7cfb      	ldrb	r3, [r7, #19]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8008780:	7cfb      	ldrb	r3, [r7, #19]
 8008782:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d02b      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008790:	4b0b      	ldr	r3, [pc, #44]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008796:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879e:	4908      	ldr	r1, [pc, #32]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ae:	d109      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087b0:	4b03      	ldr	r3, [pc, #12]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	4a02      	ldr	r2, [pc, #8]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80087b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ba:	60d3      	str	r3, [r2, #12]
 80087bc:	e014      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80087be:	bf00      	nop
 80087c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087cc:	d10c      	bne.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3304      	adds	r3, #4
 80087d2:	2101      	movs	r1, #1
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f843 	bl	8008860 <RCCEx_PLLSAI1_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80087de:	7cfb      	ldrb	r3, [r7, #19]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80087e4:	7cfb      	ldrb	r3, [r7, #19]
 80087e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d01c      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087f4:	4b19      	ldr	r3, [pc, #100]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80087f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008802:	4916      	ldr	r1, [pc, #88]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8008804:	4313      	orrs	r3, r2
 8008806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008812:	d10c      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3304      	adds	r3, #4
 8008818:	2102      	movs	r1, #2
 800881a:	4618      	mov	r0, r3
 800881c:	f000 f820 	bl	8008860 <RCCEx_PLLSAI1_Config>
 8008820:	4603      	mov	r3, r0
 8008822:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008824:	7cfb      	ldrb	r3, [r7, #19]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 800882a:	7cfb      	ldrb	r3, [r7, #19]
 800882c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800883a:	4b08      	ldr	r3, [pc, #32]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800883c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008848:	4904      	ldr	r1, [pc, #16]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800884a:	4313      	orrs	r3, r2
 800884c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008850:	7cbb      	ldrb	r3, [r7, #18]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	40021000 	.word	0x40021000

08008860 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800886e:	4b73      	ldr	r3, [pc, #460]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d018      	beq.n	80088ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800887a:	4b70      	ldr	r3, [pc, #448]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f003 0203 	and.w	r2, r3, #3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d10d      	bne.n	80088a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
       ||
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008892:	4b6a      	ldr	r3, [pc, #424]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	091b      	lsrs	r3, r3, #4
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
       ||
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d044      	beq.n	8008930 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	73fb      	strb	r3, [r7, #15]
 80088aa:	e041      	b.n	8008930 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d00c      	beq.n	80088ce <RCCEx_PLLSAI1_Config+0x6e>
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d013      	beq.n	80088e0 <RCCEx_PLLSAI1_Config+0x80>
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d120      	bne.n	80088fe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80088bc:	4b5f      	ldr	r3, [pc, #380]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11d      	bne.n	8008904 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088cc:	e01a      	b.n	8008904 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80088ce:	4b5b      	ldr	r3, [pc, #364]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d116      	bne.n	8008908 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088de:	e013      	b.n	8008908 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80088e0:	4b56      	ldr	r3, [pc, #344]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10f      	bne.n	800890c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80088ec:	4b53      	ldr	r3, [pc, #332]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d109      	bne.n	800890c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80088fc:	e006      	b.n	800890c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	73fb      	strb	r3, [r7, #15]
      break;
 8008902:	e004      	b.n	800890e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008904:	bf00      	nop
 8008906:	e002      	b.n	800890e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008908:	bf00      	nop
 800890a:	e000      	b.n	800890e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800890c:	bf00      	nop
    }

    if(status == HAL_OK)
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10d      	bne.n	8008930 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008914:	4b49      	ldr	r3, [pc, #292]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	3b01      	subs	r3, #1
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	430b      	orrs	r3, r1
 800892a:	4944      	ldr	r1, [pc, #272]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 800892c:	4313      	orrs	r3, r2
 800892e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d17c      	bne.n	8008a30 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008936:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a40      	ldr	r2, [pc, #256]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 800893c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008942:	f7fc fd87 	bl	8005454 <HAL_GetTick>
 8008946:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008948:	e009      	b.n	800895e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800894a:	f7fc fd83 	bl	8005454 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d902      	bls.n	800895e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	73fb      	strb	r3, [r7, #15]
        break;
 800895c:	e005      	b.n	800896a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800895e:	4b37      	ldr	r3, [pc, #220]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1ef      	bne.n	800894a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d15f      	bne.n	8008a30 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d110      	bne.n	8008998 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008976:	4b31      	ldr	r3, [pc, #196]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800897e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6892      	ldr	r2, [r2, #8]
 8008986:	0211      	lsls	r1, r2, #8
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68d2      	ldr	r2, [r2, #12]
 800898c:	06d2      	lsls	r2, r2, #27
 800898e:	430a      	orrs	r2, r1
 8008990:	492a      	ldr	r1, [pc, #168]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008992:	4313      	orrs	r3, r2
 8008994:	610b      	str	r3, [r1, #16]
 8008996:	e027      	b.n	80089e8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d112      	bne.n	80089c4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800899e:	4b27      	ldr	r3, [pc, #156]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80089a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6892      	ldr	r2, [r2, #8]
 80089ae:	0211      	lsls	r1, r2, #8
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6912      	ldr	r2, [r2, #16]
 80089b4:	0852      	lsrs	r2, r2, #1
 80089b6:	3a01      	subs	r2, #1
 80089b8:	0552      	lsls	r2, r2, #21
 80089ba:	430a      	orrs	r2, r1
 80089bc:	491f      	ldr	r1, [pc, #124]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	610b      	str	r3, [r1, #16]
 80089c2:	e011      	b.n	80089e8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80089c4:	4b1d      	ldr	r3, [pc, #116]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80089cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6892      	ldr	r2, [r2, #8]
 80089d4:	0211      	lsls	r1, r2, #8
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	6952      	ldr	r2, [r2, #20]
 80089da:	0852      	lsrs	r2, r2, #1
 80089dc:	3a01      	subs	r2, #1
 80089de:	0652      	lsls	r2, r2, #25
 80089e0:	430a      	orrs	r2, r1
 80089e2:	4916      	ldr	r1, [pc, #88]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80089e8:	4b14      	ldr	r3, [pc, #80]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a13      	ldr	r2, [pc, #76]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80089ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f4:	f7fc fd2e 	bl	8005454 <HAL_GetTick>
 80089f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80089fa:	e009      	b.n	8008a10 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80089fc:	f7fc fd2a 	bl	8005454 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d902      	bls.n	8008a10 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8008a0e:	e005      	b.n	8008a1c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008a10:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0ef      	beq.n	80089fc <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008a22:	4b06      	ldr	r3, [pc, #24]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a24:	691a      	ldr	r2, [r3, #16]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	4904      	ldr	r1, [pc, #16]	; (8008a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40021000 	.word	0x40021000

08008a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e07c      	b.n	8008b4c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d106      	bne.n	8008a72 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7fc fb7d 	bl	800516c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a88:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a92:	d902      	bls.n	8008a9a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a94:	2300      	movs	r3, #0
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	e002      	b.n	8008aa0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008aa8:	d007      	beq.n	8008aba <HAL_SPI_Init+0x7a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ab2:	d002      	beq.n	8008aba <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10b      	bne.n	8008ada <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008aca:	d903      	bls.n	8008ad4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8008ad2:	e002      	b.n	8008ada <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008af8:	431a      	orrs	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	ea42 0103 	orr.w	r1, r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	0c1b      	lsrs	r3, r3, #16
 8008b1a:	f003 0204 	and.w	r2, r3, #4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	ea42 0103 	orr.w	r1, r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08a      	sub	sp, #40	; 0x28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b62:	2301      	movs	r3, #1
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d101      	bne.n	8008b7a <HAL_SPI_TransmitReceive+0x26>
 8008b76:	2302      	movs	r3, #2
 8008b78:	e1fb      	b.n	8008f72 <HAL_SPI_TransmitReceive+0x41e>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b82:	f7fc fc67 	bl	8005454 <HAL_GetTick>
 8008b86:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b8e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008b96:	887b      	ldrh	r3, [r7, #2]
 8008b98:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008b9a:	887b      	ldrh	r3, [r7, #2]
 8008b9c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b9e:	7efb      	ldrb	r3, [r7, #27]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d00e      	beq.n	8008bc2 <HAL_SPI_TransmitReceive+0x6e>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008baa:	d106      	bne.n	8008bba <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d102      	bne.n	8008bba <HAL_SPI_TransmitReceive+0x66>
 8008bb4:	7efb      	ldrb	r3, [r7, #27]
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d003      	beq.n	8008bc2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008bba:	2302      	movs	r3, #2
 8008bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008bc0:	e1cd      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <HAL_SPI_TransmitReceive+0x80>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <HAL_SPI_TransmitReceive+0x80>
 8008bce:	887b      	ldrh	r3, [r7, #2]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008bda:	e1c0      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d003      	beq.n	8008bf0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2205      	movs	r2, #5
 8008bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	887a      	ldrh	r2, [r7, #2]
 8008c00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	887a      	ldrh	r2, [r7, #2]
 8008c08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	887a      	ldrh	r2, [r7, #2]
 8008c16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	887a      	ldrh	r2, [r7, #2]
 8008c1c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c32:	d802      	bhi.n	8008c3a <HAL_SPI_TransmitReceive+0xe6>
 8008c34:	8a3b      	ldrh	r3, [r7, #16]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d908      	bls.n	8008c4c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c48:	605a      	str	r2, [r3, #4]
 8008c4a:	e007      	b.n	8008c5c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c5a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c66:	2b40      	cmp	r3, #64	; 0x40
 8008c68:	d007      	beq.n	8008c7a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c82:	d97c      	bls.n	8008d7e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <HAL_SPI_TransmitReceive+0x13e>
 8008c8c:	8a7b      	ldrh	r3, [r7, #18]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d169      	bne.n	8008d66 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c96:	881a      	ldrh	r2, [r3, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca2:	1c9a      	adds	r2, r3, #2
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cb6:	e056      	b.n	8008d66 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d11b      	bne.n	8008cfe <HAL_SPI_TransmitReceive+0x1aa>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d016      	beq.n	8008cfe <HAL_SPI_TransmitReceive+0x1aa>
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d113      	bne.n	8008cfe <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cda:	881a      	ldrh	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	1c9a      	adds	r2, r3, #2
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d11c      	bne.n	8008d46 <HAL_SPI_TransmitReceive+0x1f2>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d016      	beq.n	8008d46 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68da      	ldr	r2, [r3, #12]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	b292      	uxth	r2, r2
 8008d24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2a:	1c9a      	adds	r2, r3, #2
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d42:	2301      	movs	r3, #1
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d46:	f7fc fb85 	bl	8005454 <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d807      	bhi.n	8008d66 <HAL_SPI_TransmitReceive+0x212>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5c:	d003      	beq.n	8008d66 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008d64:	e0fb      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1a3      	bne.n	8008cb8 <HAL_SPI_TransmitReceive+0x164>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d19d      	bne.n	8008cb8 <HAL_SPI_TransmitReceive+0x164>
 8008d7c:	e0df      	b.n	8008f3e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_SPI_TransmitReceive+0x23a>
 8008d86:	8a7b      	ldrh	r3, [r7, #18]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	f040 80cb 	bne.w	8008f24 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d912      	bls.n	8008dbe <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9c:	881a      	ldrh	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	1c9a      	adds	r2, r3, #2
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	3b02      	subs	r3, #2
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dbc:	e0b2      	b.n	8008f24 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	330c      	adds	r3, #12
 8008dc8:	7812      	ldrb	r2, [r2, #0]
 8008dca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008de4:	e09e      	b.n	8008f24 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d134      	bne.n	8008e5e <HAL_SPI_TransmitReceive+0x30a>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d02f      	beq.n	8008e5e <HAL_SPI_TransmitReceive+0x30a>
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d12c      	bne.n	8008e5e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d912      	bls.n	8008e34 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e12:	881a      	ldrh	r2, [r3, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	1c9a      	adds	r2, r3, #2
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	3b02      	subs	r3, #2
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e32:	e012      	b.n	8008e5a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	7812      	ldrb	r2, [r2, #0]
 8008e40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	3b01      	subs	r3, #1
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d148      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x3aa>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d042      	beq.n	8008efe <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d923      	bls.n	8008ecc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8e:	b292      	uxth	r2, r2
 8008e90:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	1c9a      	adds	r2, r3, #2
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	3b02      	subs	r3, #2
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d81f      	bhi.n	8008efa <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ec8:	605a      	str	r2, [r3, #4]
 8008eca:	e016      	b.n	8008efa <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f103 020c 	add.w	r2, r3, #12
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed8:	7812      	ldrb	r2, [r2, #0]
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008efa:	2301      	movs	r3, #1
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008efe:	f7fc faa9 	bl	8005454 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d803      	bhi.n	8008f16 <HAL_SPI_TransmitReceive+0x3c2>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f14:	d102      	bne.n	8008f1c <HAL_SPI_TransmitReceive+0x3c8>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d103      	bne.n	8008f24 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f22:	e01c      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f47f af5b 	bne.w	8008de6 <HAL_SPI_TransmitReceive+0x292>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f47f af54 	bne.w	8008de6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fa10 	bl	8009368 <SPI_EndRxTxTransaction>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d006      	beq.n	8008f5c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2220      	movs	r2, #32
 8008f58:	661a      	str	r2, [r3, #96]	; 0x60
 8008f5a:	e000      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008f5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3728      	adds	r7, #40	; 0x28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	099b      	lsrs	r3, r3, #6
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10f      	bne.n	8008fc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	099b      	lsrs	r3, r3, #6
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	4798      	blx	r3
    return;
 8008fbe:	e0d8      	b.n	8009172 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	085b      	lsrs	r3, r3, #1
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00a      	beq.n	8008fe2 <HAL_SPI_IRQHandler+0x66>
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	09db      	lsrs	r3, r3, #7
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	4798      	blx	r3
    return;
 8008fe0:	e0c7      	b.n	8009172 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	095b      	lsrs	r3, r3, #5
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10c      	bne.n	8009008 <HAL_SPI_IRQHandler+0x8c>
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	099b      	lsrs	r3, r3, #6
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <HAL_SPI_IRQHandler+0x8c>
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	0a1b      	lsrs	r3, r3, #8
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 80b5 	beq.w	8009172 <HAL_SPI_IRQHandler+0x1f6>
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	095b      	lsrs	r3, r3, #5
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80ae 	beq.w	8009172 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	099b      	lsrs	r3, r3, #6
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d023      	beq.n	800906a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b03      	cmp	r3, #3
 800902c:	d011      	beq.n	8009052 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009032:	f043 0204 	orr.w	r2, r3, #4
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800903a:	2300      	movs	r3, #0
 800903c:	617b      	str	r3, [r7, #20]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	e00b      	b.n	800906a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009052:	2300      	movs	r3, #0
 8009054:	613b      	str	r3, [r7, #16]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	613b      	str	r3, [r7, #16]
 8009066:	693b      	ldr	r3, [r7, #16]
        return;
 8009068:	e083      	b.n	8009172 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	095b      	lsrs	r3, r3, #5
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d014      	beq.n	80090a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800907a:	f043 0201 	orr.w	r2, r3, #1
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	0a1b      	lsrs	r3, r3, #8
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00c      	beq.n	80090c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090b0:	f043 0208 	orr.w	r2, r3, #8
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80090b8:	2300      	movs	r3, #0
 80090ba:	60bb      	str	r3, [r7, #8]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	60bb      	str	r3, [r7, #8]
 80090c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d050      	beq.n	8009170 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d104      	bne.n	80090fa <HAL_SPI_IRQHandler+0x17e>
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d034      	beq.n	8009164 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f022 0203 	bic.w	r2, r2, #3
 8009108:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910e:	2b00      	cmp	r3, #0
 8009110:	d011      	beq.n	8009136 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009116:	4a18      	ldr	r2, [pc, #96]	; (8009178 <HAL_SPI_IRQHandler+0x1fc>)
 8009118:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe f832 	bl	8007188 <HAL_DMA_Abort_IT>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800912e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913a:	2b00      	cmp	r3, #0
 800913c:	d016      	beq.n	800916c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009142:	4a0d      	ldr	r2, [pc, #52]	; (8009178 <HAL_SPI_IRQHandler+0x1fc>)
 8009144:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe f81c 	bl	8007188 <HAL_DMA_Abort_IT>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00a      	beq.n	800916c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800915a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009162:	e003      	b.n	800916c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f809 	bl	800917c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800916a:	e000      	b.n	800916e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800916c:	bf00      	nop
    return;
 800916e:	bf00      	nop
 8009170:	bf00      	nop
  }
}
 8009172:	3720      	adds	r7, #32
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	08009191 	.word	0x08009191

0800917c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f7ff ffe5 	bl	800917c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	603b      	str	r3, [r7, #0]
 80091c6:	4613      	mov	r3, r2
 80091c8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091ca:	e04c      	b.n	8009266 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d2:	d048      	beq.n	8009266 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80091d4:	f7fc f93e 	bl	8005454 <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d902      	bls.n	80091ea <SPI_WaitFlagStateUntilTimeout+0x30>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d13d      	bne.n	8009266 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009202:	d111      	bne.n	8009228 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800920c:	d004      	beq.n	8009218 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009216:	d107      	bne.n	8009228 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009230:	d10f      	bne.n	8009252 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e00f      	b.n	8009286 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4013      	ands	r3, r2
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	429a      	cmp	r2, r3
 8009274:	bf0c      	ite	eq
 8009276:	2301      	moveq	r3, #1
 8009278:	2300      	movne	r3, #0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	461a      	mov	r2, r3
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	429a      	cmp	r2, r3
 8009282:	d1a3      	bne.n	80091cc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800929c:	e057      	b.n	800934e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80092a4:	d106      	bne.n	80092b4 <SPI_WaitFifoStateUntilTimeout+0x26>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d103      	bne.n	80092b4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	330c      	adds	r3, #12
 80092b2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ba:	d048      	beq.n	800934e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80092bc:	f7fc f8ca 	bl	8005454 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d902      	bls.n	80092d2 <SPI_WaitFifoStateUntilTimeout+0x44>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d13d      	bne.n	800934e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092ea:	d111      	bne.n	8009310 <SPI_WaitFifoStateUntilTimeout+0x82>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f4:	d004      	beq.n	8009300 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092fe:	d107      	bne.n	8009310 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800930e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009318:	d10f      	bne.n	800933a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e008      	b.n	8009360 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	429a      	cmp	r2, r3
 800935c:	d19f      	bne.n	800929e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af02      	add	r7, sp, #8
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2200      	movs	r2, #0
 800937c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7ff ff84 	bl	800928e <SPI_WaitFifoStateUntilTimeout>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009390:	f043 0220 	orr.w	r2, r3, #32
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e027      	b.n	80093ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2200      	movs	r2, #0
 80093a4:	2180      	movs	r1, #128	; 0x80
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f7ff ff07 	bl	80091ba <SPI_WaitFlagStateUntilTimeout>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b6:	f043 0220 	orr.w	r2, r3, #32
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e014      	b.n	80093ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f7ff ff5d 	bl	800928e <SPI_WaitFifoStateUntilTimeout>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d007      	beq.n	80093ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093de:	f043 0220 	orr.w	r2, r3, #32
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e000      	b.n	80093ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <__libc_init_array>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4e0d      	ldr	r6, [pc, #52]	; (800942c <__libc_init_array+0x38>)
 80093f8:	4c0d      	ldr	r4, [pc, #52]	; (8009430 <__libc_init_array+0x3c>)
 80093fa:	1ba4      	subs	r4, r4, r6
 80093fc:	10a4      	asrs	r4, r4, #2
 80093fe:	2500      	movs	r5, #0
 8009400:	42a5      	cmp	r5, r4
 8009402:	d109      	bne.n	8009418 <__libc_init_array+0x24>
 8009404:	4e0b      	ldr	r6, [pc, #44]	; (8009434 <__libc_init_array+0x40>)
 8009406:	4c0c      	ldr	r4, [pc, #48]	; (8009438 <__libc_init_array+0x44>)
 8009408:	f000 f820 	bl	800944c <_init>
 800940c:	1ba4      	subs	r4, r4, r6
 800940e:	10a4      	asrs	r4, r4, #2
 8009410:	2500      	movs	r5, #0
 8009412:	42a5      	cmp	r5, r4
 8009414:	d105      	bne.n	8009422 <__libc_init_array+0x2e>
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800941c:	4798      	blx	r3
 800941e:	3501      	adds	r5, #1
 8009420:	e7ee      	b.n	8009400 <__libc_init_array+0xc>
 8009422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009426:	4798      	blx	r3
 8009428:	3501      	adds	r5, #1
 800942a:	e7f2      	b.n	8009412 <__libc_init_array+0x1e>
 800942c:	080094a4 	.word	0x080094a4
 8009430:	080094a4 	.word	0x080094a4
 8009434:	080094a4 	.word	0x080094a4
 8009438:	080094a8 	.word	0x080094a8

0800943c <memset>:
 800943c:	4402      	add	r2, r0
 800943e:	4603      	mov	r3, r0
 8009440:	4293      	cmp	r3, r2
 8009442:	d100      	bne.n	8009446 <memset+0xa>
 8009444:	4770      	bx	lr
 8009446:	f803 1b01 	strb.w	r1, [r3], #1
 800944a:	e7f9      	b.n	8009440 <memset+0x4>

0800944c <_init>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	bf00      	nop
 8009450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009452:	bc08      	pop	{r3}
 8009454:	469e      	mov	lr, r3
 8009456:	4770      	bx	lr

08009458 <_fini>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	bf00      	nop
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr

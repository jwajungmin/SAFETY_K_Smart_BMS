
nRF_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006510  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000030  0800672c  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  0800672c  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010169  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002739  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e70  00000000  00000000  00032900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024618  00000000  00000000  00034488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d265  00000000  00000000  00058aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0bc5  00000000  00000000  00065d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001468ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf0  00000000  00000000  00146948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006690 	.word	0x08006690

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000034 	.word	0x20000034
 80001d4:	08006690 	.word	0x08006690

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_frsub>:
 8000a84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a88:	e002      	b.n	8000a90 <__addsf3>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_fsub>:
 8000a8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a90 <__addsf3>:
 8000a90:	0042      	lsls	r2, r0, #1
 8000a92:	bf1f      	itttt	ne
 8000a94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a98:	ea92 0f03 	teqne	r2, r3
 8000a9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa4:	d06a      	beq.n	8000b7c <__addsf3+0xec>
 8000aa6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aaa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aae:	bfc1      	itttt	gt
 8000ab0:	18d2      	addgt	r2, r2, r3
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	4048      	eorgt	r0, r1
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	bfb8      	it	lt
 8000aba:	425b      	neglt	r3, r3
 8000abc:	2b19      	cmp	r3, #25
 8000abe:	bf88      	it	hi
 8000ac0:	4770      	bxhi	lr
 8000ac2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4240      	negne	r0, r0
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ada:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4249      	negne	r1, r1
 8000ae2:	ea92 0f03 	teq	r2, r3
 8000ae6:	d03f      	beq.n	8000b68 <__addsf3+0xd8>
 8000ae8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aec:	fa41 fc03 	asr.w	ip, r1, r3
 8000af0:	eb10 000c 	adds.w	r0, r0, ip
 8000af4:	f1c3 0320 	rsb	r3, r3, #32
 8000af8:	fa01 f103 	lsl.w	r1, r1, r3
 8000afc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	d502      	bpl.n	8000b08 <__addsf3+0x78>
 8000b02:	4249      	negs	r1, r1
 8000b04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b0c:	d313      	bcc.n	8000b36 <__addsf3+0xa6>
 8000b0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b12:	d306      	bcc.n	8000b22 <__addsf3+0x92>
 8000b14:	0840      	lsrs	r0, r0, #1
 8000b16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1a:	f102 0201 	add.w	r2, r2, #1
 8000b1e:	2afe      	cmp	r2, #254	; 0xfe
 8000b20:	d251      	bcs.n	8000bc6 <__addsf3+0x136>
 8000b22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2a:	bf08      	it	eq
 8000b2c:	f020 0001 	biceq.w	r0, r0, #1
 8000b30:	ea40 0003 	orr.w	r0, r0, r3
 8000b34:	4770      	bx	lr
 8000b36:	0049      	lsls	r1, r1, #1
 8000b38:	eb40 0000 	adc.w	r0, r0, r0
 8000b3c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	d1ed      	bne.n	8000b22 <__addsf3+0x92>
 8000b46:	fab0 fc80 	clz	ip, r0
 8000b4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b56:	bfaa      	itet	ge
 8000b58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b5c:	4252      	neglt	r2, r2
 8000b5e:	4318      	orrge	r0, r3
 8000b60:	bfbc      	itt	lt
 8000b62:	40d0      	lsrlt	r0, r2
 8000b64:	4318      	orrlt	r0, r3
 8000b66:	4770      	bx	lr
 8000b68:	f092 0f00 	teq	r2, #0
 8000b6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b70:	bf06      	itte	eq
 8000b72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b76:	3201      	addeq	r2, #1
 8000b78:	3b01      	subne	r3, #1
 8000b7a:	e7b5      	b.n	8000ae8 <__addsf3+0x58>
 8000b7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b84:	bf18      	it	ne
 8000b86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8a:	d021      	beq.n	8000bd0 <__addsf3+0x140>
 8000b8c:	ea92 0f03 	teq	r2, r3
 8000b90:	d004      	beq.n	8000b9c <__addsf3+0x10c>
 8000b92:	f092 0f00 	teq	r2, #0
 8000b96:	bf08      	it	eq
 8000b98:	4608      	moveq	r0, r1
 8000b9a:	4770      	bx	lr
 8000b9c:	ea90 0f01 	teq	r0, r1
 8000ba0:	bf1c      	itt	ne
 8000ba2:	2000      	movne	r0, #0
 8000ba4:	4770      	bxne	lr
 8000ba6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000baa:	d104      	bne.n	8000bb6 <__addsf3+0x126>
 8000bac:	0040      	lsls	r0, r0, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb4:	4770      	bx	lr
 8000bb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bba:	bf3c      	itt	cc
 8000bbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bxcc	lr
 8000bc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	4770      	bx	lr
 8000bd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd4:	bf16      	itet	ne
 8000bd6:	4608      	movne	r0, r1
 8000bd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bdc:	4601      	movne	r1, r0
 8000bde:	0242      	lsls	r2, r0, #9
 8000be0:	bf06      	itte	eq
 8000be2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be6:	ea90 0f01 	teqeq	r0, r1
 8000bea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_ui2f>:
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e004      	b.n	8000c00 <__aeabi_i2f+0x8>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_i2f>:
 8000bf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bfc:	bf48      	it	mi
 8000bfe:	4240      	negmi	r0, r0
 8000c00:	ea5f 0c00 	movs.w	ip, r0
 8000c04:	bf08      	it	eq
 8000c06:	4770      	bxeq	lr
 8000c08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	e01c      	b.n	8000c4e <__aeabi_l2f+0x2a>

08000c14 <__aeabi_ul2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e00a      	b.n	8000c38 <__aeabi_l2f+0x14>
 8000c22:	bf00      	nop

08000c24 <__aeabi_l2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__aeabi_l2f+0x14>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	ea5f 0c01 	movs.w	ip, r1
 8000c3c:	bf02      	ittt	eq
 8000c3e:	4684      	moveq	ip, r0
 8000c40:	4601      	moveq	r1, r0
 8000c42:	2000      	moveq	r0, #0
 8000c44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c48:	bf08      	it	eq
 8000c4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c52:	fabc f28c 	clz	r2, ip
 8000c56:	3a08      	subs	r2, #8
 8000c58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c5c:	db10      	blt.n	8000c80 <__aeabi_l2f+0x5c>
 8000c5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c62:	4463      	add	r3, ip
 8000c64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c70:	fa20 f202 	lsr.w	r2, r0, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	f020 0001 	biceq.w	r0, r0, #1
 8000c7e:	4770      	bx	lr
 8000c80:	f102 0220 	add.w	r2, r2, #32
 8000c84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c90:	fa21 f202 	lsr.w	r2, r1, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b994 	b.w	8000fe0 <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f828 	bl	8000d14 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_d2ulz>:
 8000cd0:	b5d0      	push	{r4, r6, r7, lr}
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <__aeabi_d2ulz+0x3c>)
 8000cd6:	4606      	mov	r6, r0
 8000cd8:	460f      	mov	r7, r1
 8000cda:	f7ff fc39 	bl	8000550 <__aeabi_dmul>
 8000cde:	f000 f981 	bl	8000fe4 <__aeabi_d2uiz>
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	f7ff fbba 	bl	800045c <__aeabi_ui2d>
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <__aeabi_d2ulz+0x40>)
 8000cec:	f7ff fc30 	bl	8000550 <__aeabi_dmul>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	4639      	mov	r1, r7
 8000cf8:	f7ff fa72 	bl	80001e0 <__aeabi_dsub>
 8000cfc:	f000 f972 	bl	8000fe4 <__aeabi_d2uiz>
 8000d00:	2200      	movs	r2, #0
 8000d02:	4623      	mov	r3, r4
 8000d04:	4310      	orrs	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9e08      	ldr	r6, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	4688      	mov	r8, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d14b      	bne.n	8000dba <__udivmoddi4+0xa6>
 8000d22:	428a      	cmp	r2, r1
 8000d24:	4615      	mov	r5, r2
 8000d26:	d967      	bls.n	8000df8 <__udivmoddi4+0xe4>
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b14a      	cbz	r2, 8000d42 <__udivmoddi4+0x2e>
 8000d2e:	f1c2 0720 	rsb	r7, r2, #32
 8000d32:	fa01 f302 	lsl.w	r3, r1, r2
 8000d36:	fa20 f707 	lsr.w	r7, r0, r7
 8000d3a:	4095      	lsls	r5, r2
 8000d3c:	ea47 0803 	orr.w	r8, r7, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d46:	0c23      	lsrs	r3, r4, #16
 8000d48:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d4c:	fa1f fc85 	uxth.w	ip, r5
 8000d50:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d58:	fb07 f10c 	mul.w	r1, r7, ip
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x60>
 8000d60:	18eb      	adds	r3, r5, r3
 8000d62:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d66:	f080 811b 	bcs.w	8000fa0 <__udivmoddi4+0x28c>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 8118 	bls.w	8000fa0 <__udivmoddi4+0x28c>
 8000d70:	3f02      	subs	r7, #2
 8000d72:	442b      	add	r3, r5
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d84:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d88:	45a4      	cmp	ip, r4
 8000d8a:	d909      	bls.n	8000da0 <__udivmoddi4+0x8c>
 8000d8c:	192c      	adds	r4, r5, r4
 8000d8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d92:	f080 8107 	bcs.w	8000fa4 <__udivmoddi4+0x290>
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	f240 8104 	bls.w	8000fa4 <__udivmoddi4+0x290>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	442c      	add	r4, r5
 8000da0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000da4:	eba4 040c 	sub.w	r4, r4, ip
 8000da8:	2700      	movs	r7, #0
 8000daa:	b11e      	cbz	r6, 8000db4 <__udivmoddi4+0xa0>
 8000dac:	40d4      	lsrs	r4, r2
 8000dae:	2300      	movs	r3, #0
 8000db0:	e9c6 4300 	strd	r4, r3, [r6]
 8000db4:	4639      	mov	r1, r7
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0xbe>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f000 80eb 	beq.w	8000f9a <__udivmoddi4+0x286>
 8000dc4:	2700      	movs	r7, #0
 8000dc6:	e9c6 0100 	strd	r0, r1, [r6]
 8000dca:	4638      	mov	r0, r7
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	fab3 f783 	clz	r7, r3
 8000dd6:	2f00      	cmp	r7, #0
 8000dd8:	d147      	bne.n	8000e6a <__udivmoddi4+0x156>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xd0>
 8000dde:	4282      	cmp	r2, r0
 8000de0:	f200 80fa 	bhi.w	8000fd8 <__udivmoddi4+0x2c4>
 8000de4:	1a84      	subs	r4, r0, r2
 8000de6:	eb61 0303 	sbc.w	r3, r1, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	4698      	mov	r8, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d0e0      	beq.n	8000db4 <__udivmoddi4+0xa0>
 8000df2:	e9c6 4800 	strd	r4, r8, [r6]
 8000df6:	e7dd      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000df8:	b902      	cbnz	r2, 8000dfc <__udivmoddi4+0xe8>
 8000dfa:	deff      	udf	#255	; 0xff
 8000dfc:	fab2 f282 	clz	r2, r2
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f040 808f 	bne.w	8000f24 <__udivmoddi4+0x210>
 8000e06:	1b49      	subs	r1, r1, r5
 8000e08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0c:	fa1f f885 	uxth.w	r8, r5
 8000e10:	2701      	movs	r7, #1
 8000e12:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb08 f10c 	mul.w	r1, r8, ip
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0x124>
 8000e28:	18eb      	adds	r3, r5, r3
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0x122>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	f200 80cd 	bhi.w	8000fd0 <__udivmoddi4+0x2bc>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1a59      	subs	r1, r3, r1
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e44:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x14c>
 8000e50:	192c      	adds	r4, r5, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x14a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80b6 	bhi.w	8000fca <__udivmoddi4+0x2b6>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e79f      	b.n	8000daa <__udivmoddi4+0x96>
 8000e6a:	f1c7 0c20 	rsb	ip, r7, #32
 8000e6e:	40bb      	lsls	r3, r7
 8000e70:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e74:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e78:	fa01 f407 	lsl.w	r4, r1, r7
 8000e7c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e80:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e84:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e88:	4325      	orrs	r5, r4
 8000e8a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e8e:	0c2c      	lsrs	r4, r5, #16
 8000e90:	fb08 3319 	mls	r3, r8, r9, r3
 8000e94:	fa1f fa8e 	uxth.w	sl, lr
 8000e98:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e9c:	fb09 f40a 	mul.w	r4, r9, sl
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	fa02 f207 	lsl.w	r2, r2, r7
 8000ea6:	fa00 f107 	lsl.w	r1, r0, r7
 8000eaa:	d90b      	bls.n	8000ec4 <__udivmoddi4+0x1b0>
 8000eac:	eb1e 0303 	adds.w	r3, lr, r3
 8000eb0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb4:	f080 8087 	bcs.w	8000fc6 <__udivmoddi4+0x2b2>
 8000eb8:	429c      	cmp	r4, r3
 8000eba:	f240 8084 	bls.w	8000fc6 <__udivmoddi4+0x2b2>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	4473      	add	r3, lr
 8000ec4:	1b1b      	subs	r3, r3, r4
 8000ec6:	b2ad      	uxth	r5, r5
 8000ec8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ecc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ed4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ed8:	45a2      	cmp	sl, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x1da>
 8000edc:	eb1e 0404 	adds.w	r4, lr, r4
 8000ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee4:	d26b      	bcs.n	8000fbe <__udivmoddi4+0x2aa>
 8000ee6:	45a2      	cmp	sl, r4
 8000ee8:	d969      	bls.n	8000fbe <__udivmoddi4+0x2aa>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4474      	add	r4, lr
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef6:	eba4 040a 	sub.w	r4, r4, sl
 8000efa:	454c      	cmp	r4, r9
 8000efc:	46c2      	mov	sl, r8
 8000efe:	464b      	mov	r3, r9
 8000f00:	d354      	bcc.n	8000fac <__udivmoddi4+0x298>
 8000f02:	d051      	beq.n	8000fa8 <__udivmoddi4+0x294>
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	d069      	beq.n	8000fdc <__udivmoddi4+0x2c8>
 8000f08:	ebb1 050a 	subs.w	r5, r1, sl
 8000f0c:	eb64 0403 	sbc.w	r4, r4, r3
 8000f10:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f14:	40fd      	lsrs	r5, r7
 8000f16:	40fc      	lsrs	r4, r7
 8000f18:	ea4c 0505 	orr.w	r5, ip, r5
 8000f1c:	e9c6 5400 	strd	r5, r4, [r6]
 8000f20:	2700      	movs	r7, #0
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000f24:	f1c2 0320 	rsb	r3, r2, #32
 8000f28:	fa20 f703 	lsr.w	r7, r0, r3
 8000f2c:	4095      	lsls	r5, r2
 8000f2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000f32:	fa21 f303 	lsr.w	r3, r1, r3
 8000f36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f3a:	4338      	orrs	r0, r7
 8000f3c:	0c01      	lsrs	r1, r0, #16
 8000f3e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f42:	fa1f f885 	uxth.w	r8, r5
 8000f46:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb07 f308 	mul.w	r3, r7, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	fa04 f402 	lsl.w	r4, r4, r2
 8000f58:	d907      	bls.n	8000f6a <__udivmoddi4+0x256>
 8000f5a:	1869      	adds	r1, r5, r1
 8000f5c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f60:	d22f      	bcs.n	8000fc2 <__udivmoddi4+0x2ae>
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d92d      	bls.n	8000fc2 <__udivmoddi4+0x2ae>
 8000f66:	3f02      	subs	r7, #2
 8000f68:	4429      	add	r1, r5
 8000f6a:	1acb      	subs	r3, r1, r3
 8000f6c:	b281      	uxth	r1, r0
 8000f6e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f72:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7a:	fb00 f308 	mul.w	r3, r0, r8
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d907      	bls.n	8000f92 <__udivmoddi4+0x27e>
 8000f82:	1869      	adds	r1, r5, r1
 8000f84:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f88:	d217      	bcs.n	8000fba <__udivmoddi4+0x2a6>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d915      	bls.n	8000fba <__udivmoddi4+0x2a6>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	4429      	add	r1, r5
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f98:	e73b      	b.n	8000e12 <__udivmoddi4+0xfe>
 8000f9a:	4637      	mov	r7, r6
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	e709      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000fa0:	4607      	mov	r7, r0
 8000fa2:	e6e7      	b.n	8000d74 <__udivmoddi4+0x60>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6fb      	b.n	8000da0 <__udivmoddi4+0x8c>
 8000fa8:	4541      	cmp	r1, r8
 8000faa:	d2ab      	bcs.n	8000f04 <__udivmoddi4+0x1f0>
 8000fac:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fb0:	eb69 020e 	sbc.w	r2, r9, lr
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	e7a4      	b.n	8000f04 <__udivmoddi4+0x1f0>
 8000fba:	4660      	mov	r0, ip
 8000fbc:	e7e9      	b.n	8000f92 <__udivmoddi4+0x27e>
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	e795      	b.n	8000eee <__udivmoddi4+0x1da>
 8000fc2:	4667      	mov	r7, ip
 8000fc4:	e7d1      	b.n	8000f6a <__udivmoddi4+0x256>
 8000fc6:	4681      	mov	r9, r0
 8000fc8:	e77c      	b.n	8000ec4 <__udivmoddi4+0x1b0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	442c      	add	r4, r5
 8000fce:	e747      	b.n	8000e60 <__udivmoddi4+0x14c>
 8000fd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd4:	442b      	add	r3, r5
 8000fd6:	e72f      	b.n	8000e38 <__udivmoddi4+0x124>
 8000fd8:	4638      	mov	r0, r7
 8000fda:	e708      	b.n	8000dee <__udivmoddi4+0xda>
 8000fdc:	4637      	mov	r7, r6
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0xa0>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2uiz>:
 8000fe4:	004a      	lsls	r2, r1, #1
 8000fe6:	d211      	bcs.n	800100c <__aeabi_d2uiz+0x28>
 8000fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fec:	d211      	bcs.n	8001012 <__aeabi_d2uiz+0x2e>
 8000fee:	d50d      	bpl.n	800100c <__aeabi_d2uiz+0x28>
 8000ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ff8:	d40e      	bmi.n	8001018 <__aeabi_d2uiz+0x34>
 8000ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001006:	fa23 f002 	lsr.w	r0, r3, r2
 800100a:	4770      	bx	lr
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	4770      	bx	lr
 8001012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001016:	d102      	bne.n	800101e <__aeabi_d2uiz+0x3a>
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_ADC1_Init+0xc4>)
 800103c:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <MX_ADC1_Init+0xc8>)
 800103e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_ADC1_Init+0xc4>)
 8001042:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001046:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_ADC1_Init+0xc4>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC1_Init+0xc4>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_ADC1_Init+0xc4>)
 800105c:	2204      	movs	r2, #4
 800105e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_ADC1_Init+0xc4>)
 8001068:	2201      	movs	r2, #1
 800106a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_ADC1_Init+0xc4>)
 800106e:	2201      	movs	r2, #1
 8001070:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_ADC1_Init+0xc4>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_ADC1_Init+0xc4>)
 800107c:	2201      	movs	r2, #1
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_ADC1_Init+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_ADC1_Init+0xc4>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_ADC1_Init+0xc4>)
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_ADC1_Init+0xc4>)
 8001096:	2200      	movs	r2, #0
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_ADC1_Init+0xc4>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a2:	4811      	ldr	r0, [pc, #68]	; (80010e8 <MX_ADC1_Init+0xc4>)
 80010a4:	f001 f9d2 	bl	800244c <HAL_ADC_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ae:	f000 fe59 	bl	8001d64 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_ADC1_Init+0xcc>)
 80010b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b6:	2306      	movs	r3, #6
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010ba:	2305      	movs	r3, #5
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010be:	237f      	movs	r3, #127	; 0x7f
 80010c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c2:	2304      	movs	r3, #4
 80010c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0xc4>)
 80010d0:	f001 fba8 	bl	8002824 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80010da:	f000 fe43 	bl	8001d64 <Error_Handler>
  }

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000e0 	.word	0x200000e0
 80010ec:	50040000 	.word	0x50040000
 80010f0:	04300002 	.word	0x04300002

080010f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <HAL_ADC_MspInit+0xc8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d14e      	bne.n	80011b4 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 800111c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001146:	2301      	movs	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800114a:	230b      	movs	r3, #11
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	481a      	ldr	r0, [pc, #104]	; (80011c4 <HAL_ADC_MspInit+0xd0>)
 800115a:	f003 f975 	bl	8004448 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 800117e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001182:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 8001186:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800118a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 800119a:	f002 fcdd 	bl	8003b58 <HAL_DMA_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80011a4:	f000 fdde 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 80011ac:	651a      	str	r2, [r3, #80]	; 0x50
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	50040000 	.word	0x50040000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000800 	.word	0x48000800
 80011c8:	20000148 	.word	0x20000148
 80011cc:	40020008 	.word	0x40020008

080011d0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_CAN1_Init+0x64>)
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <MX_CAN1_Init+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_CAN1_Init+0x64>)
 80011dc:	2214      	movs	r2, #20
 80011de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_CAN1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_CAN1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_CAN1_Init+0x64>)
 80011ee:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80011f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_CAN1_Init+0x64>)
 80011f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <MX_CAN1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_CAN1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_CAN1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_CAN1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_CAN1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_CAN1_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_CAN1_Init+0x64>)
 8001222:	f001 ff5b 	bl	80030dc <HAL_CAN_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800122c:	f000 fd9a 	bl	8001d64 <Error_Handler>
  }

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000190 	.word	0x20000190
 8001238:	40006400 	.word	0x40006400

0800123c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <HAL_CAN_MspInit+0x7c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d128      	bne.n	80012b0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_CAN_MspInit+0x80>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <HAL_CAN_MspInit+0x80>)
 8001264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001268:	6593      	str	r3, [r2, #88]	; 0x58
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_CAN_MspInit+0x80>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_CAN_MspInit+0x80>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <HAL_CAN_MspInit+0x80>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_CAN_MspInit+0x80>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800128e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 80012a0:	230a      	movs	r3, #10
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_CAN_MspInit+0x84>)
 80012ac:	f003 f8cc 	bl	8004448 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40006400 	.word	0x40006400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000400 	.word	0x48000400

080012c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_DMA_Init+0x38>)
 80012cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <MX_DMA_Init+0x38>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6493      	str	r3, [r2, #72]	; 0x48
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_DMA_Init+0x38>)
 80012d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	200b      	movs	r0, #11
 80012e8:	f002 fbff 	bl	8003aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012ec:	200b      	movs	r0, #11
 80012ee:	f002 fc18 	bl	8003b22 <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_GPIO_Init+0xac>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a24      	ldr	r2, [pc, #144]	; (80013ac <MX_GPIO_Init+0xac>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <MX_GPIO_Init+0xac>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_GPIO_Init+0xac>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <MX_GPIO_Init+0xac>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_GPIO_Init+0xac>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_GPIO_Init+0xac>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a18      	ldr	r2, [pc, #96]	; (80013ac <MX_GPIO_Init+0xac>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_GPIO_Init+0xac>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_GPIO_Init+0xac>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <MX_GPIO_Init+0xac>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_GPIO_Init+0xac>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPO_Pin|GPI_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f003 f9dc 	bl	800473c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPO_Pin|GPI_Pin;
 8001384:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f003 f852 	bl	8004448 <HAL_GPIO_Init>

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b598      	push	{r3, r4, r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f000 fe0b 	bl	8001fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f844 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f7ff ffa0 	bl	8001300 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c0:	f7ff ff80 	bl	80012c4 <MX_DMA_Init>
  MX_CAN1_Init();
 80013c4:	f7ff ff04 	bl	80011d0 <MX_CAN1_Init>
  MX_UART4_Init();
 80013c8:	f000 fd66 	bl	8001e98 <MX_UART4_Init>
  MX_ADC1_Init();
 80013cc:	f7ff fe2a 	bl	8001024 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  Master_BMS_CAN_Configuration(&sFilterConfig, &Master_BMS_RxHeader);
 80013d0:	4912      	ldr	r1, [pc, #72]	; (800141c <main+0x6c>)
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <main+0x70>)
 80013d4:	f000 f908 	bl	80015e8 <Master_BMS_CAN_Configuration>

  CAN_TX_Config();
 80013d8:	f000 f8b4 	bl	8001544 <CAN_TX_Config>

  Data_Logging_Config(FLASH_USER_START_ADDR, FLASH_USER_END_ADDR);
 80013dc:	4911      	ldr	r1, [pc, #68]	; (8001424 <main+0x74>)
 80013de:	4812      	ldr	r0, [pc, #72]	; (8001428 <main+0x78>)
 80013e0:	f000 fb34 	bl	8001a4c <Data_Logging_Config>

  Erase_data(&EraseInitStruct);
 80013e4:	4811      	ldr	r0, [pc, #68]	; (800142c <main+0x7c>)
 80013e6:	f000 fc1d 	bl	8001c24 <Erase_data>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	 		  Operating_time= HAL_GetTick();
 80013ea:	f000 fe55 	bl	8002098 <HAL_GetTick>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f833 	bl	800045c <__aeabi_ui2d>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <main+0x80>)
 80013fc:	e9c2 3400 	strd	r3, r4, [r2]


	 		  Master_BMS_CAN_Receive(&hcan1, &Master_BMS_RxHeader, Master_BMS_Rx_data);
 8001400:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <main+0x84>)
 8001402:	4906      	ldr	r1, [pc, #24]	; (800141c <main+0x6c>)
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <main+0x88>)
 8001406:	f000 f943 	bl	8001690 <Master_BMS_CAN_Receive>

	 		  Current_ADC_DMA(&hadc1, ADC_DMA_data, 1);
 800140a:	2201      	movs	r2, #1
 800140c:	490b      	ldr	r1, [pc, #44]	; (800143c <main+0x8c>)
 800140e:	480c      	ldr	r0, [pc, #48]	; (8001440 <main+0x90>)
 8001410:	f000 faba 	bl	8001988 <Current_ADC_DMA>

	 		  Logging_Online();
 8001414:	f000 fb48 	bl	8001aa8 <Logging_Online>
	 		  Operating_time= HAL_GetTick();
 8001418:	e7e7      	b.n	80013ea <main+0x3a>
 800141a:	bf00      	nop
 800141c:	200001e8 	.word	0x200001e8
 8001420:	200001b8 	.word	0x200001b8
 8001424:	0807ffff 	.word	0x0807ffff
 8001428:	0800b000 	.word	0x0800b000
 800142c:	20000204 	.word	0x20000204
 8001430:	200000c0 	.word	0x200000c0
 8001434:	20000240 	.word	0x20000240
 8001438:	20000190 	.word	0x20000190
 800143c:	200000ac 	.word	0x200000ac
 8001440:	200000e0 	.word	0x200000e0

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0b0      	sub	sp, #192	; 0xc0
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800144e:	2244      	movs	r2, #68	; 0x44
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f005 f914 	bl	8006680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	463b      	mov	r3, r7
 800146a:	2268      	movs	r2, #104	; 0x68
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f005 f906 	bl	8006680 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001474:	2301      	movs	r3, #1
 8001476:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	2303      	movs	r3, #3
 8001488:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800148c:	2301      	movs	r3, #1
 800148e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001492:	2314      	movs	r3, #20
 8001494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001498:	2307      	movs	r3, #7
 800149a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 f9c0 	bl	8004834 <HAL_RCC_OscConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014ba:	f000 fc53 	bl	8001d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	230f      	movs	r3, #15
 80014c0:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c2:	2303      	movs	r3, #3
 80014c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014d8:	2104      	movs	r1, #4
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fdca 	bl	8005074 <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014e6:	f000 fc3d 	bl	8001d64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_ADC;
 80014ea:	f244 0308 	movw	r3, #16392	; 0x4008
 80014ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80014fa:	2303      	movs	r3, #3
 80014fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014fe:	2301      	movs	r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001502:	2308      	movs	r3, #8
 8001504:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001506:	2307      	movs	r3, #7
 8001508:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800150a:	2302      	movs	r3, #2
 800150c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001516:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4618      	mov	r0, r3
 800151c:	f003 ffae 	bl	800547c <HAL_RCCEx_PeriphCLKConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001526:	f000 fc1d 	bl	8001d64 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800152a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800152e:	f003 f92b 	bl	8004788 <HAL_PWREx_ControlVoltageScaling>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001538:	f000 fc14 	bl	8001d64 <Error_Handler>
  }
}
 800153c:	bf00      	nop
 800153e:	37c0      	adds	r7, #192	; 0xc0
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <CAN_TX_Config>:

/* USER CODE BEGIN 4 */

void CAN_TX_Config(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
     TxHeader.StdId = 0x321;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <CAN_TX_Config+0x34>)
 800154a:	f240 3221 	movw	r2, #801	; 0x321
 800154e:	601a      	str	r2, [r3, #0]
     TxHeader.ExtId = 0x00;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <CAN_TX_Config+0x34>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
     TxHeader.IDE = CAN_ID_STD;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <CAN_TX_Config+0x34>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
     TxHeader.RTR = CAN_RTR_DATA;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <CAN_TX_Config+0x34>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
     TxHeader.DLC = 8;
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <CAN_TX_Config+0x34>)
 8001564:	2208      	movs	r2, #8
 8001566:	611a      	str	r2, [r3, #16]
     TxHeader.TransmitGlobalTime = DISABLE;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <CAN_TX_Config+0x34>)
 800156a:	2200      	movs	r2, #0
 800156c:	751a      	strb	r2, [r3, #20]

}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	20000228 	.word	0x20000228

0800157c <Transmit_Data>:

void Transmit_Data(CAN_TxHeaderTypeDef* TxHeader)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

   uint8_t Current_1 = ((Max_Current & 0xff00)>>8);
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <Transmit_Data+0x5c>)
 8001586:	e9d3 1200 	ldrd	r1, r2, [r3]
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	f04f 0400 	mov.w	r4, #0
 8001592:	0a0b      	lsrs	r3, r1, #8
 8001594:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001598:	0a14      	lsrs	r4, r2, #8
 800159a:	73fb      	strb	r3, [r7, #15]
   uint8_t Current_2 = (Max_Current & 0x00ff);
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <Transmit_Data+0x5c>)
 800159e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015a2:	73bb      	strb	r3, [r7, #14]
   tx_data[0] = Current_1;
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <Transmit_Data+0x60>)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	7013      	strb	r3, [r2, #0]
   tx_data[1] = Current_2;
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <Transmit_Data+0x60>)
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	7053      	strb	r3, [r2, #1]

   {
      Mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <Transmit_Data+0x64>)
 80015b2:	f002 f877 	bl	80036a4 <HAL_CAN_GetTxMailboxesFreeLevel>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <Transmit_Data+0x68>)
 80015ba:	601a      	str	r2, [r3, #0]

      if(Mailbox){
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <Transmit_Data+0x68>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <Transmit_Data+0x54>
      HAL_CAN_AddTxMessage(&hcan1, TxHeader, tx_data, &Mailbox);
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <Transmit_Data+0x68>)
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <Transmit_Data+0x60>)
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <Transmit_Data+0x64>)
 80015cc:	f001 ff8f 	bl	80034ee <HAL_CAN_AddTxMessage>
      }
   }

}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	20000078 	.word	0x20000078
 80015dc:	200000d8 	.word	0x200000d8
 80015e0:	20000190 	.word	0x20000190
 80015e4:	200000a0 	.word	0x200000a0

080015e8 <Master_BMS_CAN_Configuration>:

void Master_BMS_CAN_Configuration(CAN_FilterTypeDef *FilterType, CAN_RxHeaderTypeDef *RxHeader)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	FilterType->FilterIdHigh = 0x0000;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
	FilterType->FilterIdLow = 0x0000;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
	FilterType->FilterMaskIdHigh = 0x0000;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
	FilterType->FilterMaskIdLow = 0x0000;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
	FilterType->FilterFIFOAssignment = CAN_RX_FIFO0;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
	FilterType->FilterBank = 0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
	FilterType->FilterMode = CAN_FILTERMODE_IDMASK;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
	FilterType->FilterScale = CAN_FILTERSCALE_32BIT;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	61da      	str	r2, [r3, #28]
	FilterType->FilterActivation = ENABLE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	621a      	str	r2, [r3, #32]
	FilterType->SlaveStartFilterBank = 14;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	220e      	movs	r2, #14
 800162c:	625a      	str	r2, [r3, #36]	; 0x24


	   if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800162e:	4915      	ldr	r1, [pc, #84]	; (8001684 <Master_BMS_CAN_Configuration+0x9c>)
 8001630:	4815      	ldr	r0, [pc, #84]	; (8001688 <Master_BMS_CAN_Configuration+0xa0>)
 8001632:	f001 fe4e 	bl	80032d2 <HAL_CAN_ConfigFilter>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <Master_BMS_CAN_Configuration+0x58>
	   {
	  	 Error_Handler();
 800163c:	f000 fb92 	bl	8001d64 <Error_Handler>
	   }

	   RxHeader->StdId = 0x321;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	f240 3221 	movw	r2, #801	; 0x321
 8001646:	601a      	str	r2, [r3, #0]
	   RxHeader->ExtId = 0x01;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	605a      	str	r2, [r3, #4]
	   RxHeader->IDE = CAN_ID_STD;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
	   RxHeader->RTR = CAN_RTR_DATA;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
	   RxHeader->DLC = 8;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2208      	movs	r2, #8
 800165e:	611a      	str	r2, [r3, #16]
	   RxHeader->Timestamp = 0;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
	   RxHeader->FilterMatchIndex = 0;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]

	   if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <Master_BMS_CAN_Configuration+0xa0>)
 800166e:	f001 fefa 	bl	8003466 <HAL_CAN_Start>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <Master_BMS_CAN_Configuration+0x94>
	   {
	   	 	 Error_Handler();
 8001678:	f000 fb74 	bl	8001d64 <Error_Handler>
	   }
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200001b8 	.word	0x200001b8
 8001688:	20000190 	.word	0x20000190
 800168c:	00000000 	.word	0x00000000

08001690 <Master_BMS_CAN_Receive>:

void Master_BMS_CAN_Receive(CAN_HandleTypeDef *can, CAN_RxHeaderTypeDef *RxHeader, uint8_t rx_data[])
{
 8001690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001694:	b085      	sub	sp, #20
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]


     HAL_CAN_GetRxMessage(can, CAN_RX_FIFO0, RxHeader, rx_data);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	2100      	movs	r1, #0
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f002 f832 	bl	800370e <HAL_CAN_GetRxMessage>
     Max_temperature_adc = 0xAABB;//((uint64_t)rx_data[2]<<8) + ((uint64_t)rx_data[3]);
 80016aa:	4aaf      	ldr	r2, [pc, #700]	; (8001968 <Master_BMS_CAN_Receive+0x2d8>)
 80016ac:	f64a 23bb 	movw	r3, #43707	; 0xaabb
 80016b0:	f04f 0400 	mov.w	r4, #0
 80016b4:	e9c2 3400 	strd	r3, r4, [r2]
     Min_temperature_adc = 0xCCDD;//((uint64_t)rx_data[4]<<8) + ((uint64_t)rx_data[5]);
 80016b8:	4aac      	ldr	r2, [pc, #688]	; (800196c <Master_BMS_CAN_Receive+0x2dc>)
 80016ba:	f64c 43dd 	movw	r3, #52445	; 0xccdd
 80016be:	f04f 0400 	mov.w	r4, #0
 80016c2:	e9c2 3400 	strd	r3, r4, [r2]
     Max_temperature = (4.066/(1000000000)*(double)(Max_temperature_adc*Max_temperature_adc*Max_temperature_adc)) - (2.224/(100000)*(double)(Max_temperature_adc*Max_temperature_adc))+(0.063*(double)(Max_temperature_adc))-27.71;
 80016c6:	4ba8      	ldr	r3, [pc, #672]	; (8001968 <Master_BMS_CAN_Receive+0x2d8>)
 80016c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80016cc:	4ba6      	ldr	r3, [pc, #664]	; (8001968 <Master_BMS_CAN_Receive+0x2d8>)
 80016ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016d2:	fb03 f502 	mul.w	r5, r3, r2
 80016d6:	fb01 f004 	mul.w	r0, r1, r4
 80016da:	4428      	add	r0, r5
 80016dc:	fba1 3403 	umull	r3, r4, r1, r3
 80016e0:	1902      	adds	r2, r0, r4
 80016e2:	4614      	mov	r4, r2
 80016e4:	4aa0      	ldr	r2, [pc, #640]	; (8001968 <Master_BMS_CAN_Receive+0x2d8>)
 80016e6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80016ea:	fb01 f504 	mul.w	r5, r1, r4
 80016ee:	fb03 f002 	mul.w	r0, r3, r2
 80016f2:	4428      	add	r0, r5
 80016f4:	fba3 3401 	umull	r3, r4, r3, r1
 80016f8:	1902      	adds	r2, r0, r4
 80016fa:	4614      	mov	r4, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	f7fe fef0 	bl	80004e4 <__aeabi_ul2d>
 8001704:	a390      	add	r3, pc, #576	; (adr r3, 8001948 <Master_BMS_CAN_Receive+0x2b8>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe ff21 	bl	8000550 <__aeabi_dmul>
 800170e:	4603      	mov	r3, r0
 8001710:	460c      	mov	r4, r1
 8001712:	4698      	mov	r8, r3
 8001714:	46a1      	mov	r9, r4
 8001716:	4b94      	ldr	r3, [pc, #592]	; (8001968 <Master_BMS_CAN_Receive+0x2d8>)
 8001718:	e9d3 1200 	ldrd	r1, r2, [r3]
 800171c:	4b92      	ldr	r3, [pc, #584]	; (8001968 <Master_BMS_CAN_Receive+0x2d8>)
 800171e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001722:	fb03 f502 	mul.w	r5, r3, r2
 8001726:	fb01 f004 	mul.w	r0, r1, r4
 800172a:	4428      	add	r0, r5
 800172c:	fba1 3403 	umull	r3, r4, r1, r3
 8001730:	1902      	adds	r2, r0, r4
 8001732:	4614      	mov	r4, r2
 8001734:	4618      	mov	r0, r3
 8001736:	4621      	mov	r1, r4
 8001738:	f7fe fed4 	bl	80004e4 <__aeabi_ul2d>
 800173c:	a384      	add	r3, pc, #528	; (adr r3, 8001950 <Master_BMS_CAN_Receive+0x2c0>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff05 	bl	8000550 <__aeabi_dmul>
 8001746:	4603      	mov	r3, r0
 8001748:	460c      	mov	r4, r1
 800174a:	461a      	mov	r2, r3
 800174c:	4623      	mov	r3, r4
 800174e:	4640      	mov	r0, r8
 8001750:	4649      	mov	r1, r9
 8001752:	f7fe fd45 	bl	80001e0 <__aeabi_dsub>
 8001756:	4603      	mov	r3, r0
 8001758:	460c      	mov	r4, r1
 800175a:	461d      	mov	r5, r3
 800175c:	4626      	mov	r6, r4
 800175e:	4b82      	ldr	r3, [pc, #520]	; (8001968 <Master_BMS_CAN_Receive+0x2d8>)
 8001760:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001764:	4618      	mov	r0, r3
 8001766:	4621      	mov	r1, r4
 8001768:	f7fe febc 	bl	80004e4 <__aeabi_ul2d>
 800176c:	a37a      	add	r3, pc, #488	; (adr r3, 8001958 <Master_BMS_CAN_Receive+0x2c8>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7fe feed 	bl	8000550 <__aeabi_dmul>
 8001776:	4603      	mov	r3, r0
 8001778:	460c      	mov	r4, r1
 800177a:	461a      	mov	r2, r3
 800177c:	4623      	mov	r3, r4
 800177e:	4628      	mov	r0, r5
 8001780:	4631      	mov	r1, r6
 8001782:	f7fe fd2f 	bl	80001e4 <__adddf3>
 8001786:	4603      	mov	r3, r0
 8001788:	460c      	mov	r4, r1
 800178a:	4618      	mov	r0, r3
 800178c:	4621      	mov	r1, r4
 800178e:	a374      	add	r3, pc, #464	; (adr r3, 8001960 <Master_BMS_CAN_Receive+0x2d0>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fd24 	bl	80001e0 <__aeabi_dsub>
 8001798:	4603      	mov	r3, r0
 800179a:	460c      	mov	r4, r1
 800179c:	4618      	mov	r0, r3
 800179e:	4621      	mov	r1, r4
 80017a0:	f7ff fa96 	bl	8000cd0 <__aeabi_d2ulz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	460c      	mov	r4, r1
 80017a8:	4a71      	ldr	r2, [pc, #452]	; (8001970 <Master_BMS_CAN_Receive+0x2e0>)
 80017aa:	e9c2 3400 	strd	r3, r4, [r2]
     Min_temperature = (4.066/(1000000000)*(double)(Min_temperature_adc*Min_temperature_adc*Min_temperature_adc)) - (2.224/(100000)*(double)(Min_temperature_adc*Min_temperature_adc))+(0.063*(double)(Min_temperature_adc))-27.71;
 80017ae:	4b6f      	ldr	r3, [pc, #444]	; (800196c <Master_BMS_CAN_Receive+0x2dc>)
 80017b0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80017b4:	4b6d      	ldr	r3, [pc, #436]	; (800196c <Master_BMS_CAN_Receive+0x2dc>)
 80017b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017ba:	fb03 f502 	mul.w	r5, r3, r2
 80017be:	fb01 f004 	mul.w	r0, r1, r4
 80017c2:	4428      	add	r0, r5
 80017c4:	fba1 3403 	umull	r3, r4, r1, r3
 80017c8:	1902      	adds	r2, r0, r4
 80017ca:	4614      	mov	r4, r2
 80017cc:	4a67      	ldr	r2, [pc, #412]	; (800196c <Master_BMS_CAN_Receive+0x2dc>)
 80017ce:	e9d2 1200 	ldrd	r1, r2, [r2]
 80017d2:	fb01 f504 	mul.w	r5, r1, r4
 80017d6:	fb03 f002 	mul.w	r0, r3, r2
 80017da:	4428      	add	r0, r5
 80017dc:	fba3 3401 	umull	r3, r4, r3, r1
 80017e0:	1902      	adds	r2, r0, r4
 80017e2:	4614      	mov	r4, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	4621      	mov	r1, r4
 80017e8:	f7fe fe7c 	bl	80004e4 <__aeabi_ul2d>
 80017ec:	a356      	add	r3, pc, #344	; (adr r3, 8001948 <Master_BMS_CAN_Receive+0x2b8>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe fead 	bl	8000550 <__aeabi_dmul>
 80017f6:	4603      	mov	r3, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	4698      	mov	r8, r3
 80017fc:	46a1      	mov	r9, r4
 80017fe:	4b5b      	ldr	r3, [pc, #364]	; (800196c <Master_BMS_CAN_Receive+0x2dc>)
 8001800:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <Master_BMS_CAN_Receive+0x2dc>)
 8001806:	e9d3 3400 	ldrd	r3, r4, [r3]
 800180a:	fb03 f502 	mul.w	r5, r3, r2
 800180e:	fb01 f004 	mul.w	r0, r1, r4
 8001812:	4428      	add	r0, r5
 8001814:	fba1 3403 	umull	r3, r4, r1, r3
 8001818:	1902      	adds	r2, r0, r4
 800181a:	4614      	mov	r4, r2
 800181c:	4618      	mov	r0, r3
 800181e:	4621      	mov	r1, r4
 8001820:	f7fe fe60 	bl	80004e4 <__aeabi_ul2d>
 8001824:	a34a      	add	r3, pc, #296	; (adr r3, 8001950 <Master_BMS_CAN_Receive+0x2c0>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe fe91 	bl	8000550 <__aeabi_dmul>
 800182e:	4603      	mov	r3, r0
 8001830:	460c      	mov	r4, r1
 8001832:	461a      	mov	r2, r3
 8001834:	4623      	mov	r3, r4
 8001836:	4640      	mov	r0, r8
 8001838:	4649      	mov	r1, r9
 800183a:	f7fe fcd1 	bl	80001e0 <__aeabi_dsub>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	461d      	mov	r5, r3
 8001844:	4626      	mov	r6, r4
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <Master_BMS_CAN_Receive+0x2dc>)
 8001848:	e9d3 3400 	ldrd	r3, r4, [r3]
 800184c:	4618      	mov	r0, r3
 800184e:	4621      	mov	r1, r4
 8001850:	f7fe fe48 	bl	80004e4 <__aeabi_ul2d>
 8001854:	a340      	add	r3, pc, #256	; (adr r3, 8001958 <Master_BMS_CAN_Receive+0x2c8>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe fe79 	bl	8000550 <__aeabi_dmul>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	461a      	mov	r2, r3
 8001864:	4623      	mov	r3, r4
 8001866:	4628      	mov	r0, r5
 8001868:	4631      	mov	r1, r6
 800186a:	f7fe fcbb 	bl	80001e4 <__adddf3>
 800186e:	4603      	mov	r3, r0
 8001870:	460c      	mov	r4, r1
 8001872:	4618      	mov	r0, r3
 8001874:	4621      	mov	r1, r4
 8001876:	a33a      	add	r3, pc, #232	; (adr r3, 8001960 <Master_BMS_CAN_Receive+0x2d0>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fcb0 	bl	80001e0 <__aeabi_dsub>
 8001880:	4603      	mov	r3, r0
 8001882:	460c      	mov	r4, r1
 8001884:	4618      	mov	r0, r3
 8001886:	4621      	mov	r1, r4
 8001888:	f7ff fa22 	bl	8000cd0 <__aeabi_d2ulz>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	4a38      	ldr	r2, [pc, #224]	; (8001974 <Master_BMS_CAN_Receive+0x2e4>)
 8001892:	e9c2 3400 	strd	r3, r4, [r2]
     Voltage = ((uint64_t)rx_data[0]<<8) + ((uint64_t)rx_data[1]);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b2d9      	uxtb	r1, r3
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0500 	mov.w	r5, #0
 80018a4:	f04f 0600 	mov.w	r6, #0
 80018a8:	0216      	lsls	r6, r2, #8
 80018aa:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 80018ae:	020d      	lsls	r5, r1, #8
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	3201      	adds	r2, #1
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	b2d1      	uxtb	r1, r2
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	186b      	adds	r3, r5, r1
 80018be:	eb46 0402 	adc.w	r4, r6, r2
 80018c2:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <Master_BMS_CAN_Receive+0x2e8>)
 80018c4:	e9c2 3400 	strd	r3, r4, [r2]
     rx_data[6] = ((uint8_t)((Max_Current>>8)&0x000F));
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <Master_BMS_CAN_Receive+0x2ec>)
 80018ca:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	f04f 0400 	mov.w	r4, #0
 80018d6:	0a0b      	lsrs	r3, r1, #8
 80018d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018dc:	0a14      	lsrs	r4, r2, #8
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3306      	adds	r3, #6
 80018e4:	f002 020f 	and.w	r2, r2, #15
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	701a      	strb	r2, [r3, #0]
     rx_data[7] = ((uint8_t)(Max_Current&0x000F));
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <Master_BMS_CAN_Receive+0x2ec>)
 80018ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3307      	adds	r3, #7
 80018f8:	f002 020f 	and.w	r2, r2, #15
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]

     if(Operating_Flag == 0 )
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <Master_BMS_CAN_Receive+0x2f0>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eef5 7a40 	vcmp.f32	s15, #0.0
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	d106      	bne.n	800191e <Master_BMS_CAN_Receive+0x28e>
     {
    	 Min_Voltage = 0x9999;
 8001910:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <Master_BMS_CAN_Receive+0x2f4>)
 8001912:	f649 1399 	movw	r3, #39321	; 0x9999
 8001916:	f04f 0400 	mov.w	r4, #0
 800191a:	e9c2 3400 	strd	r3, r4, [r2]
     }

     if (Min_Voltage>Voltage)
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <Master_BMS_CAN_Receive+0x2f4>)
 8001920:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <Master_BMS_CAN_Receive+0x2e8>)
 8001926:	e9d2 1200 	ldrd	r1, r2, [r2]
 800192a:	42a2      	cmp	r2, r4
 800192c:	bf08      	it	eq
 800192e:	4299      	cmpeq	r1, r3
 8001930:	d205      	bcs.n	800193e <Master_BMS_CAN_Receive+0x2ae>
     {
   		 Min_Voltage = Voltage;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <Master_BMS_CAN_Receive+0x2e8>)
 8001934:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <Master_BMS_CAN_Receive+0x2f4>)
 800193a:	e9c2 3400 	strd	r3, r4, [r2]
     }



}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001948:	415bb3fa 	.word	0x415bb3fa
 800194c:	3e31769d 	.word	0x3e31769d
 8001950:	29a0b847 	.word	0x29a0b847
 8001954:	3ef75201 	.word	0x3ef75201
 8001958:	9ba5e354 	.word	0x9ba5e354
 800195c:	3fb020c4 	.word	0x3fb020c4
 8001960:	8f5c28f6 	.word	0x8f5c28f6
 8001964:	403bb5c2 	.word	0x403bb5c2
 8001968:	20000080 	.word	0x20000080
 800196c:	20000088 	.word	0x20000088
 8001970:	20000068 	.word	0x20000068
 8001974:	20000070 	.word	0x20000070
 8001978:	20000050 	.word	0x20000050
 800197c:	20000078 	.word	0x20000078
 8001980:	200000d4 	.word	0x200000d4
 8001984:	20000058 	.word	0x20000058

08001988 <Current_ADC_DMA>:

void Current_ADC_DMA(ADC_HandleTypeDef *hadc, uint32_t data[], uint32_t Length)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	      HAL_ADC_Start_DMA(hadc, data, Length);
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fea1 	bl	80026e0 <HAL_ADC_Start_DMA>
	      Current = ((((float)data[0])*0.121)+10.12);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019aa:	ee17 0a90 	vmov	r0, s15
 80019ae:	f7fe fd77 	bl	80004a0 <__aeabi_f2d>
 80019b2:	a322      	add	r3, pc, #136	; (adr r3, 8001a3c <Current_ADC_DMA+0xb4>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fdca 	bl	8000550 <__aeabi_dmul>
 80019bc:	4603      	mov	r3, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	4618      	mov	r0, r3
 80019c2:	4621      	mov	r1, r4
 80019c4:	a31f      	add	r3, pc, #124	; (adr r3, 8001a44 <Current_ADC_DMA+0xbc>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fc0b 	bl	80001e4 <__adddf3>
 80019ce:	4603      	mov	r3, r0
 80019d0:	460c      	mov	r4, r1
 80019d2:	4618      	mov	r0, r3
 80019d4:	4621      	mov	r1, r4
 80019d6:	f7ff f97b 	bl	8000cd0 <__aeabi_d2ulz>
 80019da:	4603      	mov	r3, r0
 80019dc:	460c      	mov	r4, r1
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <Current_ADC_DMA+0xa8>)
 80019e0:	e9c2 3400 	strd	r3, r4, [r2]
	      if( Operating_Flag == 0 )
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <Current_ADC_DMA+0xac>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d106      	bne.n	8001a02 <Current_ADC_DMA+0x7a>
	         {
	        	 Max_Current = 0;
 80019f4:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <Current_ADC_DMA+0xb0>)
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	f04f 0400 	mov.w	r4, #0
 80019fe:	e9c2 3400 	strd	r3, r4, [r2]
	         }

	      if(Max_Current<Current)
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <Current_ADC_DMA+0xb0>)
 8001a04:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <Current_ADC_DMA+0xa8>)
 8001a0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a0e:	42a2      	cmp	r2, r4
 8001a10:	bf08      	it	eq
 8001a12:	4299      	cmpeq	r1, r3
 8001a14:	d205      	bcs.n	8001a22 <Current_ADC_DMA+0x9a>
	         {
	    	     Max_Current=Current;
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <Current_ADC_DMA+0xa8>)
 8001a18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <Current_ADC_DMA+0xb0>)
 8001a1e:	e9c2 3400 	strd	r3, r4, [r2]
	         }


}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	f3af 8000 	nop.w
 8001a30:	20000060 	.word	0x20000060
 8001a34:	200000d4 	.word	0x200000d4
 8001a38:	20000078 	.word	0x20000078
 8001a3c:	22d0e560 	.word	0x22d0e560
 8001a40:	3fbef9db 	.word	0x3fbef9db
 8001a44:	a3d70a3d 	.word	0xa3d70a3d
 8001a48:	40243d70 	.word	0x40243d70

08001a4c <Data_Logging_Config>:

void Data_Logging_Config(uint32_t Logging_Start_Page_ADDR, uint32_t Logging_END_Page_ADDR)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	 HAL_FLASH_Unlock();
 8001a56:	f002 fae3 	bl	8004020 <HAL_FLASH_Unlock>

	  FirstPage = GetPage(Logging_Start_Page_ADDR); // Get the 1st page to erase
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f90c 	bl	8001c78 <GetPage>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <Data_Logging_Config+0x48>)
 8001a64:	601a      	str	r2, [r3, #0]
	  NbOfPages = GetPage(Logging_END_Page_ADDR) - FirstPage + 1; // Get the number of pages to erase form 1st page
 8001a66:	6838      	ldr	r0, [r7, #0]
 8001a68:	f000 f906 	bl	8001c78 <GetPage>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <Data_Logging_Config+0x48>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	3301      	adds	r3, #1
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <Data_Logging_Config+0x4c>)
 8001a78:	6013      	str	r3, [r2, #0]
	  BankNumber = GetBank(Logging_Start_Page_ADDR); // Get the Bank
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f940 	bl	8001d00 <GetBank>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <Data_Logging_Config+0x50>)
 8001a84:	601a      	str	r2, [r3, #0]
	  Address = FLASH_USER_START_ADDR;
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <Data_Logging_Config+0x54>)
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <Data_Logging_Config+0x58>)
 8001a8a:	601a      	str	r2, [r3, #0]

}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000090 	.word	0x20000090
 8001a98:	20000094 	.word	0x20000094
 8001a9c:	20000098 	.word	0x20000098
 8001aa0:	2000009c 	.word	0x2000009c
 8001aa4:	0800b000 	.word	0x0800b000

08001aa8 <Logging_Online>:

void Logging_Online(void)
{
 8001aa8:	b598      	push	{r3, r4, r7, lr}
 8001aaa:	af00      	add	r7, sp, #0


		 		  HAL_FLASH_Unlock();
 8001aac:	f002 fab8 	bl	8004020 <HAL_FLASH_Unlock>
		 		 if((Operating_time-Operating_time_Update)>=1000)
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <Logging_Online+0x9c>)
 8001ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <Logging_Online+0xa0>)
 8001ab8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4623      	mov	r3, r4
 8001ac0:	f7fe fb8e 	bl	80001e0 <__aeabi_dsub>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	460c      	mov	r4, r1
 8001ac8:	4618      	mov	r0, r3
 8001aca:	4621      	mov	r1, r4
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <Logging_Online+0xa4>)
 8001ad2:	f7fe ffc3 	bl	8000a5c <__aeabi_dcmpge>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d014      	beq.n	8001b06 <Logging_Online+0x5e>
		 			   {
		 			          Operating_time_Update = Operating_time;
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <Logging_Online+0x9c>)
 8001ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ae2:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <Logging_Online+0xa0>)
 8001ae4:	e9c2 3400 	strd	r3, r4, [r2]
		 			 		  Write_data( &Wx_data0, &Wx_data1);
 8001ae8:	4919      	ldr	r1, [pc, #100]	; (8001b50 <Logging_Online+0xa8>)
 8001aea:	481a      	ldr	r0, [pc, #104]	; (8001b54 <Logging_Online+0xac>)
 8001aec:	f000 f83c 	bl	8001b68 <Write_data>
		 			 		  Bluetooth_Tx(Master_BMS_Rx_data);
 8001af0:	4819      	ldr	r0, [pc, #100]	; (8001b58 <Logging_Online+0xb0>)
 8001af2:	f000 f911 	bl	8001d18 <Bluetooth_Tx>
		 			 		  Transmit_Data(&TxHeader);
 8001af6:	4819      	ldr	r0, [pc, #100]	; (8001b5c <Logging_Online+0xb4>)
 8001af8:	f7ff fd40 	bl	800157c <Transmit_Data>

		 			 		  Operating_Flag=0;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <Logging_Online+0xb8>)
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e003      	b.n	8001b0e <Logging_Online+0x66>
		 	   		   }
		 	     else
		 		  	   {
		 			 		  Operating_Flag=1;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <Logging_Online+0xb8>)
 8001b08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b0c:	601a      	str	r2, [r3, #0]
		 		  	   }




	 			  HAL_FLASH_Lock();
 8001b0e:	f002 faa9 	bl	8004064 <HAL_FLASH_Lock>
	 			  Write_Flag = (uint64_t)(Operating_time/1000);
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <Logging_Online+0x9c>)
 8001b14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <Logging_Online+0xa4>)
 8001b1e:	f7fe fe41 	bl	80007a4 <__aeabi_ddiv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7ff f8d1 	bl	8000cd0 <__aeabi_d2ulz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460c      	mov	r4, r1
 8001b32:	4618      	mov	r0, r3
 8001b34:	4621      	mov	r1, r4
 8001b36:	f7ff f86d 	bl	8000c14 <__aeabi_ul2f>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <Logging_Online+0xbc>)
 8001b3e:	601a      	str	r2, [r3, #0]


}
 8001b40:	bf00      	nop
 8001b42:	bd98      	pop	{r3, r4, r7, pc}
 8001b44:	200000c0 	.word	0x200000c0
 8001b48:	200000c8 	.word	0x200000c8
 8001b4c:	408f4000 	.word	0x408f4000
 8001b50:	20000220 	.word	0x20000220
 8001b54:	200001e0 	.word	0x200001e0
 8001b58:	20000240 	.word	0x20000240
 8001b5c:	20000228 	.word	0x20000228
 8001b60:	200000d4 	.word	0x200000d4
 8001b64:	200000d0 	.word	0x200000d0

08001b68 <Write_data>:

void Write_data(uint64_t *Wx_data0, uint64_t*Wx_data1)
{
 8001b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
		  *(Wx_data0) = ((Min_Voltage << 48) | (Max_Current <<32) |(Max_temperature_adc << 16) | (Min_temperature_adc));
 8001b72:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <Write_data+0xa8>)
 8001b74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	2100      	movs	r1, #0
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <Write_data+0xac>)
 8001b86:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	f04f 0400 	mov.w	r4, #0
 8001b92:	002c      	movs	r4, r5
 8001b94:	2300      	movs	r3, #0
 8001b96:	ea41 0503 	orr.w	r5, r1, r3
 8001b9a:	ea42 0604 	orr.w	r6, r2, r4
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <Write_data+0xb0>)
 8001ba0:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	f04f 0400 	mov.w	r4, #0
 8001bac:	0414      	lsls	r4, r2, #16
 8001bae:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8001bb2:	040b      	lsls	r3, r1, #16
 8001bb4:	ea45 0103 	orr.w	r1, r5, r3
 8001bb8:	ea46 0204 	orr.w	r2, r6, r4
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <Write_data+0xb4>)
 8001bbe:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001bc2:	ea45 0301 	orr.w	r3, r5, r1
 8001bc6:	ea46 0402 	orr.w	r4, r6, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	e9c2 3400 	strd	r3, r4, [r2]

	 if((HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, *(Wx_data0))==HAL_OK))
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <Write_data+0xb8>)
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4623      	mov	r3, r4
 8001bde:	2000      	movs	r0, #0
 8001be0:	f002 f9b2 	bl	8003f48 <HAL_FLASH_Program>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <Write_data+0x9c>

		  {
			  Address = Address + 8;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <Write_data+0xb8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3308      	adds	r3, #8
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <Write_data+0xb8>)
 8001bf2:	6013      	str	r3, [r2, #0]
			  *(Wx_data0)=0;
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	f04f 0400 	mov.w	r4, #0
 8001bfe:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  else
		  {
			  HAL_FLASH_GetError();
		  }
}
 8001c02:	e001      	b.n	8001c08 <Write_data+0xa0>
			  HAL_FLASH_GetError();
 8001c04:	f002 fa3e 	bl	8004084 <HAL_FLASH_GetError>
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c10:	20000058 	.word	0x20000058
 8001c14:	20000078 	.word	0x20000078
 8001c18:	20000080 	.word	0x20000080
 8001c1c:	20000088 	.word	0x20000088
 8001c20:	2000009c 	.word	0x2000009c

08001c24 <Erase_data>:

void Erase_data(FLASH_EraseInitTypeDef *EraseInitType)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	  // Fill EraseInit structure
	  EraseInitType->TypeErase = FLASH_TYPEERASE_PAGES;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
	  EraseInitType->Banks = BankNumber;
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <Erase_data+0x40>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	605a      	str	r2, [r3, #4]
	  EraseInitType->Page = FirstPage;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <Erase_data+0x44>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	609a      	str	r2, [r3, #8]
	  EraseInitType->NbPages = NbOfPages;
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <Erase_data+0x48>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60da      	str	r2, [r3, #12]

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001c4a:	4909      	ldr	r1, [pc, #36]	; (8001c70 <Erase_data+0x4c>)
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <Erase_data+0x50>)
 8001c4e:	f002 fad5 	bl	80041fc <HAL_FLASHEx_Erase>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <Erase_data+0x38>
	  {
		  // Error Occurred while writing data in Flash memory.
		  HAL_FLASH_GetError();
 8001c58:	f002 fa14 	bl	8004084 <HAL_FLASH_GetError>

	  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000098 	.word	0x20000098
 8001c68:	20000090 	.word	0x20000090
 8001c6c:	20000094 	.word	0x20000094
 8001c70:	200000a8 	.word	0x200000a8
 8001c74:	20000204 	.word	0x20000204

08001c78 <GetPage>:

uint32_t GetPage(uint32_t Addr)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

	if(Addr<(FLASH_BASE + FLASH_BANK_SIZE))
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <GetPage+0x78>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <GetPage+0x26>
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <GetPage+0x78>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	029a      	lsls	r2, r3, #10
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <GetPage+0x7c>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001c9c:	e000      	b.n	8001ca0 <GetPage+0x28>
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <GetPage+0x80>)
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d906      	bls.n	8001cb4 <GetPage+0x3c>
	{
		// Bank 1
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001cac:	0adb      	lsrs	r3, r3, #11
 8001cae:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <GetPage+0x84>)
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e014      	b.n	8001cde <GetPage+0x66>
	}
	else
	{
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <GetPage+0x78>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <GetPage+0x5a>
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <GetPage+0x78>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	029a      	lsls	r2, r3, #10
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <GetPage+0x7c>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001cd0:	e000      	b.n	8001cd4 <GetPage+0x5c>
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <GetPage+0x80>)
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	0adb      	lsrs	r3, r3, #11
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <GetPage+0x84>)
 8001cdc:	6013      	str	r3, [r2, #0]
	}
	return page;
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <GetPage+0x84>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	1fff75e0 	.word	0x1fff75e0
 8001cf4:	03fffc00 	.word	0x03fffc00
 8001cf8:	08080000 	.word	0x08080000
 8001cfc:	200000a4 	.word	0x200000a4

08001d00 <GetBank>:

uint32_t GetBank(uint32_t Addr)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	return FLASH_BANK_1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <Bluetooth_Tx>:

void Bluetooth_Tx(uint8_t *Parameter)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]


	for(int i=0; i<8; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e00b      	b.n	8001d3e <Bluetooth_Tx+0x26>
	{

		Bluetooth_TxData[i] = *(Parameter + i); // full voltage value
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	7819      	ldrb	r1, [r3, #0]
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <Bluetooth_Tx+0x44>)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	460a      	mov	r2, r1
 8001d36:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<8; i++)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b07      	cmp	r3, #7
 8001d42:	ddf0      	ble.n	8001d26 <Bluetooth_Tx+0xe>

	}



   HAL_UART_Transmit(&huart4, Bluetooth_TxData, 8, 1000);
 8001d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4904      	ldr	r1, [pc, #16]	; (8001d5c <Bluetooth_Tx+0x44>)
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <Bluetooth_Tx+0x48>)
 8001d4e:	f003 ff3d 	bl	8005bcc <HAL_UART_Transmit>


}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000214 	.word	0x20000214
 8001d60:	20000248 	.word	0x20000248

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_MspInit+0x44>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_MspInit+0x44>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6613      	str	r3, [r2, #96]	; 0x60
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_MspInit+0x44>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_MspInit+0x44>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_MspInit+0x44>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_MspInit+0x44>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <HardFault_Handler+0x4>

08001dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <MemManage_Handler+0x4>

08001dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e10:	f000 f930 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <DMA1_Channel1_IRQHandler+0x10>)
 8001e1e:	f001 ffb3 	bl	8003d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000148 	.word	0x20000148

08001e2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <SystemInit+0x64>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <SystemInit+0x64>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <SystemInit+0x68>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <SystemInit+0x68>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <SystemInit+0x68>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <SystemInit+0x68>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <SystemInit+0x68>)
 8001e58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <SystemInit+0x68>)
 8001e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <SystemInit+0x68>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <SystemInit+0x68>)
 8001e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <SystemInit+0x68>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SystemInit+0x64>)
 8001e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e82:	609a      	str	r2, [r3, #8]
#endif
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00
 8001e94:	40021000 	.word	0x40021000

08001e98 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001e9e:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <MX_UART4_Init+0x5c>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001ea4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ea8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_UART4_Init+0x58>)
 8001edc:	f003 fe28 	bl	8005b30 <HAL_UART_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ee6:	f7ff ff3d 	bl	8001d64 <Error_Handler>
  }

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000248 	.word	0x20000248
 8001ef4:	40004c00 	.word	0x40004c00

08001ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_UART_MspInit+0x7c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d128      	bne.n	8001f6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_UART_MspInit+0x80>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_UART_MspInit+0x80>)
 8001f20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f24:	6593      	str	r3, [r2, #88]	; 0x58
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_UART_MspInit+0x80>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_UART_MspInit+0x80>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <HAL_UART_MspInit+0x80>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_UART_MspInit+0x80>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f68:	f002 fa6e 	bl	8004448 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40004c00 	.word	0x40004c00
 8001f78:	40021000 	.word	0x40021000

08001f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f82:	e003      	b.n	8001f8c <LoopCopyDataInit>

08001f84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f8a:	3104      	adds	r1, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f94:	d3f6      	bcc.n	8001f84 <CopyDataInit>
	ldr	r2, =_sbss
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f98:	e002      	b.n	8001fa0 <LoopFillZerobss>

08001f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f9c:	f842 3b04 	str.w	r3, [r2], #4

08001fa0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <LoopForever+0x16>)
	cmp	r2, r3
 8001fa2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fa4:	d3f9      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fa6:	f7ff ff41 	bl	8001e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f004 fb45 	bl	8006638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fae:	f7ff f9ff 	bl	80013b0 <main>

08001fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb2:	e7fe      	b.n	8001fb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fb4:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001fb8:	08006700 	.word	0x08006700
	ldr	r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fc0:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 8001fc4:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8001fc8:	200002cc 	.word	0x200002cc

08001fcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC1_IRQHandler>

08001fce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f001 fd7b 	bl	8003ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f000 f80e 	bl	8002000 <HAL_InitTick>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	71fb      	strb	r3, [r7, #7]
 8001fee:	e001      	b.n	8001ff4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff0:	f7ff fec0 	bl	8001d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_InitTick+0x68>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d022      	beq.n	800205a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_InitTick+0x6c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_InitTick+0x68>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002020:	fbb1 f3f3 	udiv	r3, r1, r3
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f001 fd88 	bl	8003b3e <HAL_SYSTICK_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10f      	bne.n	8002054 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d809      	bhi.n	800204e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203a:	2200      	movs	r2, #0
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
 8002042:	f001 fd52 	bl	8003aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_InitTick+0x70>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e007      	b.n	800205e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	e004      	b.n	800205e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e001      	b.n	800205e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000008 	.word	0x20000008
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x1c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x20>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4413      	add	r3, r2
 8002082:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_IncTick+0x1c>)
 8002084:	6013      	str	r3, [r2, #0]
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	200002c8 	.word	0x200002c8
 8002094:	20000008 	.word	0x20000008

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200002c8 	.word	0x200002c8

080020b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002118:	b490      	push	{r4, r7}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3360      	adds	r3, #96	; 0x60
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002134:	6822      	ldr	r2, [r4, #0]
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <LL_ADC_SetOffset+0x40>)
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	4313      	orrs	r3, r2
 8002146:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800214a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bc90      	pop	{r4, r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	03fff000 	.word	0x03fff000

0800215c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800215c:	b490      	push	{r4, r7}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3360      	adds	r3, #96	; 0x60
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bc90      	pop	{r4, r7}
 8002182:	4770      	bx	lr

08002184 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002184:	b490      	push	{r4, r7}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3360      	adds	r3, #96	; 0x60
 8002194:	461a      	mov	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc90      	pop	{r4, r7}
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	615a      	str	r2, [r3, #20]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002200:	b490      	push	{r4, r7}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3330      	adds	r3, #48	; 0x30
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	4413      	add	r3, r2
 800221e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	211f      	movs	r1, #31
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	401a      	ands	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0e9b      	lsrs	r3, r3, #26
 8002236:	f003 011f 	and.w	r1, r3, #31
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bc90      	pop	{r4, r7}
 8002250:	4770      	bx	lr

08002252 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002252:	b490      	push	{r4, r7}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3314      	adds	r3, #20
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	0e5b      	lsrs	r3, r3, #25
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	4413      	add	r3, r2
 8002270:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	0d1b      	lsrs	r3, r3, #20
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2107      	movs	r1, #7
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	401a      	ands	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	0d1b      	lsrs	r3, r3, #20
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bc90      	pop	{r4, r7}
 80022a0:	4770      	bx	lr
	...

080022a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0318 	and.w	r3, r3, #24
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022c8:	40d9      	lsrs	r1, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	400b      	ands	r3, r1
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	431a      	orrs	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	0007ffff 	.word	0x0007ffff

080022ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6093      	str	r3, [r2, #8]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002324:	d101      	bne.n	800232a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800234c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002374:	d101      	bne.n	800237a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <LL_ADC_IsEnabled+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_ADC_IsEnabled+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ea:	f043 0204 	orr.w	r2, r3, #4
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b04      	cmp	r3, #4
 8002410:	d101      	bne.n	8002416 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b08      	cmp	r3, #8
 8002436:	d101      	bne.n	800243c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e12d      	b.n	80026c2 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fe fe3d 	bl	80010f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff3f 	bl	8002310 <LL_ADC_IsDeepPowerDownEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff25 	bl	80022ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff5a 	bl	8002360 <LL_ADC_IsInternalRegulatorEnabled>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d113      	bne.n	80024da <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff3e 	bl	8002338 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024bc:	4b83      	ldr	r3, [pc, #524]	; (80026cc <HAL_ADC_Init+0x280>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	4a83      	ldr	r2, [pc, #524]	; (80026d0 <HAL_ADC_Init+0x284>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024cc:	e002      	b.n	80024d4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f9      	bne.n	80024ce <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff3e 	bl	8002360 <LL_ADC_IsInternalRegulatorEnabled>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	f043 0210 	orr.w	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff77 	bl	80023fe <LL_ADC_REG_IsConversionOngoing>
 8002510:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 80c8 	bne.w	80026b0 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 80c4 	bne.w	80026b0 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002530:	f043 0202 	orr.w	r2, r3, #2
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff37 	bl	80023b0 <LL_ADC_IsEnabled>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002548:	4862      	ldr	r0, [pc, #392]	; (80026d4 <HAL_ADC_Init+0x288>)
 800254a:	f7ff ff31 	bl	80023b0 <LL_ADC_IsEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4619      	mov	r1, r3
 800255a:	485f      	ldr	r0, [pc, #380]	; (80026d8 <HAL_ADC_Init+0x28c>)
 800255c:	f7ff fda8 	bl	80020b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7e5b      	ldrb	r3, [r3, #25]
 8002564:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800256a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002570:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002576:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d106      	bne.n	800259c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	045b      	lsls	r3, r3, #17
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_ADC_Init+0x290>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff14 	bl	80023fe <LL_ADC_REG_IsConversionOngoing>
 80025d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff21 	bl	8002424 <LL_ADC_INJ_IsConversionOngoing>
 80025e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d140      	bne.n	800266c <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d13d      	bne.n	800266c <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e1b      	ldrb	r3, [r3, #24]
 80025f8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025fa:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002602:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002612:	f023 0306 	bic.w	r3, r3, #6
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	430b      	orrs	r3, r1
 800261e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002626:	2b01      	cmp	r3, #1
 8002628:	d118      	bne.n	800265c <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800264c:	430a      	orrs	r2, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e007      	b.n	800266c <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10c      	bne.n	800268e <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f023 010f 	bic.w	r1, r3, #15
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	1e5a      	subs	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
 800268c:	e007      	b.n	800269e <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 020f 	bic.w	r2, r2, #15
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	f023 0303 	bic.w	r3, r3, #3
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	659a      	str	r2, [r3, #88]	; 0x58
 80026ae:	e007      	b.n	80026c0 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f043 0210 	orr.w	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000
 80026d0:	053e2d63 	.word	0x053e2d63
 80026d4:	50040000 	.word	0x50040000
 80026d8:	50040300 	.word	0x50040300
 80026dc:	fff0c007 	.word	0xfff0c007

080026e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fe84 	bl	80023fe <LL_ADC_REG_IsConversionOngoing>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d167      	bne.n	80027cc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_ADC_Start_DMA+0x2a>
 8002706:	2302      	movs	r3, #2
 8002708:	e063      	b.n	80027d2 <HAL_ADC_Start_DMA+0xf2>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fbf4 	bl	8002f00 <ADC_Enable>
 8002718:	4603      	mov	r3, r0
 800271a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d14f      	bne.n	80027c2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	f023 0206 	bic.w	r2, r3, #6
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	65da      	str	r2, [r3, #92]	; 0x5c
 800274e:	e002      	b.n	8002756 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275a:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_ADC_Start_DMA+0xfc>)
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_ADC_Start_DMA+0x100>)
 8002764:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276a:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <HAL_ADC_Start_DMA+0x104>)
 800276c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	221c      	movs	r2, #28
 8002774:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0210 	orr.w	r2, r2, #16
 800278c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3340      	adds	r3, #64	; 0x40
 80027a8:	4619      	mov	r1, r3
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f001 fa8b 	bl	8003cc8 <HAL_DMA_Start_IT>
 80027b2:	4603      	mov	r3, r0
 80027b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fe0b 	bl	80023d6 <LL_ADC_REG_StartConversion>
 80027c0:	e006      	b.n	80027d0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80027ca:	e001      	b.n	80027d0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
 80027ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	08002fb5 	.word	0x08002fb5
 80027e0:	0800308d 	.word	0x0800308d
 80027e4:	080030a9 	.word	0x080030a9

080027e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b0a6      	sub	sp, #152	; 0x98
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x22>
 8002842:	2302      	movs	r3, #2
 8002844:	e352      	b.n	8002eec <HAL_ADC_ConfigChannel+0x6c8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fdd3 	bl	80023fe <LL_ADC_REG_IsConversionOngoing>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 8337 	bne.w	8002ece <HAL_ADC_ConfigChannel+0x6aa>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d824      	bhi.n	80028b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	3b02      	subs	r3, #2
 800286e:	2b03      	cmp	r3, #3
 8002870:	d81b      	bhi.n	80028aa <HAL_ADC_ConfigChannel+0x86>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <HAL_ADC_ConfigChannel+0x54>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	08002891 	.word	0x08002891
 8002880:	08002899 	.word	0x08002899
 8002884:	080028a1 	.word	0x080028a1
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	220c      	movs	r2, #12
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e011      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2212      	movs	r2, #18
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	e00d      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2218      	movs	r2, #24
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e009      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	e004      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2206      	movs	r2, #6
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	e000      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80028b2:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	f7ff fc9d 	bl	8002200 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fd97 	bl	80023fe <LL_ADC_REG_IsConversionOngoing>
 80028d0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fda3 	bl	8002424 <LL_ADC_INJ_IsConversionOngoing>
 80028de:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 8163 	bne.w	8002bb2 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 815e 	bne.w	8002bb2 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028fe:	d10f      	bne.n	8002920 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	4619      	mov	r1, r3
 800290c:	f7ff fca1 	bl	8002252 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fc4b 	bl	80021b4 <LL_ADC_SetSamplingTimeCommonConfig>
 800291e:	e00e      	b.n	800293e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6819      	ldr	r1, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	461a      	mov	r2, r3
 800292e:	f7ff fc90 	bl	8002252 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fc3b 	bl	80021b4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d00a      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6919      	ldr	r1, [r3, #16]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002970:	f7ff fbd2 	bl	8002118 <LL_ADC_SetOffset>
 8002974:	e11d      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fbed 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x17e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fbe2 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002998:	4603      	mov	r3, r0
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	e012      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x1a4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fbd7 	bl	800215c <LL_ADC_GetOffsetChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1bc>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0e9b      	lsrs	r3, r3, #26
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	e00a      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1d2>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80029ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d106      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fbbe 	bl	8002184 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fba4 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x210>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fb99 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	f003 021f 	and.w	r2, r3, #31
 8002a32:	e010      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x232>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fb8e 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002a40:	4603      	mov	r3, r0
 8002a42:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x24a>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	e00a      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x260>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d106      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fb77 	bl	8002184 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fb5d 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x29e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fb52 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	e010      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x2c0>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fb47 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x2d8>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	e00a      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x2ee>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d106      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fb30 	bl	8002184 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2103      	movs	r1, #3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fb16 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x32c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2103      	movs	r1, #3
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fb0b 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	0e9b      	lsrs	r3, r3, #26
 8002b4a:	f003 021f 	and.w	r2, r3, #31
 8002b4e:	e010      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x34e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2103      	movs	r1, #3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fb00 	bl	800215c <LL_ADC_GetOffsetChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x366>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	e00a      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x37c>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d106      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2103      	movs	r1, #3
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fae9 	bl	8002184 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fbfa 	bl	80023b0 <LL_ADC_IsEnabled>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 810c 	bne.w	8002ddc <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f7ff fb67 	bl	80022a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4aa8      	ldr	r2, [pc, #672]	; (8002e7c <HAL_ADC_ConfigChannel+0x658>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	f040 80fd 	bne.w	8002ddc <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x3e6>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0e9b      	lsrs	r3, r3, #26
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2b09      	cmp	r3, #9
 8002c00:	bf94      	ite	ls
 8002c02:	2301      	movls	r3, #1
 8002c04:	2300      	movhi	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e012      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x40c>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2b09      	cmp	r3, #9
 8002c28:	bf94      	ite	ls
 8002c2a:	2301      	movls	r3, #1
 8002c2c:	2300      	movhi	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d064      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x42c>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	3301      	adds	r3, #1
 8002c48:	069b      	lsls	r3, r3, #26
 8002c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4e:	e00e      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x44a>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	069b      	lsls	r3, r3, #26
 8002c6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x46a>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0e9b      	lsrs	r3, r3, #26
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	e010      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x48c>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2101      	movs	r1, #1
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	ea42 0103 	orr.w	r1, r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x4b2>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	051b      	lsls	r3, r3, #20
 8002cd4:	e011      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x4d6>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 021f 	and.w	r2, r3, #31
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	e069      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d107      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x4f6>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	3301      	adds	r3, #1
 8002d12:	069b      	lsls	r3, r3, #26
 8002d14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d18:	e00e      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x514>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	61fb      	str	r3, [r7, #28]
  return result;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	069b      	lsls	r3, r3, #26
 8002d34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x534>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0e9b      	lsrs	r3, r3, #26
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	e010      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x556>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	617b      	str	r3, [r7, #20]
  return result;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	ea42 0103 	orr.w	r1, r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x582>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	3301      	adds	r3, #1
 8002d92:	f003 021f 	and.w	r2, r3, #31
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3b1e      	subs	r3, #30
 8002d9e:	051b      	lsls	r3, r3, #20
 8002da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002da4:	e014      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x5ac>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	60fb      	str	r3, [r7, #12]
  return result;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 021f 	and.w	r2, r3, #31
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b1e      	subs	r3, #30
 8002dca:	051b      	lsls	r3, r3, #20
 8002dcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	6892      	ldr	r2, [r2, #8]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7ff fa3b 	bl	8002252 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_ADC_ConfigChannel+0x65c>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d07b      	beq.n	8002ee0 <HAL_ADC_ConfigChannel+0x6bc>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de8:	4826      	ldr	r0, [pc, #152]	; (8002e84 <HAL_ADC_ConfigChannel+0x660>)
 8002dea:	f7ff f987 	bl	80020fc <LL_ADC_GetCommonPathInternalCh>
 8002dee:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a24      	ldr	r2, [pc, #144]	; (8002e88 <HAL_ADC_ConfigChannel+0x664>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d126      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x626>
 8002dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d120      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x626>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_ADC_ConfigChannel+0x668>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d166      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4819      	ldr	r0, [pc, #100]	; (8002e84 <HAL_ADC_ConfigChannel+0x660>)
 8002e1e:	f7ff f95a 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_ADC_ConfigChannel+0x66c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_ADC_ConfigChannel+0x670>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	099a      	lsrs	r2, r3, #6
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e3a:	e002      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x61e>
          {
            wait_loop_index--;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f9      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x618>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e48:	e04a      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x6bc>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_ADC_ConfigChannel+0x674>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d123      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x678>
 8002e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11d      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_ADC_ConfigChannel+0x668>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d13a      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e72:	4619      	mov	r1, r3
 8002e74:	4803      	ldr	r0, [pc, #12]	; (8002e84 <HAL_ADC_ConfigChannel+0x660>)
 8002e76:	f7ff f92e 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7a:	e031      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x6bc>
 8002e7c:	407f0000 	.word	0x407f0000
 8002e80:	80080000 	.word	0x80080000
 8002e84:	50040300 	.word	0x50040300
 8002e88:	c7520000 	.word	0xc7520000
 8002e8c:	50040000 	.word	0x50040000
 8002e90:	20000000 	.word	0x20000000
 8002e94:	053e2d63 	.word	0x053e2d63
 8002e98:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_ADC_ConfigChannel+0x6d0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6bc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6bc>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <HAL_ADC_ConfigChannel+0x6d4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d111      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	480d      	ldr	r0, [pc, #52]	; (8002efc <HAL_ADC_ConfigChannel+0x6d8>)
 8002ec8:	f7ff f905 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
 8002ecc:	e008      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x6bc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f043 0220 	orr.w	r2, r3, #32
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ee8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3798      	adds	r7, #152	; 0x98
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	80000001 	.word	0x80000001
 8002ef8:	50040000 	.word	0x50040000
 8002efc:	50040300 	.word	0x50040300

08002f00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fa4f 	bl	80023b0 <LL_ADC_IsEnabled>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d146      	bne.n	8002fa6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <ADC_Enable+0xb0>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	f043 0210 	orr.w	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e032      	b.n	8002fa8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fa1e 	bl	8002388 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f4c:	f7ff f8a4 	bl	8002098 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f52:	e021      	b.n	8002f98 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fa29 	bl	80023b0 <LL_ADC_IsEnabled>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fa0d 	bl	8002388 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f6e:	f7ff f893 	bl	8002098 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d90d      	bls.n	8002f98 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f043 0210 	orr.w	r2, r3, #16
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	f043 0201 	orr.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e007      	b.n	8002fa8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d1d6      	bne.n	8002f54 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	8000003f 	.word	0x8000003f

08002fb4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d14b      	bne.n	8003066 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d021      	beq.n	800302c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f8f4 	bl	80021da <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d032      	beq.n	800305e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d12b      	bne.n	800305e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11f      	bne.n	800305e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	659a      	str	r2, [r3, #88]	; 0x58
 800302a:	e018      	b.n	800305e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d111      	bne.n	800305e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff fbc2 	bl	80027e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003064:	e00e      	b.n	8003084 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff fbcc 	bl	8002810 <HAL_ADC_ErrorCallback>
}
 8003078:	e004      	b.n	8003084 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fbae 	bl	80027fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	f043 0204 	orr.w	r2, r3, #4
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff fb9e 	bl	8002810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0ed      	b.n	80032ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe f89e 	bl	800123c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0202 	bic.w	r2, r2, #2
 800310e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003110:	f7fe ffc2 	bl	8002098 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003116:	e012      	b.n	800313e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003118:	f7fe ffbe 	bl	8002098 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b0a      	cmp	r3, #10
 8003124:	d90b      	bls.n	800313e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2205      	movs	r2, #5
 8003136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0c5      	b.n	80032ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e5      	bne.n	8003118 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800315c:	f7fe ff9c 	bl	8002098 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003162:	e012      	b.n	800318a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003164:	f7fe ff98 	bl	8002098 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b0a      	cmp	r3, #10
 8003170:	d90b      	bls.n	800318a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2205      	movs	r2, #5
 8003182:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e09f      	b.n	80032ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0e5      	beq.n	8003164 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7e1b      	ldrb	r3, [r3, #24]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d108      	bne.n	80031b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e007      	b.n	80031c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7e5b      	ldrb	r3, [r3, #25]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d108      	bne.n	80031dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e007      	b.n	80031ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7e9b      	ldrb	r3, [r3, #26]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d108      	bne.n	8003206 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e007      	b.n	8003216 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0220 	bic.w	r2, r2, #32
 8003214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7edb      	ldrb	r3, [r3, #27]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d108      	bne.n	8003230 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0210 	bic.w	r2, r2, #16
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e007      	b.n	8003240 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0210 	orr.w	r2, r2, #16
 800323e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7f1b      	ldrb	r3, [r3, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d108      	bne.n	800325a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0208 	orr.w	r2, r2, #8
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e007      	b.n	800326a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0208 	bic.w	r2, r2, #8
 8003268:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7f5b      	ldrb	r3, [r3, #29]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0204 	orr.w	r2, r2, #4
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e007      	b.n	8003294 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	ea42 0103 	orr.w	r1, r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	1e5a      	subs	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b087      	sub	sp, #28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d003      	beq.n	80032f8 <HAL_CAN_ConfigFilter+0x26>
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	f040 80aa 	bne.w	800344c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032fe:	f043 0201 	orr.w	r2, r3, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2201      	movs	r2, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	43db      	mvns	r3, r3
 8003322:	401a      	ands	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d123      	bne.n	800337a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	43db      	mvns	r3, r3
 800333c:	401a      	ands	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003354:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3248      	adds	r2, #72	; 0x48
 800335a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800336e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003370:	6979      	ldr	r1, [r7, #20]
 8003372:	3348      	adds	r3, #72	; 0x48
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d122      	bne.n	80033c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	431a      	orrs	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3248      	adds	r2, #72	; 0x48
 80033a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033be:	6979      	ldr	r1, [r7, #20]
 80033c0:	3348      	adds	r3, #72	; 0x48
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	440b      	add	r3, r1
 80033c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033e2:	e007      	b.n	80033f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800340e:	e007      	b.n	8003420 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	431a      	orrs	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	431a      	orrs	r2, r3
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e006      	b.n	800345a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d12e      	bne.n	80034d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003492:	f7fe fe01 	bl	8002098 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003498:	e012      	b.n	80034c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800349a:	f7fe fdfd 	bl	8002098 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b0a      	cmp	r3, #10
 80034a6:	d90b      	bls.n	80034c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2205      	movs	r2, #5
 80034b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e012      	b.n	80034e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1e5      	bne.n	800349a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e006      	b.n	80034e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b089      	sub	sp, #36	; 0x24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003502:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800350c:	7ffb      	ldrb	r3, [r7, #31]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d003      	beq.n	800351a <HAL_CAN_AddTxMessage+0x2c>
 8003512:	7ffb      	ldrb	r3, [r7, #31]
 8003514:	2b02      	cmp	r3, #2
 8003516:	f040 80b8 	bne.w	800368a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a0 	beq.w	800367a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	0e1b      	lsrs	r3, r3, #24
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d907      	bls.n	800355a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e09e      	b.n	8003698 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800355a:	2201      	movs	r2, #1
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	409a      	lsls	r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	6809      	ldr	r1, [r1, #0]
 800357a:	431a      	orrs	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3318      	adds	r3, #24
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	440b      	add	r3, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e00f      	b.n	80035a8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003592:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800359c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3318      	adds	r3, #24
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	440b      	add	r3, r1
 80035a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6819      	ldr	r1, [r3, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3318      	adds	r3, #24
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	440b      	add	r3, r1
 80035b8:	3304      	adds	r3, #4
 80035ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	7d1b      	ldrb	r3, [r3, #20]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d111      	bne.n	80035e8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3318      	adds	r3, #24
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	4413      	add	r3, r2
 80035d0:	3304      	adds	r3, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	6811      	ldr	r1, [r2, #0]
 80035d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3318      	adds	r3, #24
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	440b      	add	r3, r1
 80035e4:	3304      	adds	r3, #4
 80035e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3307      	adds	r3, #7
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	061a      	lsls	r2, r3, #24
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3306      	adds	r3, #6
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3305      	adds	r3, #5
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	4313      	orrs	r3, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	3204      	adds	r2, #4
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	4610      	mov	r0, r2
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	6811      	ldr	r1, [r2, #0]
 8003610:	ea43 0200 	orr.w	r2, r3, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	440b      	add	r3, r1
 800361a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800361e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3303      	adds	r3, #3
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	061a      	lsls	r2, r3, #24
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3302      	adds	r3, #2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	041b      	lsls	r3, r3, #16
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3301      	adds	r3, #1
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	4313      	orrs	r3, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	7812      	ldrb	r2, [r2, #0]
 8003640:	4610      	mov	r0, r2
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	6811      	ldr	r1, [r2, #0]
 8003646:	ea43 0200 	orr.w	r2, r3, r0
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	440b      	add	r3, r1
 8003650:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003654:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3318      	adds	r3, #24
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	4413      	add	r3, r2
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	6811      	ldr	r1, [r2, #0]
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3318      	adds	r3, #24
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	440b      	add	r3, r1
 8003674:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e00e      	b.n	8003698 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e006      	b.n	8003698 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3724      	adds	r7, #36	; 0x24
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d002      	beq.n	80036c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80036be:	7afb      	ldrb	r3, [r7, #11]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d11d      	bne.n	8003700 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003700:	68fb      	ldr	r3, [r7, #12]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800370e:	b480      	push	{r7}
 8003710:	b087      	sub	sp, #28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003722:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d003      	beq.n	8003732 <HAL_CAN_GetRxMessage+0x24>
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b02      	cmp	r3, #2
 800372e:	f040 80f4 	bne.w	800391a <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10e      	bne.n	8003756 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0e8      	b.n	8003928 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0d9      	b.n	8003928 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	331b      	adds	r3, #27
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	4413      	add	r3, r2
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0204 	and.w	r2, r3, #4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10c      	bne.n	80037ac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	331b      	adds	r3, #27
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0d5b      	lsrs	r3, r3, #21
 80037a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e00b      	b.n	80037c4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	331b      	adds	r3, #27
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	4413      	add	r3, r2
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	08db      	lsrs	r3, r3, #3
 80037bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	331b      	adds	r3, #27
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4413      	add	r3, r2
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	f003 0201 	and.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	331b      	adds	r3, #27
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	4413      	add	r3, r2
 80037e8:	3304      	adds	r3, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	331b      	adds	r3, #27
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	4413      	add	r3, r2
 8003800:	3304      	adds	r3, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	b2da      	uxtb	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	331b      	adds	r3, #27
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b29a      	uxth	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	4413      	add	r3, r2
 800382e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	4413      	add	r3, r2
 8003844:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	0a1a      	lsrs	r2, r3, #8
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	4413      	add	r3, r2
 800385e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0c1a      	lsrs	r2, r3, #16
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	3302      	adds	r3, #2
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4413      	add	r3, r2
 8003878:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0e1a      	lsrs	r2, r3, #24
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	3303      	adds	r3, #3
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	3304      	adds	r3, #4
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0a1a      	lsrs	r2, r3, #8
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	3305      	adds	r3, #5
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	0c1a      	lsrs	r2, r3, #16
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	3306      	adds	r3, #6
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	4413      	add	r3, r2
 80038de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	0e1a      	lsrs	r2, r3, #24
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	3307      	adds	r3, #7
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d108      	bne.n	8003906 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0220 	orr.w	r2, r2, #32
 8003902:	60da      	str	r2, [r3, #12]
 8003904:	e007      	b.n	8003916 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0220 	orr.w	r2, r2, #32
 8003914:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e006      	b.n	8003928 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
  }
}
 8003928:	4618      	mov	r0, r3
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <__NVIC_SetPriorityGrouping+0x44>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003950:	4013      	ands	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800395c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003966:	4a04      	ldr	r2, [pc, #16]	; (8003978 <__NVIC_SetPriorityGrouping+0x44>)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	60d3      	str	r3, [r2, #12]
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <__NVIC_GetPriorityGrouping+0x18>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 0307 	and.w	r3, r3, #7
}
 800398a:	4618      	mov	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	db0b      	blt.n	80039c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	f003 021f 	and.w	r2, r3, #31
 80039b0:	4907      	ldr	r1, [pc, #28]	; (80039d0 <__NVIC_EnableIRQ+0x38>)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2001      	movs	r0, #1
 80039ba:	fa00 f202 	lsl.w	r2, r0, r2
 80039be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	e000e100 	.word	0xe000e100

080039d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db0a      	blt.n	80039fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	490c      	ldr	r1, [pc, #48]	; (8003a20 <__NVIC_SetPriority+0x4c>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	0112      	lsls	r2, r2, #4
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	440b      	add	r3, r1
 80039f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039fc:	e00a      	b.n	8003a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4908      	ldr	r1, [pc, #32]	; (8003a24 <__NVIC_SetPriority+0x50>)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3b04      	subs	r3, #4
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	440b      	add	r3, r1
 8003a12:	761a      	strb	r2, [r3, #24]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000e100 	.word	0xe000e100
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f1c3 0307 	rsb	r3, r3, #7
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	bf28      	it	cs
 8003a46:	2304      	movcs	r3, #4
 8003a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d902      	bls.n	8003a58 <NVIC_EncodePriority+0x30>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3b03      	subs	r3, #3
 8003a56:	e000      	b.n	8003a5a <NVIC_EncodePriority+0x32>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43da      	mvns	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43d9      	mvns	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	4313      	orrs	r3, r2
         );
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa0:	d301      	bcc.n	8003aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00f      	b.n	8003ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <SysTick_Config+0x40>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aae:	210f      	movs	r1, #15
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab4:	f7ff ff8e 	bl	80039d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <SysTick_Config+0x40>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <SysTick_Config+0x40>)
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	e000e010 	.word	0xe000e010

08003ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff29 	bl	8003934 <__NVIC_SetPriorityGrouping>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003afc:	f7ff ff3e 	bl	800397c <__NVIC_GetPriorityGrouping>
 8003b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff8e 	bl	8003a28 <NVIC_EncodePriority>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff5d 	bl	80039d4 <__NVIC_SetPriority>
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff31 	bl	8003998 <__NVIC_EnableIRQ>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ffa2 	bl	8003a90 <SysTick_Config>
 8003b4c:	4603      	mov	r3, r0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e098      	b.n	8003c9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b4d      	ldr	r3, [pc, #308]	; (8003ca8 <HAL_DMA_Init+0x150>)
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d80f      	bhi.n	8003b96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b4b      	ldr	r3, [pc, #300]	; (8003cac <HAL_DMA_Init+0x154>)
 8003b7e:	4413      	add	r3, r2
 8003b80:	4a4b      	ldr	r2, [pc, #300]	; (8003cb0 <HAL_DMA_Init+0x158>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	009a      	lsls	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a48      	ldr	r2, [pc, #288]	; (8003cb4 <HAL_DMA_Init+0x15c>)
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
 8003b94:	e00e      	b.n	8003bb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_DMA_Init+0x160>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4a43      	ldr	r2, [pc, #268]	; (8003cb0 <HAL_DMA_Init+0x158>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	009a      	lsls	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a42      	ldr	r2, [pc, #264]	; (8003cbc <HAL_DMA_Init+0x164>)
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0e:	d039      	beq.n	8003c84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <HAL_DMA_Init+0x15c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d11a      	bne.n	8003c50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c1a:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_DMA_Init+0x168>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f003 031c 	and.w	r3, r3, #28
 8003c26:	210f      	movs	r1, #15
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	4924      	ldr	r1, [pc, #144]	; (8003cc0 <HAL_DMA_Init+0x168>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c34:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <HAL_DMA_Init+0x168>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f003 031c 	and.w	r3, r3, #28
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	491d      	ldr	r1, [pc, #116]	; (8003cc0 <HAL_DMA_Init+0x168>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]
 8003c4e:	e019      	b.n	8003c84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c50:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <HAL_DMA_Init+0x16c>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f003 031c 	and.w	r3, r3, #28
 8003c5c:	210f      	movs	r1, #15
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	4917      	ldr	r1, [pc, #92]	; (8003cc4 <HAL_DMA_Init+0x16c>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c6a:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_DMA_Init+0x16c>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f003 031c 	and.w	r3, r3, #28
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	4911      	ldr	r1, [pc, #68]	; (8003cc4 <HAL_DMA_Init+0x16c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	40020407 	.word	0x40020407
 8003cac:	bffdfff8 	.word	0xbffdfff8
 8003cb0:	cccccccd 	.word	0xcccccccd
 8003cb4:	40020000 	.word	0x40020000
 8003cb8:	bffdfbf8 	.word	0xbffdfbf8
 8003cbc:	40020400 	.word	0x40020400
 8003cc0:	400200a8 	.word	0x400200a8
 8003cc4:	400204a8 	.word	0x400204a8

08003cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_DMA_Start_IT+0x20>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e04b      	b.n	8003d80 <HAL_DMA_Start_IT+0xb8>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d13a      	bne.n	8003d72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8e0 	bl	8003ee6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 020e 	orr.w	r2, r2, #14
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e00f      	b.n	8003d60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 020a 	orr.w	r2, r2, #10
 8003d5e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e005      	b.n	8003d7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f003 031c 	and.w	r3, r3, #28
 8003da8:	2204      	movs	r2, #4
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d026      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x7a>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d021      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0204 	bic.w	r2, r2, #4
 8003dda:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	f003 021c 	and.w	r2, r3, #28
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2104      	movs	r1, #4
 8003dea:	fa01 f202 	lsl.w	r2, r1, r2
 8003dee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d071      	beq.n	8003edc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003e00:	e06c      	b.n	8003edc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f003 031c 	and.w	r3, r3, #28
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d02e      	beq.n	8003e74 <HAL_DMA_IRQHandler+0xec>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d029      	beq.n	8003e74 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 020a 	bic.w	r2, r2, #10
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f003 021c 	and.w	r2, r3, #28
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2102      	movs	r1, #2
 8003e54:	fa01 f202 	lsl.w	r2, r1, r2
 8003e58:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d038      	beq.n	8003edc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e72:	e033      	b.n	8003edc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f003 031c 	and.w	r3, r3, #28
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d02a      	beq.n	8003ede <HAL_DMA_IRQHandler+0x156>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d025      	beq.n	8003ede <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 020e 	bic.w	r2, r2, #14
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f003 021c 	and.w	r2, r3, #28
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
}
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	f003 021c 	and.w	r2, r3, #28
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f202 	lsl.w	r2, r1, r2
 8003f06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d108      	bne.n	8003f2a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f28:	e007      	b.n	8003f3a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	60da      	str	r2, [r3, #12]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <HAL_FLASH_Program+0xd0>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_FLASH_Program+0x1e>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e053      	b.n	800400e <HAL_FLASH_Program+0xc6>
 8003f66:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <HAL_FLASH_Program+0xd0>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f70:	f000 f894 	bl	800409c <FLASH_WaitForLastOperation>
 8003f74:	4603      	mov	r3, r0
 8003f76:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d143      	bne.n	8004006 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <HAL_FLASH_Program+0xd0>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <HAL_FLASH_Program+0xd4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003f90:	4b22      	ldr	r3, [pc, #136]	; (800401c <HAL_FLASH_Program+0xd4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a21      	ldr	r2, [pc, #132]	; (800401c <HAL_FLASH_Program+0xd4>)
 8003f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f9a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <HAL_FLASH_Program+0xd0>)
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	771a      	strb	r2, [r3, #28]
 8003fa2:	e002      	b.n	8003faa <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <HAL_FLASH_Program+0xd0>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d107      	bne.n	8003fc0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb4:	68b8      	ldr	r0, [r7, #8]
 8003fb6:	f000 f8c9 	bl	800414c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	e010      	b.n	8003fe2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d002      	beq.n	8003fcc <HAL_FLASH_Program+0x84>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d10a      	bne.n	8003fe2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68b8      	ldr	r0, [r7, #8]
 8003fd2:	f000 f8df 	bl	8004194 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d102      	bne.n	8003fe2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003fdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fe0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fe2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fe6:	f000 f859 	bl	800409c <FLASH_WaitForLastOperation>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_FLASH_Program+0xd4>)
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	4907      	ldr	r1, [pc, #28]	; (800401c <HAL_FLASH_Program+0xd4>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004002:	f000 f9dd 	bl	80043c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_FLASH_Program+0xd0>)
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]

  return status;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	2000000c 	.word	0x2000000c
 800401c:	40022000 	.word	0x40022000

08004020 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_FLASH_Unlock+0x38>)
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	da0b      	bge.n	800404a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_FLASH_Unlock+0x38>)
 8004034:	4a09      	ldr	r2, [pc, #36]	; (800405c <HAL_FLASH_Unlock+0x3c>)
 8004036:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_FLASH_Unlock+0x38>)
 800403a:	4a09      	ldr	r2, [pc, #36]	; (8004060 <HAL_FLASH_Unlock+0x40>)
 800403c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_FLASH_Unlock+0x38>)
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	da01      	bge.n	800404a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800404a:	79fb      	ldrb	r3, [r7, #7]
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40022000 	.word	0x40022000
 800405c:	45670123 	.word	0x45670123
 8004060:	cdef89ab 	.word	0xcdef89ab

08004064 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_FLASH_Lock+0x1c>)
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	4a04      	ldr	r2, [pc, #16]	; (8004080 <HAL_FLASH_Lock+0x1c>)
 800406e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004072:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40022000 	.word	0x40022000

08004084 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <HAL_FLASH_GetError+0x14>)
 800408a:	685b      	ldr	r3, [r3, #4]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2000000c 	.word	0x2000000c

0800409c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80040a4:	f7fd fff8 	bl	8002098 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80040aa:	e00d      	b.n	80040c8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d009      	beq.n	80040c8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80040b4:	f7fd fff0 	bl	8002098 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d801      	bhi.n	80040c8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e037      	b.n	8004138 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <FLASH_WaitForLastOperation+0xa4>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d4:	d0ea      	beq.n	80040ac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <FLASH_WaitForLastOperation+0xa4>)
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <FLASH_WaitForLastOperation+0xa8>)
 80040dc:	4013      	ands	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01e      	beq.n	8004124 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80040e6:	4b18      	ldr	r3, [pc, #96]	; (8004148 <FLASH_WaitForLastOperation+0xac>)
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	4a16      	ldr	r2, [pc, #88]	; (8004148 <FLASH_WaitForLastOperation+0xac>)
 80040f0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <FLASH_WaitForLastOperation+0x70>
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <FLASH_WaitForLastOperation+0xa4>)
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004106:	490e      	ldr	r1, [pc, #56]	; (8004140 <FLASH_WaitForLastOperation+0xa4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	618b      	str	r3, [r1, #24]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <FLASH_WaitForLastOperation+0x84>
 8004116:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <FLASH_WaitForLastOperation+0xa4>)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800411e:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e009      	b.n	8004138 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <FLASH_WaitForLastOperation+0xa4>)
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d102      	bne.n	8004136 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <FLASH_WaitForLastOperation+0xa4>)
 8004132:	2201      	movs	r2, #1
 8004134:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40022000 	.word	0x40022000
 8004144:	0002c3fa 	.word	0x0002c3fa
 8004148:	2000000c 	.word	0x2000000c

0800414c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800414c:	b490      	push	{r4, r7}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <FLASH_Program_DoubleWord+0x44>)
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	4a0c      	ldr	r2, [pc, #48]	; (8004190 <FLASH_Program_DoubleWord+0x44>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800416a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800416e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	f04f 0400 	mov.w	r4, #0
 800417a:	0013      	movs	r3, r2
 800417c:	2400      	movs	r4, #0
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	3204      	adds	r2, #4
 8004182:	6013      	str	r3, [r2, #0]
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bc90      	pop	{r4, r7}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40022000 	.word	0x40022000

08004194 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800419e:	2340      	movs	r3, #64	; 0x40
 80041a0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80041aa:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <FLASH_Program_Fast+0x64>)
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <FLASH_Program_Fast+0x64>)
 80041b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80041bc:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80041be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80041c0:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	3304      	adds	r3, #4
 80041ce:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	3304      	adds	r3, #4
 80041d4:	617b      	str	r3, [r7, #20]
    row_index--;
 80041d6:	7ffb      	ldrb	r3, [r7, #31]
 80041d8:	3b01      	subs	r3, #1
 80041da:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80041dc:	7ffb      	ldrb	r3, [r7, #31]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1ef      	bne.n	80041c2 <FLASH_Program_Fast+0x2e>
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80041ec:	bf00      	nop
 80041ee:	3724      	adds	r7, #36	; 0x24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40022000 	.word	0x40022000

080041fc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004206:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <HAL_FLASHEx_Erase+0x138>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_FLASHEx_Erase+0x16>
 800420e:	2302      	movs	r3, #2
 8004210:	e08b      	b.n	800432a <HAL_FLASHEx_Erase+0x12e>
 8004212:	4b48      	ldr	r3, [pc, #288]	; (8004334 <HAL_FLASHEx_Erase+0x138>)
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004218:	f24c 3050 	movw	r0, #50000	; 0xc350
 800421c:	f7ff ff3e 	bl	800409c <FLASH_WaitForLastOperation>
 8004220:	4603      	mov	r3, r0
 8004222:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d17b      	bne.n	8004322 <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800422a:	4b42      	ldr	r3, [pc, #264]	; (8004334 <HAL_FLASHEx_Erase+0x138>)
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004230:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004238:	2b00      	cmp	r3, #0
 800423a:	d019      	beq.n	8004270 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800423c:	4b3e      	ldr	r3, [pc, #248]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a3d      	ldr	r2, [pc, #244]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 8004242:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004246:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004248:	4b3b      	ldr	r3, [pc, #236]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a37      	ldr	r2, [pc, #220]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 800425a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004260:	4b34      	ldr	r3, [pc, #208]	; (8004334 <HAL_FLASHEx_Erase+0x138>)
 8004262:	2203      	movs	r2, #3
 8004264:	771a      	strb	r2, [r3, #28]
 8004266:	e016      	b.n	8004296 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004268:	4b32      	ldr	r3, [pc, #200]	; (8004334 <HAL_FLASHEx_Erase+0x138>)
 800426a:	2201      	movs	r2, #1
 800426c:	771a      	strb	r2, [r3, #28]
 800426e:	e012      	b.n	8004296 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004270:	4b31      	ldr	r3, [pc, #196]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800427c:	4b2e      	ldr	r3, [pc, #184]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 8004282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004286:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004288:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <HAL_FLASHEx_Erase+0x138>)
 800428a:	2202      	movs	r2, #2
 800428c:	771a      	strb	r2, [r3, #28]
 800428e:	e002      	b.n	8004296 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004290:	4b28      	ldr	r3, [pc, #160]	; (8004334 <HAL_FLASHEx_Erase+0x138>)
 8004292:	2200      	movs	r2, #0
 8004294:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d111      	bne.n	80042c2 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f84a 	bl	800433c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042ac:	f7ff fef6 	bl	800409c <FLASH_WaitForLastOperation>
 80042b0:	4603      	mov	r3, r0
 80042b2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80042b4:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 80042ba:	f023 0304 	bic.w	r3, r3, #4
 80042be:	6153      	str	r3, [r2, #20]
 80042c0:	e02d      	b.n	800431e <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295
 80042c8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	e01d      	b.n	800430e <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4619      	mov	r1, r3
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f000 f84d 	bl	8004378 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042e2:	f7ff fedb 	bl	800409c <FLASH_WaitForLastOperation>
 80042e6:	4603      	mov	r3, r0
 80042e8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	4a12      	ldr	r2, [pc, #72]	; (8004338 <HAL_FLASHEx_Erase+0x13c>)
 80042f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042f4:	f023 0302 	bic.w	r3, r3, #2
 80042f8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	601a      	str	r2, [r3, #0]
          break;
 8004306:	e00a      	b.n	800431e <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	3301      	adds	r3, #1
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4413      	add	r3, r2
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	429a      	cmp	r2, r3
 800431c:	d3d9      	bcc.n	80042d2 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800431e:	f000 f84f 	bl	80043c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004322:	4b04      	ldr	r3, [pc, #16]	; (8004334 <HAL_FLASHEx_Erase+0x138>)
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]

  return status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c
 8004338:	40022000 	.word	0x40022000

0800433c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <FLASH_MassErase+0x38>)
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	4a08      	ldr	r2, [pc, #32]	; (8004374 <FLASH_MassErase+0x38>)
 8004354:	f043 0304 	orr.w	r3, r3, #4
 8004358:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <FLASH_MassErase+0x38>)
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4a05      	ldr	r2, [pc, #20]	; (8004374 <FLASH_MassErase+0x38>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	6153      	str	r3, [r2, #20]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40022000 	.word	0x40022000

08004378 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004382:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <FLASH_PageErase+0x44>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004392:	490a      	ldr	r1, [pc, #40]	; (80043bc <FLASH_PageErase+0x44>)
 8004394:	4313      	orrs	r3, r2
 8004396:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <FLASH_PageErase+0x44>)
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	4a07      	ldr	r2, [pc, #28]	; (80043bc <FLASH_PageErase+0x44>)
 800439e:	f043 0302 	orr.w	r3, r3, #2
 80043a2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <FLASH_PageErase+0x44>)
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <FLASH_PageErase+0x44>)
 80043aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ae:	6153      	str	r3, [r2, #20]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40022000 	.word	0x40022000

080043c0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <FLASH_FlushCaches+0x80>)
 80043c8:	7f1b      	ldrb	r3, [r3, #28]
 80043ca:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d002      	beq.n	80043d8 <FLASH_FlushCaches+0x18>
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d111      	bne.n	80043fc <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80043d8:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <FLASH_FlushCaches+0x84>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <FLASH_FlushCaches+0x84>)
 80043de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b17      	ldr	r3, [pc, #92]	; (8004444 <FLASH_FlushCaches+0x84>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a16      	ldr	r2, [pc, #88]	; (8004444 <FLASH_FlushCaches+0x84>)
 80043ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043f0:	4b14      	ldr	r3, [pc, #80]	; (8004444 <FLASH_FlushCaches+0x84>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a13      	ldr	r2, [pc, #76]	; (8004444 <FLASH_FlushCaches+0x84>)
 80043f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043fa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d002      	beq.n	8004408 <FLASH_FlushCaches+0x48>
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d111      	bne.n	800442c <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004408:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <FLASH_FlushCaches+0x84>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <FLASH_FlushCaches+0x84>)
 800440e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <FLASH_FlushCaches+0x84>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <FLASH_FlushCaches+0x84>)
 800441a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800441e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004420:	4b08      	ldr	r3, [pc, #32]	; (8004444 <FLASH_FlushCaches+0x84>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a07      	ldr	r2, [pc, #28]	; (8004444 <FLASH_FlushCaches+0x84>)
 8004426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800442a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <FLASH_FlushCaches+0x80>)
 800442e:	2200      	movs	r2, #0
 8004430:	771a      	strb	r2, [r3, #28]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	2000000c 	.word	0x2000000c
 8004444:	40022000 	.word	0x40022000

08004448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004456:	e154      	b.n	8004702 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2101      	movs	r1, #1
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	4013      	ands	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8146 	beq.w	80046fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d00b      	beq.n	8004490 <HAL_GPIO_Init+0x48>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d007      	beq.n	8004490 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004484:	2b11      	cmp	r3, #17
 8004486:	d003      	beq.n	8004490 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b12      	cmp	r3, #18
 800448e:	d130      	bne.n	80044f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	2203      	movs	r2, #3
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4013      	ands	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044c6:	2201      	movs	r2, #1
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 0201 	and.w	r2, r3, #1
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	2203      	movs	r2, #3
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4013      	ands	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0xea>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b12      	cmp	r3, #18
 8004530:	d123      	bne.n	800457a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	08da      	lsrs	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3208      	adds	r2, #8
 800453a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	220f      	movs	r2, #15
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43db      	mvns	r3, r3
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4013      	ands	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	08da      	lsrs	r2, r3, #3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3208      	adds	r2, #8
 8004574:	6939      	ldr	r1, [r7, #16]
 8004576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	2203      	movs	r2, #3
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0203 	and.w	r2, r3, #3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80a0 	beq.w	80046fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045bc:	4b58      	ldr	r3, [pc, #352]	; (8004720 <HAL_GPIO_Init+0x2d8>)
 80045be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c0:	4a57      	ldr	r2, [pc, #348]	; (8004720 <HAL_GPIO_Init+0x2d8>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6613      	str	r3, [r2, #96]	; 0x60
 80045c8:	4b55      	ldr	r3, [pc, #340]	; (8004720 <HAL_GPIO_Init+0x2d8>)
 80045ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045d4:	4a53      	ldr	r2, [pc, #332]	; (8004724 <HAL_GPIO_Init+0x2dc>)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	089b      	lsrs	r3, r3, #2
 80045da:	3302      	adds	r3, #2
 80045dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	220f      	movs	r2, #15
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045fe:	d019      	beq.n	8004634 <HAL_GPIO_Init+0x1ec>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a49      	ldr	r2, [pc, #292]	; (8004728 <HAL_GPIO_Init+0x2e0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d013      	beq.n	8004630 <HAL_GPIO_Init+0x1e8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a48      	ldr	r2, [pc, #288]	; (800472c <HAL_GPIO_Init+0x2e4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00d      	beq.n	800462c <HAL_GPIO_Init+0x1e4>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a47      	ldr	r2, [pc, #284]	; (8004730 <HAL_GPIO_Init+0x2e8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <HAL_GPIO_Init+0x1e0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a46      	ldr	r2, [pc, #280]	; (8004734 <HAL_GPIO_Init+0x2ec>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_GPIO_Init+0x1dc>
 8004620:	2304      	movs	r3, #4
 8004622:	e008      	b.n	8004636 <HAL_GPIO_Init+0x1ee>
 8004624:	2307      	movs	r3, #7
 8004626:	e006      	b.n	8004636 <HAL_GPIO_Init+0x1ee>
 8004628:	2303      	movs	r3, #3
 800462a:	e004      	b.n	8004636 <HAL_GPIO_Init+0x1ee>
 800462c:	2302      	movs	r3, #2
 800462e:	e002      	b.n	8004636 <HAL_GPIO_Init+0x1ee>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <HAL_GPIO_Init+0x1ee>
 8004634:	2300      	movs	r3, #0
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	f002 0203 	and.w	r2, r2, #3
 800463c:	0092      	lsls	r2, r2, #2
 800463e:	4093      	lsls	r3, r2
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004646:	4937      	ldr	r1, [pc, #220]	; (8004724 <HAL_GPIO_Init+0x2dc>)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004654:	4b38      	ldr	r3, [pc, #224]	; (8004738 <HAL_GPIO_Init+0x2f0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	43db      	mvns	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004678:	4a2f      	ldr	r2, [pc, #188]	; (8004738 <HAL_GPIO_Init+0x2f0>)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800467e:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <HAL_GPIO_Init+0x2f0>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	43db      	mvns	r3, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046a2:	4a25      	ldr	r2, [pc, #148]	; (8004738 <HAL_GPIO_Init+0x2f0>)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046a8:	4b23      	ldr	r3, [pc, #140]	; (8004738 <HAL_GPIO_Init+0x2f0>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4013      	ands	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046cc:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <HAL_GPIO_Init+0x2f0>)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046d2:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_GPIO_Init+0x2f0>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	43db      	mvns	r3, r3
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4013      	ands	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046f6:	4a10      	ldr	r2, [pc, #64]	; (8004738 <HAL_GPIO_Init+0x2f0>)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	3301      	adds	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f aea3 	bne.w	8004458 <HAL_GPIO_Init+0x10>
  }
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
 8004724:	40010000 	.word	0x40010000
 8004728:	48000400 	.word	0x48000400
 800472c:	48000800 	.word	0x48000800
 8004730:	48000c00 	.word	0x48000c00
 8004734:	48001000 	.word	0x48001000
 8004738:	40010400 	.word	0x40010400

0800473c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	807b      	strh	r3, [r7, #2]
 8004748:	4613      	mov	r3, r2
 800474a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800474c:	787b      	ldrb	r3, [r7, #1]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004752:	887a      	ldrh	r2, [r7, #2]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004758:	e002      	b.n	8004760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <HAL_PWREx_GetVoltageRange+0x18>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004778:	4618      	mov	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40007000 	.word	0x40007000

08004788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004796:	d130      	bne.n	80047fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004798:	4b23      	ldr	r3, [pc, #140]	; (8004828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a4:	d038      	beq.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047ae:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047b6:	4b1d      	ldr	r3, [pc, #116]	; (800482c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2232      	movs	r2, #50	; 0x32
 80047bc:	fb02 f303 	mul.w	r3, r2, r3
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	0c9b      	lsrs	r3, r3, #18
 80047c8:	3301      	adds	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047cc:	e002      	b.n	80047d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e0:	d102      	bne.n	80047e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f2      	bne.n	80047ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f4:	d110      	bne.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e00f      	b.n	800481a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004806:	d007      	beq.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004808:	4b07      	ldr	r3, [pc, #28]	; (8004828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004810:	4a05      	ldr	r2, [pc, #20]	; (8004828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004816:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40007000 	.word	0x40007000
 800482c:	20000000 	.word	0x20000000
 8004830:	431bde83 	.word	0x431bde83

08004834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f000 bc11 	b.w	800506a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004848:	4ba0      	ldr	r3, [pc, #640]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004852:	4b9e      	ldr	r3, [pc, #632]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80e4 	beq.w	8004a32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <HAL_RCC_OscConfig+0x4c>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b0c      	cmp	r3, #12
 8004874:	f040 808b 	bne.w	800498e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b01      	cmp	r3, #1
 800487c:	f040 8087 	bne.w	800498e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004880:	4b92      	ldr	r3, [pc, #584]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_OscConfig+0x64>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e3e8      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	4b8b      	ldr	r3, [pc, #556]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <HAL_RCC_OscConfig+0x7e>
 80048a8:	4b88      	ldr	r3, [pc, #544]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b0:	e005      	b.n	80048be <HAL_RCC_OscConfig+0x8a>
 80048b2:	4b86      	ldr	r3, [pc, #536]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80048b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048be:	4293      	cmp	r3, r2
 80048c0:	d223      	bcs.n	800490a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fd78 	bl	80053bc <RCC_SetFlashLatencyFromMSIRange>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e3c9      	b.n	800506a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048d6:	4b7d      	ldr	r3, [pc, #500]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7c      	ldr	r2, [pc, #496]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80048dc:	f043 0308 	orr.w	r3, r3, #8
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4b7a      	ldr	r3, [pc, #488]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	4977      	ldr	r1, [pc, #476]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048f4:	4b75      	ldr	r3, [pc, #468]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	4972      	ldr	r1, [pc, #456]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]
 8004908:	e025      	b.n	8004956 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800490a:	4b70      	ldr	r3, [pc, #448]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6f      	ldr	r2, [pc, #444]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004910:	f043 0308 	orr.w	r3, r3, #8
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b6d      	ldr	r3, [pc, #436]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	496a      	ldr	r1, [pc, #424]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004928:	4b68      	ldr	r3, [pc, #416]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	4965      	ldr	r1, [pc, #404]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fd38 	bl	80053bc <RCC_SetFlashLatencyFromMSIRange>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e389      	b.n	800506a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004956:	f000 fc6f 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 800495a:	4601      	mov	r1, r0
 800495c:	4b5b      	ldr	r3, [pc, #364]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	4a5a      	ldr	r2, [pc, #360]	; (8004ad0 <HAL_RCC_OscConfig+0x29c>)
 8004968:	5cd3      	ldrb	r3, [r2, r3]
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	fa21 f303 	lsr.w	r3, r1, r3
 8004972:	4a58      	ldr	r2, [pc, #352]	; (8004ad4 <HAL_RCC_OscConfig+0x2a0>)
 8004974:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004976:	4b58      	ldr	r3, [pc, #352]	; (8004ad8 <HAL_RCC_OscConfig+0x2a4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd fb40 	bl	8002000 <HAL_InitTick>
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d052      	beq.n	8004a30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	e36d      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d032      	beq.n	80049fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004996:	4b4d      	ldr	r3, [pc, #308]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a4c      	ldr	r2, [pc, #304]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049a2:	f7fd fb79 	bl	8002098 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049aa:	f7fd fb75 	bl	8002098 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e356      	b.n	800506a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049bc:	4b43      	ldr	r3, [pc, #268]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c8:	4b40      	ldr	r3, [pc, #256]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a3f      	ldr	r2, [pc, #252]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80049ce:	f043 0308 	orr.w	r3, r3, #8
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b3d      	ldr	r3, [pc, #244]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	493a      	ldr	r1, [pc, #232]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	4935      	ldr	r1, [pc, #212]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]
 80049fa:	e01a      	b.n	8004a32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049fc:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a32      	ldr	r2, [pc, #200]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a08:	f7fd fb46 	bl	8002098 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a10:	f7fd fb42 	bl	8002098 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e323      	b.n	800506a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a22:	4b2a      	ldr	r3, [pc, #168]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x1dc>
 8004a2e:	e000      	b.n	8004a32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d073      	beq.n	8004b26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_OscConfig+0x21c>
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d10e      	bne.n	8004a68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d10b      	bne.n	8004a68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d063      	beq.n	8004b24 <HAL_RCC_OscConfig+0x2f0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d15f      	bne.n	8004b24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e300      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d106      	bne.n	8004a80 <HAL_RCC_OscConfig+0x24c>
 8004a72:	4b16      	ldr	r3, [pc, #88]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a15      	ldr	r2, [pc, #84]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e01d      	b.n	8004abc <HAL_RCC_OscConfig+0x288>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x270>
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a0f      	ldr	r2, [pc, #60]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a0c      	ldr	r2, [pc, #48]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e00b      	b.n	8004abc <HAL_RCC_OscConfig+0x288>
 8004aa4:	4b09      	ldr	r3, [pc, #36]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a08      	ldr	r2, [pc, #32]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a05      	ldr	r2, [pc, #20]	; (8004acc <HAL_RCC_OscConfig+0x298>)
 8004ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fae8 	bl	8002098 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aca:	e010      	b.n	8004aee <HAL_RCC_OscConfig+0x2ba>
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	080066a8 	.word	0x080066a8
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fd fadc 	bl	8002098 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e2bd      	b.n	800506a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aee:	4baf      	ldr	r3, [pc, #700]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x2a8>
 8004afa:	e014      	b.n	8004b26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fd facc 	bl	8002098 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fd fac8 	bl	8002098 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e2a9      	b.n	800506a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b16:	4ba5      	ldr	r3, [pc, #660]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x2d0>
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d060      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d005      	beq.n	8004b44 <HAL_RCC_OscConfig+0x310>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d119      	bne.n	8004b72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d116      	bne.n	8004b72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b44:	4b99      	ldr	r3, [pc, #612]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_OscConfig+0x328>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e286      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5c:	4b93      	ldr	r3, [pc, #588]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	4990      	ldr	r1, [pc, #576]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b70:	e040      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d023      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b7a:	4b8c      	ldr	r3, [pc, #560]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a8b      	ldr	r2, [pc, #556]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fd fa87 	bl	8002098 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fd fa83 	bl	8002098 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e264      	b.n	800506a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba0:	4b82      	ldr	r3, [pc, #520]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bac:	4b7f      	ldr	r3, [pc, #508]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	497c      	ldr	r1, [pc, #496]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
 8004bc0:	e018      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc2:	4b7a      	ldr	r3, [pc, #488]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a79      	ldr	r2, [pc, #484]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bce:	f7fd fa63 	bl	8002098 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd6:	f7fd fa5f 	bl	8002098 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e240      	b.n	800506a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004be8:	4b70      	ldr	r3, [pc, #448]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f0      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d03c      	beq.n	8004c7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01c      	beq.n	8004c42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c08:	4b68      	ldr	r3, [pc, #416]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0e:	4a67      	ldr	r2, [pc, #412]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7fd fa3e 	bl	8002098 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fd fa3a 	bl	8002098 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e21b      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c32:	4b5e      	ldr	r3, [pc, #376]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ef      	beq.n	8004c20 <HAL_RCC_OscConfig+0x3ec>
 8004c40:	e01b      	b.n	8004c7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c42:	4b5a      	ldr	r3, [pc, #360]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c48:	4a58      	ldr	r2, [pc, #352]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c52:	f7fd fa21 	bl	8002098 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c5a:	f7fd fa1d 	bl	8002098 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e1fe      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c6c:	4b4f      	ldr	r3, [pc, #316]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1ef      	bne.n	8004c5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80a6 	beq.w	8004dd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c8c:	4b47      	ldr	r3, [pc, #284]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10d      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c98:	4b44      	ldr	r3, [pc, #272]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9c:	4a43      	ldr	r2, [pc, #268]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ca4:	4b41      	ldr	r3, [pc, #260]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <HAL_RCC_OscConfig+0x57c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d118      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <HAL_RCC_OscConfig+0x57c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a3a      	ldr	r2, [pc, #232]	; (8004db0 <HAL_RCC_OscConfig+0x57c>)
 8004cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ccc:	f7fd f9e4 	bl	8002098 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd4:	f7fd f9e0 	bl	8002098 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e1c1      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce6:	4b32      	ldr	r3, [pc, #200]	; (8004db0 <HAL_RCC_OscConfig+0x57c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d108      	bne.n	8004d0c <HAL_RCC_OscConfig+0x4d8>
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	4a2a      	ldr	r2, [pc, #168]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d0a:	e024      	b.n	8004d56 <HAL_RCC_OscConfig+0x522>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b05      	cmp	r3, #5
 8004d12:	d110      	bne.n	8004d36 <HAL_RCC_OscConfig+0x502>
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	4a24      	ldr	r2, [pc, #144]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d1c:	f043 0304 	orr.w	r3, r3, #4
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d24:	4b21      	ldr	r3, [pc, #132]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	4a20      	ldr	r2, [pc, #128]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d34:	e00f      	b.n	8004d56 <HAL_RCC_OscConfig+0x522>
 8004d36:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d46:	4b19      	ldr	r3, [pc, #100]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	4a17      	ldr	r2, [pc, #92]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d4e:	f023 0304 	bic.w	r3, r3, #4
 8004d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5e:	f7fd f99b 	bl	8002098 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fd f997 	bl	8002098 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e176      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCC_OscConfig+0x578>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ed      	beq.n	8004d66 <HAL_RCC_OscConfig+0x532>
 8004d8a:	e01a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd f984 	bl	8002098 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d92:	e00f      	b.n	8004db4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f7fd f980 	bl	8002098 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d906      	bls.n	8004db4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e15f      	b.n	800506a <HAL_RCC_OscConfig+0x836>
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004db4:	4baa      	ldr	r3, [pc, #680]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e8      	bne.n	8004d94 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4ba5      	ldr	r3, [pc, #660]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	4aa4      	ldr	r2, [pc, #656]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03c      	beq.n	8004e5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01c      	beq.n	8004e22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004de8:	4b9d      	ldr	r3, [pc, #628]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dee:	4a9c      	ldr	r2, [pc, #624]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fd f94e 	bl	8002098 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e00:	f7fd f94a 	bl	8002098 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e12b      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e12:	4b93      	ldr	r3, [pc, #588]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ef      	beq.n	8004e00 <HAL_RCC_OscConfig+0x5cc>
 8004e20:	e01b      	b.n	8004e5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e22:	4b8f      	ldr	r3, [pc, #572]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e28:	4a8d      	ldr	r2, [pc, #564]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e32:	f7fd f931 	bl	8002098 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e3a:	f7fd f92d 	bl	8002098 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e10e      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e4c:	4b84      	ldr	r3, [pc, #528]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1ef      	bne.n	8004e3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8102 	beq.w	8005068 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	f040 80c5 	bne.w	8004ff8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e6e:	4b7c      	ldr	r3, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0203 	and.w	r2, r3, #3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d12c      	bne.n	8004edc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d123      	bne.n	8004edc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d11b      	bne.n	8004edc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d113      	bne.n	8004edc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d109      	bne.n	8004edc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d067      	beq.n	8004fac <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d062      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ee2:	4b5f      	ldr	r3, [pc, #380]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0bb      	b.n	800506a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ef2:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a5a      	ldr	r2, [pc, #360]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004efe:	f7fd f8cb 	bl	8002098 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f06:	f7fd f8c7 	bl	8002098 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e0a8      	b.n	800506a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f18:	4b51      	ldr	r3, [pc, #324]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f24:	4b4e      	ldr	r3, [pc, #312]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	4b4e      	ldr	r3, [pc, #312]	; (8005064 <HAL_RCC_OscConfig+0x830>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f34:	3a01      	subs	r2, #1
 8004f36:	0112      	lsls	r2, r2, #4
 8004f38:	4311      	orrs	r1, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f3e:	0212      	lsls	r2, r2, #8
 8004f40:	4311      	orrs	r1, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f46:	0852      	lsrs	r2, r2, #1
 8004f48:	3a01      	subs	r2, #1
 8004f4a:	0552      	lsls	r2, r2, #21
 8004f4c:	4311      	orrs	r1, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f52:	0852      	lsrs	r2, r2, #1
 8004f54:	3a01      	subs	r2, #1
 8004f56:	0652      	lsls	r2, r2, #25
 8004f58:	4311      	orrs	r1, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f5e:	06d2      	lsls	r2, r2, #27
 8004f60:	430a      	orrs	r2, r1
 8004f62:	493f      	ldr	r1, [pc, #252]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f68:	4b3d      	ldr	r3, [pc, #244]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a3c      	ldr	r2, [pc, #240]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f74:	4b3a      	ldr	r3, [pc, #232]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a39      	ldr	r2, [pc, #228]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f80:	f7fd f88a 	bl	8002098 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fd f886 	bl	8002098 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e067      	b.n	800506a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9a:	4b31      	ldr	r3, [pc, #196]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fa6:	e05f      	b.n	8005068 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e05e      	b.n	800506a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fac:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d157      	bne.n	8005068 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fb8:	4b29      	ldr	r3, [pc, #164]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a28      	ldr	r2, [pc, #160]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc4:	4b26      	ldr	r3, [pc, #152]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4a25      	ldr	r2, [pc, #148]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fd0:	f7fd f862 	bl	8002098 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd f85e 	bl	8002098 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e03f      	b.n	800506a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fea:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x7a4>
 8004ff6:	e037      	b.n	8005068 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d02d      	beq.n	800505a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffe:	4b18      	ldr	r3, [pc, #96]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a17      	ldr	r2, [pc, #92]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8005004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005008:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800500a:	4b15      	ldr	r3, [pc, #84]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d105      	bne.n	8005022 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	4a11      	ldr	r2, [pc, #68]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 800501c:	f023 0303 	bic.w	r3, r3, #3
 8005020:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 8005028:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800502c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005030:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005032:	f7fd f831 	bl	8002098 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503a:	f7fd f82d 	bl	8002098 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e00e      	b.n	800506a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <HAL_RCC_OscConfig+0x82c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f0      	bne.n	800503a <HAL_RCC_OscConfig+0x806>
 8005058:	e006      	b.n	8005068 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e005      	b.n	800506a <HAL_RCC_OscConfig+0x836>
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000
 8005064:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3720      	adds	r7, #32
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop

08005074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0c8      	b.n	800521a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005088:	4b66      	ldr	r3, [pc, #408]	; (8005224 <HAL_RCC_ClockConfig+0x1b0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d910      	bls.n	80050b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b63      	ldr	r3, [pc, #396]	; (8005224 <HAL_RCC_ClockConfig+0x1b0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 0207 	bic.w	r2, r3, #7
 800509e:	4961      	ldr	r1, [pc, #388]	; (8005224 <HAL_RCC_ClockConfig+0x1b0>)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a6:	4b5f      	ldr	r3, [pc, #380]	; (8005224 <HAL_RCC_ClockConfig+0x1b0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d001      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0b0      	b.n	800521a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d04c      	beq.n	800515e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d107      	bne.n	80050dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050cc:	4b56      	ldr	r3, [pc, #344]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d121      	bne.n	800511c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e09e      	b.n	800521a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e4:	4b50      	ldr	r3, [pc, #320]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d115      	bne.n	800511c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e092      	b.n	800521a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050fc:	4b4a      	ldr	r3, [pc, #296]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e086      	b.n	800521a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800510c:	4b46      	ldr	r3, [pc, #280]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e07e      	b.n	800521a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800511c:	4b42      	ldr	r3, [pc, #264]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f023 0203 	bic.w	r2, r3, #3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	493f      	ldr	r1, [pc, #252]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 800512a:	4313      	orrs	r3, r2
 800512c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512e:	f7fc ffb3 	bl	8002098 <HAL_GetTick>
 8005132:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005134:	e00a      	b.n	800514c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005136:	f7fc ffaf 	bl	8002098 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d901      	bls.n	800514c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e066      	b.n	800521a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514c:	4b36      	ldr	r3, [pc, #216]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 020c 	and.w	r2, r3, #12
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	429a      	cmp	r2, r3
 800515c:	d1eb      	bne.n	8005136 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516a:	4b2f      	ldr	r3, [pc, #188]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	492c      	ldr	r1, [pc, #176]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 8005178:	4313      	orrs	r3, r2
 800517a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800517c:	4b29      	ldr	r3, [pc, #164]	; (8005224 <HAL_RCC_ClockConfig+0x1b0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d210      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b26      	ldr	r3, [pc, #152]	; (8005224 <HAL_RCC_ClockConfig+0x1b0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 0207 	bic.w	r2, r3, #7
 8005192:	4924      	ldr	r1, [pc, #144]	; (8005224 <HAL_RCC_ClockConfig+0x1b0>)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b22      	ldr	r3, [pc, #136]	; (8005224 <HAL_RCC_ClockConfig+0x1b0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e036      	b.n	800521a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4918      	ldr	r1, [pc, #96]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4910      	ldr	r1, [pc, #64]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051ea:	f000 f825 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80051ee:	4601      	mov	r1, r0
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <HAL_RCC_ClockConfig+0x1b4>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	4a0c      	ldr	r2, [pc, #48]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	5cd3      	ldrb	r3, [r2, r3]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	fa21 f303 	lsr.w	r3, r1, r3
 8005206:	4a0a      	ldr	r2, [pc, #40]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <HAL_RCC_ClockConfig+0x1c0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f7fc fef6 	bl	8002000 <HAL_InitTick>
 8005214:	4603      	mov	r3, r0
 8005216:	72fb      	strb	r3, [r7, #11]

  return status;
 8005218:	7afb      	ldrb	r3, [r7, #11]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40022000 	.word	0x40022000
 8005228:	40021000 	.word	0x40021000
 800522c:	080066a8 	.word	0x080066a8
 8005230:	20000000 	.word	0x20000000
 8005234:	20000004 	.word	0x20000004

08005238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005238:	b480      	push	{r7}
 800523a:	b089      	sub	sp, #36	; 0x24
 800523c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005246:	4b3d      	ldr	r3, [pc, #244]	; (800533c <HAL_RCC_GetSysClockFreq+0x104>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005250:	4b3a      	ldr	r3, [pc, #232]	; (800533c <HAL_RCC_GetSysClockFreq+0x104>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_RCC_GetSysClockFreq+0x34>
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b0c      	cmp	r3, #12
 8005264:	d121      	bne.n	80052aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d11e      	bne.n	80052aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800526c:	4b33      	ldr	r3, [pc, #204]	; (800533c <HAL_RCC_GetSysClockFreq+0x104>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d107      	bne.n	8005288 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005278:	4b30      	ldr	r3, [pc, #192]	; (800533c <HAL_RCC_GetSysClockFreq+0x104>)
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	e005      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005288:	4b2c      	ldr	r3, [pc, #176]	; (800533c <HAL_RCC_GetSysClockFreq+0x104>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	091b      	lsrs	r3, r3, #4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005294:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10d      	bne.n	80052c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d102      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052b0:	4b24      	ldr	r3, [pc, #144]	; (8005344 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	e004      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052bc:	4b22      	ldr	r3, [pc, #136]	; (8005348 <HAL_RCC_GetSysClockFreq+0x110>)
 80052be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b0c      	cmp	r3, #12
 80052c4:	d133      	bne.n	800532e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052c6:	4b1d      	ldr	r3, [pc, #116]	; (800533c <HAL_RCC_GetSysClockFreq+0x104>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d002      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0xa4>
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0xaa>
 80052da:	e005      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052dc:	4b19      	ldr	r3, [pc, #100]	; (8005344 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052de:	617b      	str	r3, [r7, #20]
      break;
 80052e0:	e005      	b.n	80052ee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052e2:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_RCC_GetSysClockFreq+0x110>)
 80052e4:	617b      	str	r3, [r7, #20]
      break;
 80052e6:	e002      	b.n	80052ee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	617b      	str	r3, [r7, #20]
      break;
 80052ec:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <HAL_RCC_GetSysClockFreq+0x104>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	091b      	lsrs	r3, r3, #4
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	3301      	adds	r3, #1
 80052fa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052fc:	4b0f      	ldr	r3, [pc, #60]	; (800533c <HAL_RCC_GetSysClockFreq+0x104>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	fb02 f203 	mul.w	r2, r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005312:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <HAL_RCC_GetSysClockFreq+0x104>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	0e5b      	lsrs	r3, r3, #25
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800532e:	69bb      	ldr	r3, [r7, #24]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3724      	adds	r7, #36	; 0x24
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40021000 	.word	0x40021000
 8005340:	080066c0 	.word	0x080066c0
 8005344:	00f42400 	.word	0x00f42400
 8005348:	007a1200 	.word	0x007a1200

0800534c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_RCC_GetHCLKFreq+0x14>)
 8005352:	681b      	ldr	r3, [r3, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000000 	.word	0x20000000

08005364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005368:	f7ff fff0 	bl	800534c <HAL_RCC_GetHCLKFreq>
 800536c:	4601      	mov	r1, r0
 800536e:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	4a04      	ldr	r2, [pc, #16]	; (800538c <HAL_RCC_GetPCLK1Freq+0x28>)
 800537a:	5cd3      	ldrb	r3, [r2, r3]
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40021000 	.word	0x40021000
 800538c:	080066b8 	.word	0x080066b8

08005390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005394:	f7ff ffda 	bl	800534c <HAL_RCC_GetHCLKFreq>
 8005398:	4601      	mov	r1, r0
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	0adb      	lsrs	r3, r3, #11
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053a6:	5cd3      	ldrb	r3, [r2, r3]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000
 80053b8:	080066b8 	.word	0x080066b8

080053bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053c8:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053d4:	f7ff f9ca 	bl	800476c <HAL_PWREx_GetVoltageRange>
 80053d8:	6178      	str	r0, [r7, #20]
 80053da:	e014      	b.n	8005406 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053dc:	4b25      	ldr	r3, [pc, #148]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	4a24      	ldr	r2, [pc, #144]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e6:	6593      	str	r3, [r2, #88]	; 0x58
 80053e8:	4b22      	ldr	r3, [pc, #136]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053f4:	f7ff f9ba 	bl	800476c <HAL_PWREx_GetVoltageRange>
 80053f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053fa:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005404:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800540c:	d10b      	bne.n	8005426 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b80      	cmp	r3, #128	; 0x80
 8005412:	d919      	bls.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2ba0      	cmp	r3, #160	; 0xa0
 8005418:	d902      	bls.n	8005420 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800541a:	2302      	movs	r3, #2
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	e013      	b.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005420:	2301      	movs	r3, #1
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	e010      	b.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d902      	bls.n	8005432 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800542c:	2303      	movs	r3, #3
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	e00a      	b.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b80      	cmp	r3, #128	; 0x80
 8005436:	d102      	bne.n	800543e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005438:	2302      	movs	r3, #2
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	e004      	b.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b70      	cmp	r3, #112	; 0x70
 8005442:	d101      	bne.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005444:	2301      	movs	r3, #1
 8005446:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f023 0207 	bic.w	r2, r3, #7
 8005450:	4909      	ldr	r1, [pc, #36]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005458:	4b07      	ldr	r3, [pc, #28]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	429a      	cmp	r2, r3
 8005464:	d001      	beq.n	800546a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021000 	.word	0x40021000
 8005478:	40022000 	.word	0x40022000

0800547c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005484:	2300      	movs	r3, #0
 8005486:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005488:	2300      	movs	r3, #0
 800548a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005494:	2b00      	cmp	r3, #0
 8005496:	d02f      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054a0:	d005      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80054a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054a6:	d015      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80054ac:	e00f      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80054ae:	4b5d      	ldr	r3, [pc, #372]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	4a5c      	ldr	r2, [pc, #368]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054ba:	e00c      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fa44 	bl	8005950 <RCCEx_PLLSAI1_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054cc:	e003      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	74fb      	strb	r3, [r7, #19]
      break;
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80054d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054dc:	4b51      	ldr	r3, [pc, #324]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ea:	494e      	ldr	r1, [pc, #312]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054f2:	e001      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	7cfb      	ldrb	r3, [r7, #19]
 80054f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 809e 	beq.w	8005642 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005506:	2300      	movs	r3, #0
 8005508:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800550a:	4b46      	ldr	r3, [pc, #280]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00d      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005520:	4b40      	ldr	r3, [pc, #256]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	4a3f      	ldr	r2, [pc, #252]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552a:	6593      	str	r3, [r2, #88]	; 0x58
 800552c:	4b3d      	ldr	r3, [pc, #244]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005538:	2301      	movs	r3, #1
 800553a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800553c:	4b3a      	ldr	r3, [pc, #232]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a39      	ldr	r2, [pc, #228]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005548:	f7fc fda6 	bl	8002098 <HAL_GetTick>
 800554c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800554e:	e009      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005550:	f7fc fda2 	bl	8002098 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d902      	bls.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	74fb      	strb	r3, [r7, #19]
        break;
 8005562:	e005      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005564:	4b30      	ldr	r3, [pc, #192]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0ef      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d15a      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005576:	4b2b      	ldr	r3, [pc, #172]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005580:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01e      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	429a      	cmp	r2, r3
 8005590:	d019      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005592:	4b24      	ldr	r3, [pc, #144]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800559e:	4b21      	ldr	r3, [pc, #132]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a4:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80055a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ae:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b4:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055be:	4a19      	ldr	r2, [pc, #100]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d016      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d0:	f7fc fd62 	bl	8002098 <HAL_GetTick>
 80055d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d6:	e00b      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fc fd5e 	bl	8002098 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d902      	bls.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	74fb      	strb	r3, [r7, #19]
            break;
 80055ee:	e006      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f0:	4b0c      	ldr	r3, [pc, #48]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0ec      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80055fe:	7cfb      	ldrb	r3, [r7, #19]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005604:	4b07      	ldr	r3, [pc, #28]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005612:	4904      	ldr	r1, [pc, #16]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800561a:	e009      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	74bb      	strb	r3, [r7, #18]
 8005620:	e006      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	7cfb      	ldrb	r3, [r7, #19]
 800562e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005630:	7c7b      	ldrb	r3, [r7, #17]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d105      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005636:	4b9e      	ldr	r3, [pc, #632]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	4a9d      	ldr	r2, [pc, #628]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800563c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005640:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800564e:	4b98      	ldr	r3, [pc, #608]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f023 0203 	bic.w	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	4994      	ldr	r1, [pc, #592]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005670:	4b8f      	ldr	r3, [pc, #572]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f023 020c 	bic.w	r2, r3, #12
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	498c      	ldr	r1, [pc, #560]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005692:	4b87      	ldr	r3, [pc, #540]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	4983      	ldr	r1, [pc, #524]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056b4:	4b7e      	ldr	r3, [pc, #504]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	497b      	ldr	r1, [pc, #492]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056d6:	4b76      	ldr	r3, [pc, #472]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	4972      	ldr	r1, [pc, #456]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056f8:	4b6d      	ldr	r3, [pc, #436]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	496a      	ldr	r1, [pc, #424]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800571a:	4b65      	ldr	r3, [pc, #404]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005728:	4961      	ldr	r1, [pc, #388]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800573c:	4b5c      	ldr	r3, [pc, #368]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	4959      	ldr	r1, [pc, #356]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800575e:	4b54      	ldr	r3, [pc, #336]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	4950      	ldr	r1, [pc, #320]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005780:	4b4b      	ldr	r3, [pc, #300]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	4948      	ldr	r1, [pc, #288]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057a2:	4b43      	ldr	r3, [pc, #268]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80057a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057a8:	f023 0203 	bic.w	r2, r3, #3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	493f      	ldr	r1, [pc, #252]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d028      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057c4:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d2:	4937      	ldr	r1, [pc, #220]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e2:	d106      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e4:	4b32      	ldr	r3, [pc, #200]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4a31      	ldr	r2, [pc, #196]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80057ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ee:	60d3      	str	r3, [r2, #12]
 80057f0:	e011      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057fa:	d10c      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	2101      	movs	r1, #1
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f8a4 	bl	8005950 <RCCEx_PLLSAI1_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d028      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005822:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	491f      	ldr	r1, [pc, #124]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	d106      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005842:	4b1b      	ldr	r3, [pc, #108]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	4a1a      	ldr	r2, [pc, #104]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800584c:	60d3      	str	r3, [r2, #12]
 800584e:	e011      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005858:	d10c      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3304      	adds	r3, #4
 800585e:	2101      	movs	r1, #1
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f875 	bl	8005950 <RCCEx_PLLSAI1_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800586a:	7cfb      	ldrb	r3, [r7, #19]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d02b      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588e:	4908      	ldr	r1, [pc, #32]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589e:	d109      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a0:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4a02      	ldr	r2, [pc, #8]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80058a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058aa:	60d3      	str	r3, [r2, #12]
 80058ac:	e014      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80058ae:	bf00      	nop
 80058b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058bc:	d10c      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3304      	adds	r3, #4
 80058c2:	2101      	movs	r1, #1
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 f843 	bl	8005950 <RCCEx_PLLSAI1_Config>
 80058ca:	4603      	mov	r3, r0
 80058cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058ce:	7cfb      	ldrb	r3, [r7, #19]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80058d4:	7cfb      	ldrb	r3, [r7, #19]
 80058d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01c      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058e4:	4b19      	ldr	r3, [pc, #100]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f2:	4916      	ldr	r1, [pc, #88]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005902:	d10c      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	2102      	movs	r1, #2
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f820 	bl	8005950 <RCCEx_PLLSAI1_Config>
 8005910:	4603      	mov	r3, r0
 8005912:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005914:	7cfb      	ldrb	r3, [r7, #19]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 800591a:	7cfb      	ldrb	r3, [r7, #19]
 800591c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800592a:	4b08      	ldr	r3, [pc, #32]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005938:	4904      	ldr	r1, [pc, #16]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005940:	7cbb      	ldrb	r3, [r7, #18]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40021000 	.word	0x40021000

08005950 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800595e:	4b73      	ldr	r3, [pc, #460]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d018      	beq.n	800599c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800596a:	4b70      	ldr	r3, [pc, #448]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f003 0203 	and.w	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d10d      	bne.n	8005996 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
       ||
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005982:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
       ||
 8005992:	429a      	cmp	r2, r3
 8005994:	d044      	beq.n	8005a20 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	73fb      	strb	r3, [r7, #15]
 800599a:	e041      	b.n	8005a20 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d00c      	beq.n	80059be <RCCEx_PLLSAI1_Config+0x6e>
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d013      	beq.n	80059d0 <RCCEx_PLLSAI1_Config+0x80>
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d120      	bne.n	80059ee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059ac:	4b5f      	ldr	r3, [pc, #380]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11d      	bne.n	80059f4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059bc:	e01a      	b.n	80059f4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059be:	4b5b      	ldr	r3, [pc, #364]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d116      	bne.n	80059f8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ce:	e013      	b.n	80059f8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059d0:	4b56      	ldr	r3, [pc, #344]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10f      	bne.n	80059fc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059dc:	4b53      	ldr	r3, [pc, #332]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d109      	bne.n	80059fc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059ec:	e006      	b.n	80059fc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]
      break;
 80059f2:	e004      	b.n	80059fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059f4:	bf00      	nop
 80059f6:	e002      	b.n	80059fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10d      	bne.n	8005a20 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a04:	4b49      	ldr	r3, [pc, #292]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	4944      	ldr	r1, [pc, #272]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d17c      	bne.n	8005b20 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a26:	4b41      	ldr	r3, [pc, #260]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a40      	ldr	r2, [pc, #256]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a32:	f7fc fb31 	bl	8002098 <HAL_GetTick>
 8005a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a38:	e009      	b.n	8005a4e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a3a:	f7fc fb2d 	bl	8002098 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d902      	bls.n	8005a4e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	73fb      	strb	r3, [r7, #15]
        break;
 8005a4c:	e005      	b.n	8005a5a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a4e:	4b37      	ldr	r3, [pc, #220]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1ef      	bne.n	8005a3a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d15f      	bne.n	8005b20 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d110      	bne.n	8005a88 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a66:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6892      	ldr	r2, [r2, #8]
 8005a76:	0211      	lsls	r1, r2, #8
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68d2      	ldr	r2, [r2, #12]
 8005a7c:	06d2      	lsls	r2, r2, #27
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	492a      	ldr	r1, [pc, #168]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	610b      	str	r3, [r1, #16]
 8005a86:	e027      	b.n	8005ad8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d112      	bne.n	8005ab4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a8e:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6892      	ldr	r2, [r2, #8]
 8005a9e:	0211      	lsls	r1, r2, #8
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6912      	ldr	r2, [r2, #16]
 8005aa4:	0852      	lsrs	r2, r2, #1
 8005aa6:	3a01      	subs	r2, #1
 8005aa8:	0552      	lsls	r2, r2, #21
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	491f      	ldr	r1, [pc, #124]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	610b      	str	r3, [r1, #16]
 8005ab2:	e011      	b.n	8005ad8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005abc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6892      	ldr	r2, [r2, #8]
 8005ac4:	0211      	lsls	r1, r2, #8
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6952      	ldr	r2, [r2, #20]
 8005aca:	0852      	lsrs	r2, r2, #1
 8005acc:	3a01      	subs	r2, #1
 8005ace:	0652      	lsls	r2, r2, #25
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	4916      	ldr	r1, [pc, #88]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ade:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ae2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae4:	f7fc fad8 	bl	8002098 <HAL_GetTick>
 8005ae8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005aea:	e009      	b.n	8005b00 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aec:	f7fc fad4 	bl	8002098 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d902      	bls.n	8005b00 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	73fb      	strb	r3, [r7, #15]
          break;
 8005afe:	e005      	b.n	8005b0c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0ef      	beq.n	8005aec <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	4904      	ldr	r1, [pc, #16]	; (8005b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000

08005b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e040      	b.n	8005bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fc f9d0 	bl	8001ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2224      	movs	r2, #36	; 0x24
 8005b5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f8c0 	bl	8005cf4 <UART_SetConfig>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e022      	b.n	8005bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fbf4 	bl	8006374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fc7b 	bl	80064b8 <UART_CheckIdleState>
 8005bc2:	4603      	mov	r3, r0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	f040 8081 	bne.w	8005ce8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_UART_Transmit+0x26>
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e079      	b.n	8005cea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Transmit+0x38>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e072      	b.n	8005cea <HAL_UART_Transmit+0x11e>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2221      	movs	r2, #33	; 0x21
 8005c16:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c18:	f7fc fa3e 	bl	8002098 <HAL_GetTick>
 8005c1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	88fa      	ldrh	r2, [r7, #6]
 8005c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	d108      	bne.n	8005c4a <HAL_UART_Transmit+0x7e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	61bb      	str	r3, [r7, #24]
 8005c48:	e003      	b.n	8005c52 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005c5a:	e02d      	b.n	8005cb8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2200      	movs	r2, #0
 8005c64:	2180      	movs	r1, #128	; 0x80
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 fc6b 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e039      	b.n	8005cea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	881a      	ldrh	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c88:	b292      	uxth	r2, r2
 8005c8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	3302      	adds	r3, #2
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	e008      	b.n	8005ca6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	781a      	ldrb	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	b292      	uxth	r2, r2
 8005c9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1cb      	bne.n	8005c5c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2140      	movs	r1, #64	; 0x40
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fc37 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e005      	b.n	8005cea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3720      	adds	r7, #32
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005cf8:	b08a      	sub	sp, #40	; 0x28
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4bb0      	ldr	r3, [pc, #704]	; (8005fec <UART_SetConfig+0x2f8>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d32:	430b      	orrs	r3, r1
 8005d34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4aa6      	ldr	r2, [pc, #664]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	4313      	orrs	r3, r2
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a9d      	ldr	r2, [pc, #628]	; (8005ff4 <UART_SetConfig+0x300>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d126      	bne.n	8005dd2 <UART_SetConfig+0xde>
 8005d84:	4b9c      	ldr	r3, [pc, #624]	; (8005ff8 <UART_SetConfig+0x304>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d81a      	bhi.n	8005dc8 <UART_SetConfig+0xd4>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <UART_SetConfig+0xa4>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005db9 	.word	0x08005db9
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005dc1 	.word	0x08005dc1
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dae:	e0d6      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005db0:	2302      	movs	r3, #2
 8005db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db6:	e0d2      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005db8:	2304      	movs	r3, #4
 8005dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dbe:	e0ce      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005dc0:	2308      	movs	r3, #8
 8005dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc6:	e0ca      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dce:	bf00      	nop
 8005dd0:	e0c5      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a89      	ldr	r2, [pc, #548]	; (8005ffc <UART_SetConfig+0x308>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d138      	bne.n	8005e4e <UART_SetConfig+0x15a>
 8005ddc:	4b86      	ldr	r3, [pc, #536]	; (8005ff8 <UART_SetConfig+0x304>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b0c      	cmp	r3, #12
 8005de8:	d82c      	bhi.n	8005e44 <UART_SetConfig+0x150>
 8005dea:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0xfc>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08005e45 	.word	0x08005e45
 8005dfc:	08005e45 	.word	0x08005e45
 8005e00:	08005e35 	.word	0x08005e35
 8005e04:	08005e45 	.word	0x08005e45
 8005e08:	08005e45 	.word	0x08005e45
 8005e0c:	08005e45 	.word	0x08005e45
 8005e10:	08005e2d 	.word	0x08005e2d
 8005e14:	08005e45 	.word	0x08005e45
 8005e18:	08005e45 	.word	0x08005e45
 8005e1c:	08005e45 	.word	0x08005e45
 8005e20:	08005e3d 	.word	0x08005e3d
 8005e24:	2300      	movs	r3, #0
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2a:	e098      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e32:	e094      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005e34:	2304      	movs	r3, #4
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3a:	e090      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e42:	e08c      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005e44:	2310      	movs	r3, #16
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4a:	bf00      	nop
 8005e4c:	e087      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a6b      	ldr	r2, [pc, #428]	; (8006000 <UART_SetConfig+0x30c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d125      	bne.n	8005ea4 <UART_SetConfig+0x1b0>
 8005e58:	4b67      	ldr	r3, [pc, #412]	; (8005ff8 <UART_SetConfig+0x304>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d011      	beq.n	8005e8a <UART_SetConfig+0x196>
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d802      	bhi.n	8005e70 <UART_SetConfig+0x17c>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <UART_SetConfig+0x186>
 8005e6e:	e014      	b.n	8005e9a <UART_SetConfig+0x1a6>
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	d006      	beq.n	8005e82 <UART_SetConfig+0x18e>
 8005e74:	2b30      	cmp	r3, #48	; 0x30
 8005e76:	d00c      	beq.n	8005e92 <UART_SetConfig+0x19e>
 8005e78:	e00f      	b.n	8005e9a <UART_SetConfig+0x1a6>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e80:	e06d      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005e82:	2302      	movs	r3, #2
 8005e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e88:	e069      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e90:	e065      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005e92:	2308      	movs	r3, #8
 8005e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e98:	e061      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005e9a:	2310      	movs	r3, #16
 8005e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea0:	bf00      	nop
 8005ea2:	e05c      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a56      	ldr	r2, [pc, #344]	; (8006004 <UART_SetConfig+0x310>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d125      	bne.n	8005efa <UART_SetConfig+0x206>
 8005eae:	4b52      	ldr	r3, [pc, #328]	; (8005ff8 <UART_SetConfig+0x304>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005eb8:	2b40      	cmp	r3, #64	; 0x40
 8005eba:	d011      	beq.n	8005ee0 <UART_SetConfig+0x1ec>
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d802      	bhi.n	8005ec6 <UART_SetConfig+0x1d2>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <UART_SetConfig+0x1dc>
 8005ec4:	e014      	b.n	8005ef0 <UART_SetConfig+0x1fc>
 8005ec6:	2b80      	cmp	r3, #128	; 0x80
 8005ec8:	d006      	beq.n	8005ed8 <UART_SetConfig+0x1e4>
 8005eca:	2bc0      	cmp	r3, #192	; 0xc0
 8005ecc:	d00c      	beq.n	8005ee8 <UART_SetConfig+0x1f4>
 8005ece:	e00f      	b.n	8005ef0 <UART_SetConfig+0x1fc>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed6:	e042      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ede:	e03e      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee6:	e03a      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005ee8:	2308      	movs	r3, #8
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eee:	e036      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef6:	bf00      	nop
 8005ef8:	e031      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a3c      	ldr	r2, [pc, #240]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d129      	bne.n	8005f58 <UART_SetConfig+0x264>
 8005f04:	4b3c      	ldr	r3, [pc, #240]	; (8005ff8 <UART_SetConfig+0x304>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f12:	d014      	beq.n	8005f3e <UART_SetConfig+0x24a>
 8005f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f18:	d802      	bhi.n	8005f20 <UART_SetConfig+0x22c>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <UART_SetConfig+0x23a>
 8005f1e:	e016      	b.n	8005f4e <UART_SetConfig+0x25a>
 8005f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f24:	d007      	beq.n	8005f36 <UART_SetConfig+0x242>
 8005f26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f2a:	d00c      	beq.n	8005f46 <UART_SetConfig+0x252>
 8005f2c:	e00f      	b.n	8005f4e <UART_SetConfig+0x25a>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f34:	e013      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005f36:	2302      	movs	r3, #2
 8005f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3c:	e00f      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005f3e:	2304      	movs	r3, #4
 8005f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f44:	e00b      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005f46:	2308      	movs	r3, #8
 8005f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4c:	e007      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005f4e:	2310      	movs	r3, #16
 8005f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f54:	bf00      	nop
 8005f56:	e002      	b.n	8005f5e <UART_SetConfig+0x26a>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a23      	ldr	r2, [pc, #140]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	f040 80fb 	bne.w	8006160 <UART_SetConfig+0x46c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d823      	bhi.n	8005fba <UART_SetConfig+0x2c6>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0x284>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005fbb 	.word	0x08005fbb
 8005f80:	08005fa5 	.word	0x08005fa5
 8005f84:	08005fbb 	.word	0x08005fbb
 8005f88:	08005fab 	.word	0x08005fab
 8005f8c:	08005fbb 	.word	0x08005fbb
 8005f90:	08005fbb 	.word	0x08005fbb
 8005f94:	08005fbb 	.word	0x08005fbb
 8005f98:	08005fb3 	.word	0x08005fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005f9c:	f7ff f9e2 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 8005fa0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005fa2:	e00d      	b.n	8005fc0 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005fa4:	4b18      	ldr	r3, [pc, #96]	; (8006008 <UART_SetConfig+0x314>)
 8005fa6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005fa8:	e00a      	b.n	8005fc0 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005faa:	f7ff f945 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 8005fae:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005fb0:	e006      	b.n	8005fc0 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005fb8:	e002      	b.n	8005fc0 <UART_SetConfig+0x2cc>
      default:
        ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	76fb      	strb	r3, [r7, #27]
        break;
 8005fbe:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 81ca 	beq.w	800635c <UART_SetConfig+0x668>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	4413      	add	r3, r2
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d305      	bcc.n	8005fe4 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d913      	bls.n	800600c <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	76fb      	strb	r3, [r7, #27]
 8005fe8:	e1b8      	b.n	800635c <UART_SetConfig+0x668>
 8005fea:	bf00      	nop
 8005fec:	efff69f3 	.word	0xefff69f3
 8005ff0:	40008000 	.word	0x40008000
 8005ff4:	40013800 	.word	0x40013800
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	40004400 	.word	0x40004400
 8006000:	40004800 	.word	0x40004800
 8006004:	40004c00 	.word	0x40004c00
 8006008:	00f42400 	.word	0x00f42400
      }
      else
      {
        switch (clocksource)
 800600c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006010:	2b08      	cmp	r3, #8
 8006012:	f200 8092 	bhi.w	800613a <UART_SetConfig+0x446>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x328>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006041 	.word	0x08006041
 8006020:	0800613b 	.word	0x0800613b
 8006024:	0800608f 	.word	0x0800608f
 8006028:	0800613b 	.word	0x0800613b
 800602c:	080060c3 	.word	0x080060c3
 8006030:	0800613b 	.word	0x0800613b
 8006034:	0800613b 	.word	0x0800613b
 8006038:	0800613b 	.word	0x0800613b
 800603c:	08006111 	.word	0x08006111
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006040:	f7ff f990 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 8006044:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4619      	mov	r1, r3
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	f04f 0400 	mov.w	r4, #0
 8006056:	0214      	lsls	r4, r2, #8
 8006058:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800605c:	020b      	lsls	r3, r1, #8
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6852      	ldr	r2, [r2, #4]
 8006062:	0852      	lsrs	r2, r2, #1
 8006064:	4611      	mov	r1, r2
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	eb13 0b01 	adds.w	fp, r3, r1
 800606e:	eb44 0c02 	adc.w	ip, r4, r2
 8006072:	4658      	mov	r0, fp
 8006074:	4661      	mov	r1, ip
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f04f 0400 	mov.w	r4, #0
 800607e:	461a      	mov	r2, r3
 8006080:	4623      	mov	r3, r4
 8006082:	f7fa fe0d 	bl	8000ca0 <__aeabi_uldivmod>
 8006086:	4603      	mov	r3, r0
 8006088:	460c      	mov	r4, r1
 800608a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800608c:	e058      	b.n	8006140 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	f04f 0400 	mov.w	r4, #0
 8006098:	49ae      	ldr	r1, [pc, #696]	; (8006354 <UART_SetConfig+0x660>)
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	eb13 0b01 	adds.w	fp, r3, r1
 80060a2:	eb44 0c02 	adc.w	ip, r4, r2
 80060a6:	4658      	mov	r0, fp
 80060a8:	4661      	mov	r1, ip
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f04f 0400 	mov.w	r4, #0
 80060b2:	461a      	mov	r2, r3
 80060b4:	4623      	mov	r3, r4
 80060b6:	f7fa fdf3 	bl	8000ca0 <__aeabi_uldivmod>
 80060ba:	4603      	mov	r3, r0
 80060bc:	460c      	mov	r4, r1
 80060be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80060c0:	e03e      	b.n	8006140 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80060c2:	f7ff f8b9 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80060c6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4619      	mov	r1, r3
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	f04f 0400 	mov.w	r4, #0
 80060d8:	0214      	lsls	r4, r2, #8
 80060da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80060de:	020b      	lsls	r3, r1, #8
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6852      	ldr	r2, [r2, #4]
 80060e4:	0852      	lsrs	r2, r2, #1
 80060e6:	4611      	mov	r1, r2
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	eb13 0b01 	adds.w	fp, r3, r1
 80060f0:	eb44 0c02 	adc.w	ip, r4, r2
 80060f4:	4658      	mov	r0, fp
 80060f6:	4661      	mov	r1, ip
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f04f 0400 	mov.w	r4, #0
 8006100:	461a      	mov	r2, r3
 8006102:	4623      	mov	r3, r4
 8006104:	f7fa fdcc 	bl	8000ca0 <__aeabi_uldivmod>
 8006108:	4603      	mov	r3, r0
 800610a:	460c      	mov	r4, r1
 800610c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800610e:	e017      	b.n	8006140 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	f04f 0400 	mov.w	r4, #0
 800611a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800611e:	f144 0100 	adc.w	r1, r4, #0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f04f 0400 	mov.w	r4, #0
 800612a:	461a      	mov	r2, r3
 800612c:	4623      	mov	r3, r4
 800612e:	f7fa fdb7 	bl	8000ca0 <__aeabi_uldivmod>
 8006132:	4603      	mov	r3, r0
 8006134:	460c      	mov	r4, r1
 8006136:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006138:	e002      	b.n	8006140 <UART_SetConfig+0x44c>
          default:
            ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	76fb      	strb	r3, [r7, #27]
            break;
 800613e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006146:	d308      	bcc.n	800615a <UART_SetConfig+0x466>
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614e:	d204      	bcs.n	800615a <UART_SetConfig+0x466>
        {
          huart->Instance->BRR = usartdiv;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	60da      	str	r2, [r3, #12]
 8006158:	e100      	b.n	800635c <UART_SetConfig+0x668>
        }
        else
        {
          ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	76fb      	strb	r3, [r7, #27]
 800615e:	e0fd      	b.n	800635c <UART_SetConfig+0x668>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006168:	f040 8084 	bne.w	8006274 <UART_SetConfig+0x580>
  {
    switch (clocksource)
 800616c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006170:	2b08      	cmp	r3, #8
 8006172:	d85f      	bhi.n	8006234 <UART_SetConfig+0x540>
 8006174:	a201      	add	r2, pc, #4	; (adr r2, 800617c <UART_SetConfig+0x488>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061c1 	.word	0x080061c1
 8006184:	080061e1 	.word	0x080061e1
 8006188:	08006235 	.word	0x08006235
 800618c:	080061fd 	.word	0x080061fd
 8006190:	08006235 	.word	0x08006235
 8006194:	08006235 	.word	0x08006235
 8006198:	08006235 	.word	0x08006235
 800619c:	0800621d 	.word	0x0800621d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a0:	f7ff f8e0 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 80061a4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	005a      	lsls	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	441a      	add	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80061be:	e03c      	b.n	800623a <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c0:	f7ff f8e6 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 80061c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	005a      	lsls	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	441a      	add	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	b29b      	uxth	r3, r3
 80061dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80061de:	e02c      	b.n	800623a <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	085b      	lsrs	r3, r3, #1
 80061e6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80061ea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6852      	ldr	r2, [r2, #4]
 80061f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80061fa:	e01e      	b.n	800623a <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061fc:	f7ff f81c 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 8006200:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	005a      	lsls	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	441a      	add	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	fbb2 f3f3 	udiv	r3, r2, r3
 8006216:	b29b      	uxth	r3, r3
 8006218:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800621a:	e00e      	b.n	800623a <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	b29b      	uxth	r3, r3
 8006230:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006232:	e002      	b.n	800623a <UART_SetConfig+0x546>
      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	76fb      	strb	r3, [r7, #27]
        break;
 8006238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b0f      	cmp	r3, #15
 800623e:	d916      	bls.n	800626e <UART_SetConfig+0x57a>
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006246:	d212      	bcs.n	800626e <UART_SetConfig+0x57a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f023 030f 	bic.w	r3, r3, #15
 8006250:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	b29b      	uxth	r3, r3
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	b29a      	uxth	r2, r3
 800625e:	89fb      	ldrh	r3, [r7, #14]
 8006260:	4313      	orrs	r3, r2
 8006262:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	89fa      	ldrh	r2, [r7, #14]
 800626a:	60da      	str	r2, [r3, #12]
 800626c:	e076      	b.n	800635c <UART_SetConfig+0x668>
    }
    else
    {
      ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	76fb      	strb	r3, [r7, #27]
 8006272:	e073      	b.n	800635c <UART_SetConfig+0x668>
    }
  }
  else
  {
    switch (clocksource)
 8006274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006278:	2b08      	cmp	r3, #8
 800627a:	d85c      	bhi.n	8006336 <UART_SetConfig+0x642>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x590>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062c7 	.word	0x080062c7
 800628c:	080062e5 	.word	0x080062e5
 8006290:	08006337 	.word	0x08006337
 8006294:	08006301 	.word	0x08006301
 8006298:	08006337 	.word	0x08006337
 800629c:	08006337 	.word	0x08006337
 80062a0:	08006337 	.word	0x08006337
 80062a4:	0800631f 	.word	0x0800631f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7ff f85c 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 80062ac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	085a      	lsrs	r2, r3, #1
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	441a      	add	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80062c4:	e03a      	b.n	800633c <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c6:	f7ff f863 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 80062ca:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	085a      	lsrs	r2, r3, #1
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	441a      	add	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	b29b      	uxth	r3, r3
 80062e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80062e2:	e02b      	b.n	800633c <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80062ee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6852      	ldr	r2, [r2, #4]
 80062f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80062fe:	e01d      	b.n	800633c <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006300:	f7fe ff9a 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 8006304:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	085a      	lsrs	r2, r3, #1
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	441a      	add	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	b29b      	uxth	r3, r3
 800631a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800631c:	e00e      	b.n	800633c <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	b29b      	uxth	r3, r3
 8006332:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006334:	e002      	b.n	800633c <UART_SetConfig+0x648>
      default:
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	76fb      	strb	r3, [r7, #27]
        break;
 800633a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b0f      	cmp	r3, #15
 8006340:	d90a      	bls.n	8006358 <UART_SetConfig+0x664>
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006348:	d206      	bcs.n	8006358 <UART_SetConfig+0x664>
    {
      huart->Instance->BRR = usartdiv;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	60da      	str	r2, [r3, #12]
 8006352:	e003      	b.n	800635c <UART_SetConfig+0x668>
 8006354:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006368:	7efb      	ldrb	r3, [r7, #27]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3728      	adds	r7, #40	; 0x28
 800636e:	46bd      	mov	sp, r7
 8006370:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01a      	beq.n	800648a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006472:	d10a      	bne.n	800648a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	605a      	str	r2, [r3, #4]
  }
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af02      	add	r7, sp, #8
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80064c6:	f7fb fde7 	bl	8002098 <HAL_GetTick>
 80064ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d10e      	bne.n	80064f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f82a 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e020      	b.n	800653a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b04      	cmp	r3, #4
 8006504:	d10e      	bne.n	8006524 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006506:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f814 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e00a      	b.n	800653a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	4613      	mov	r3, r2
 8006550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006552:	e05d      	b.n	8006610 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d059      	beq.n	8006610 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655c:	f7fb fd9c 	bl	8002098 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	429a      	cmp	r2, r3
 800656a:	d302      	bcc.n	8006572 <UART_WaitOnFlagUntilTimeout+0x30>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11b      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006580:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e042      	b.n	8006630 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d02b      	beq.n	8006610 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c6:	d123      	bne.n	8006610 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0201 	bic.w	r2, r2, #1
 80065f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e00f      	b.n	8006630 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69da      	ldr	r2, [r3, #28]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4013      	ands	r3, r2
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	429a      	cmp	r2, r3
 800662c:	d092      	beq.n	8006554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <__libc_init_array>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	4e0d      	ldr	r6, [pc, #52]	; (8006670 <__libc_init_array+0x38>)
 800663c:	4c0d      	ldr	r4, [pc, #52]	; (8006674 <__libc_init_array+0x3c>)
 800663e:	1ba4      	subs	r4, r4, r6
 8006640:	10a4      	asrs	r4, r4, #2
 8006642:	2500      	movs	r5, #0
 8006644:	42a5      	cmp	r5, r4
 8006646:	d109      	bne.n	800665c <__libc_init_array+0x24>
 8006648:	4e0b      	ldr	r6, [pc, #44]	; (8006678 <__libc_init_array+0x40>)
 800664a:	4c0c      	ldr	r4, [pc, #48]	; (800667c <__libc_init_array+0x44>)
 800664c:	f000 f820 	bl	8006690 <_init>
 8006650:	1ba4      	subs	r4, r4, r6
 8006652:	10a4      	asrs	r4, r4, #2
 8006654:	2500      	movs	r5, #0
 8006656:	42a5      	cmp	r5, r4
 8006658:	d105      	bne.n	8006666 <__libc_init_array+0x2e>
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006660:	4798      	blx	r3
 8006662:	3501      	adds	r5, #1
 8006664:	e7ee      	b.n	8006644 <__libc_init_array+0xc>
 8006666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800666a:	4798      	blx	r3
 800666c:	3501      	adds	r5, #1
 800666e:	e7f2      	b.n	8006656 <__libc_init_array+0x1e>
 8006670:	080066f8 	.word	0x080066f8
 8006674:	080066f8 	.word	0x080066f8
 8006678:	080066f8 	.word	0x080066f8
 800667c:	080066fc 	.word	0x080066fc

08006680 <memset>:
 8006680:	4402      	add	r2, r0
 8006682:	4603      	mov	r3, r0
 8006684:	4293      	cmp	r3, r2
 8006686:	d100      	bne.n	800668a <memset+0xa>
 8006688:	4770      	bx	lr
 800668a:	f803 1b01 	strb.w	r1, [r3], #1
 800668e:	e7f9      	b.n	8006684 <memset+0x4>

08006690 <_init>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr

0800669c <_fini>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr
